{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/default_cover.png","path":"img/default_cover.png","modified":0,"renderable":0},{"_id":"source/img/signUp_url.png","path":"img/signUp_url.png","modified":0,"renderable":0},{"_id":"source/img/url_config.png","path":"img/url_config.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/ads.txt","path":"ads.txt","modified":0,"renderable":1},{"_id":"source/img/history.png","path":"img/history.png","modified":0,"renderable":0},{"_id":"source/img/sitemap.png","path":"img/sitemap.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_adstxt_3.png","path":"img/adsense/adsense_adstxt_3.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_auto_info_2.png","path":"img/adsense/adsense_auto_info_2.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_auto_4.png","path":"img/adsense/adsense_auto_4.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_man_8.png","path":"img/adsense/adsense_man_8.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_man_6.png","path":"img/adsense/adsense_man_6.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_man_9.png","path":"img/adsense/adsense_man_9.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_warning.png","path":"img/adsense/adsense_warning.png","modified":0,"renderable":0},{"_id":"source/img/adsense/theme_layout.png","path":"img/adsense/theme_layout.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_wait.png","path":"img/adsense/adsense_wait.png","modified":0,"renderable":0},{"_id":"source/img/Ads_SEO.png","path":"img/Ads_SEO.png","modified":0,"renderable":0},{"_id":"source/img/componentsOfCDA.png","path":"img/componentsOfCDA.png","modified":0,"renderable":0},{"_id":"source/img/seo_setting.png","path":"img/seo_setting.png","modified":0,"renderable":0},{"_id":"source/img/header-bg.jpg","path":"img/header-bg.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"source/img/adsense/adsense_activate.png","path":"img/adsense/adsense_activate.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_auto.png","path":"img/adsense/adsense_auto.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_adstxt_2.png","path":"img/adsense/adsense_adstxt_2.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_auto_info_1.png","path":"img/adsense/adsense_auto_info_1.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_auto_2.png","path":"img/adsense/adsense_auto_2.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_man_3.png","path":"img/adsense/adsense_man_3.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_man_5.png","path":"img/adsense/adsense_man_5.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_man_7.png","path":"img/adsense/adsense_man_7.png","modified":0,"renderable":0},{"_id":"source/img/live2d_koharu.png","path":"img/live2d_koharu.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_auto_3.png","path":"img/adsense/adsense_auto_3.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_auto_1.png","path":"img/adsense/adsense_auto_1.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_man_1.png","path":"img/adsense/adsense_man_1.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_man_2.png","path":"img/adsense/adsense_man_2.png","modified":0,"renderable":0},{"_id":"source/img/c-cda.png","path":"img/c-cda.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/lazyload/LICENSE","path":"lib/lazyload/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/lazyload/README.md","path":"lib/lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/lazyload/lozad.min.js","path":"lib/lazyload/lozad.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/lazyload/lozad.js","path":"lib/lazyload/lozad.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flat-top.min.css","path":"lib/pace/pace-theme-flat-top.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-material.min.css","path":"lib/pace/pace-theme-material.min.css","modified":0,"renderable":1},{"_id":"source/img/adsense/adsense_adstxt_1.png","path":"img/adsense/adsense_adstxt_1.png","modified":0,"renderable":0},{"_id":"source/img/adsense/adsense_man_4.png","path":"img/adsense/adsense_man_4.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/img/adsense/adsense_man_10.png","path":"img/adsense/adsense_man_10.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"source/img/adsense/adsense_home.png","path":"img/adsense/adsense_home.png","modified":0,"renderable":0},{"_id":"source/img/c-cda2.png","path":"img/c-cda2.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/img/adsense/adsense_accept.png","path":"img/adsense/adsense_accept.png","modified":0,"renderable":0},{"_id":"source/img/gif/wanko.gif","path":"img/gif/wanko.gif","modified":0,"renderable":0},{"_id":"source/img/gif/hijiki.gif","path":"img/gif/hijiki.gif","modified":0,"renderable":0},{"_id":"source/img/gif/tororo.gif","path":"img/gif/tororo.gif","modified":0,"renderable":0},{"_id":"source/img/gif/koharu.gif","path":"img/gif/koharu.gif","modified":0,"renderable":0},{"_id":"source/img/gif/Epsilon2.1.gif","path":"img/gif/Epsilon2.1.gif","modified":0,"renderable":0},{"_id":"source/img/gif/tsumiki.gif","path":"img/gif/tsumiki.gif","modified":0,"renderable":0},{"_id":"source/img/gif/haruto.gif","path":"img/gif/haruto.gif","modified":0,"renderable":0},{"_id":"source/img/gif/ni-j.gif","path":"img/gif/ni-j.gif","modified":0,"renderable":0},{"_id":"source/img/gif/nito.gif","path":"img/gif/nito.gif","modified":0,"renderable":0},{"_id":"source/img/gif/z16.gif","path":"img/gif/z16.gif","modified":0,"renderable":0},{"_id":"source/img/gif/haru.gif","path":"img/gif/haru.gif","modified":0,"renderable":0},{"_id":"source/img/gif/Unitychan.gif","path":"img/gif/Unitychan.gif","modified":0,"renderable":0},{"_id":"source/img/gif/nico.gif","path":"img/gif/nico.gif","modified":0,"renderable":0},{"_id":"source/img/gif/gf.gif","path":"img/gif/gf.gif","modified":0,"renderable":0},{"_id":"source/img/gif/nipsilon.gif","path":"img/gif/nipsilon.gif","modified":0,"renderable":0},{"_id":"source/img/gif/shizuku.gif","path":"img/gif/shizuku.gif","modified":0,"renderable":0},{"_id":"source/img/gif/hibiki.gif","path":"img/gif/hibiki.gif","modified":0,"renderable":0},{"_id":"source/img/gif/nietzche.gif","path":"img/gif/nietzche.gif","modified":0,"renderable":0},{"_id":"source/img/gif/miku.gif","path":"img/gif/miku.gif","modified":0,"renderable":0}],"Cache":[{"_id":"themes/hexo-theme-next/.all-contributorsrc","hash":"a861e51d8b604bd98c4aac9f4338fa4fb2084a32","modified":1562996588107},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1562996588108},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1562996588108},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1562996588108},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1562996588109},{"_id":"source/.DS_Store","hash":"576b154213458da6e9155b903c97633dcae0526c","modified":1564217954984},{"_id":"themes/hexo-theme-next/.gitignore","hash":"b80cec1d5e6a73d1cec382aad8046d1352a1e963","modified":1562996588128},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1562996588129},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1562996588129},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1562996588129},{"_id":"themes/hexo-theme-next/README.md","hash":"2fcc7621e898732ef7976b89ca2511f84c577c35","modified":1562996588130},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1562996588137},{"_id":"themes/hexo-theme-next/bower.json","hash":"e6a80b9ed2d618d1cca5781952c67167a7cfac07","modified":1562996588135},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"899001c864f975082ca1bc6b3fe3c614007baf8a","modified":1562996588194},{"_id":"themes/hexo-theme-next/package.json","hash":"abefbba4150026ec8b3d8e79c7e874964bd3dc76","modified":1562996588433},{"_id":"themes/hexo-theme-next/_config.yml","hash":"e46f6fc7e01ec2e8d28f52aebfcb3caed9883b3d","modified":1563788799301},{"_id":"source/_drafts/20190307-networking-01.md","hash":"3cef51a73c979b41df43492a285ec5507860e8bc","modified":1563099423794},{"_id":"source/_drafts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1562996887676},{"_id":"source/_drafts/20190123-markdown-plugin.md","hash":"e14a9d979845cadfca27d7de856fd6326fcfd276","modified":1563010873593},{"_id":"source/_posts/20190117-markdown-basic.md","hash":"97c1c6011534d5f6d97d3acd67b53a5a2d852bf0","modified":1563010873581},{"_id":"source/_posts/20190122-spring.md","hash":"403c33045c8c0dc77859c59058d9f447bc559418","modified":1563285022973},{"_id":"source/_posts/20190119-cda-tutorial.md","hash":"15b4a084fae83f3fc211b19f5462a72ba3ac52dc","modified":1564069749298},{"_id":"source/_posts/20190128-cda-tutorial-1.md","hash":"20e0cab3e057d5cb39eb8d4a0e50fecc129dc4d6","modified":1564069761526},{"_id":"source/_posts/20190131-spring-module.md","hash":"035fa984999c2d4d258155dc1fd90f071532056c","modified":1563285008744},{"_id":"source/_posts/20190204-spring-pojo.md","hash":"94752a8863ccc1ec1ff7012c2c38e503095c403a","modified":1563284987560},{"_id":"source/_posts/20190202-spring-keywords.md","hash":"db12d9ecb19c1cbf5ee1fd192d3a15629fd9a282","modified":1563285001314},{"_id":"source/_posts/20190205-os-overview.md","hash":"76e9e59da4ff18455ccab20ca3600374a4de2467","modified":1563284692627},{"_id":"source/_posts/20190211-spring-IoC.md","hash":"1fef1e2e60f176fe7f45b6d391bdd47c666e9e44","modified":1563284977943},{"_id":"source/_posts/20190212-os-overview-2.md","hash":"eb987235965a76384ae505b05dbcac8668a88d58","modified":1563284956772},{"_id":"source/_posts/20190712-01-hello-python.md","hash":"25f96ad713e142b56b2d3f1d733d727c689cf652","modified":1563779287819},{"_id":"source/_posts/20190715-02-functions-and-getting-help.md","hash":"57f768b4245bc6ed0d63ef85cea2cc71c73ecad4","modified":1563779280936},{"_id":"source/_posts/20190717-03-booleans-and-conditionals.md","hash":"3e1f3fbfa56b2ff3b91118bac3544f97f7921411","modified":1563779275234},{"_id":"source/_posts/20190717-hexo-adsense-1.md","hash":"bd197c039ff5820611c2d8ffaef794b90e5194cf","modified":1564219973833},{"_id":"source/_posts/20190717-hexo-seo.md","hash":"4596a05751a3f2435086b98639add82692108672","modified":1563416960044},{"_id":"source/_posts/20190722-hexo-live2d.md","hash":"05f6af8552484b10bf69268cf384d7fd750901c1","modified":1563786953148},{"_id":"source/_posts/20190722-04-lists.md","hash":"22245c78ac1db805f7260597b6593e1f6499d52c","modified":1563977055132},{"_id":"source/_posts/20190725-05-loops-and-list-comprehensions.md","hash":"4f12b002ab805929ec8bc2d31360450d1fba9653","modified":1564147471148},{"_id":"source/_posts/20190727-hexo-adsense-2.md","hash":"64e3a164e7e0d45826cd1a4b85e809e957ef74cc","modified":1564231123509},{"_id":"source/_posts/20190728-sw-6196.md","hash":"1f2fb810dfd8c2e20c9c33c1b9e1001e84118441","modified":1564330852005},{"_id":"source/_posts/20190726-06-strings-and-dictionaries.md","hash":"63633864aedb6c605f0250b2211164fcc9ea06d3","modified":1564550659757},{"_id":"source/_posts/20190728-sw-6204.md","hash":"a1adcc693972b4fd45706a6276aae2ef40abc3f1","modified":1564330847264},{"_id":"source/_posts/20190728-sw-6218.md","hash":"10ff0a43f1df27d9b0688c979e1bcd657ae55574","modified":1564330840871},{"_id":"source/_posts/20190728-sw-6222.md","hash":"16ec231c8934b9510b59ea7cf7fdd8b97d1c3444","modified":1564382613510},{"_id":"source/_posts/20190728-sw-6242.md","hash":"44f12e30f097ed6f11a6bc2c3ac670238c841032","modified":1564330812197},{"_id":"source/_posts/20190728-sw-6230.md","hash":"1f50665e07212324c1e3ffe5d8182f49cc03906a","modified":1564330819648},{"_id":"source/_posts/20190728-sw-6249.md","hash":"2aecfed1de69401632789fc4b128fa6d1c923cc2","modified":1564330822557},{"_id":"source/_posts/20190730-sw-6315.md","hash":"00eb93dec6fc3cb94d5079fe023630df5fd0e8d0","modified":1564478101389},{"_id":"source/_posts/20190729-sw-6319.md","hash":"1bf37b874e5b301eef43ca4bb85c3fbc93e564b2","modified":1564381539573},{"_id":"source/_posts/20190730-sw-6308.md","hash":"1cd8964706fd1b297bf0458facd00bca06f305ac","modified":1564474920719},{"_id":"source/about/index.md","hash":"694344195eecf6108e784af68f653bf6d693cdd4","modified":1563003239196},{"_id":"source/categories/index.md","hash":"7ceb34e1cc78e10f20e02c4162f80a8c72fd6429","modified":1563098927638},{"_id":"source/_posts/blog-migration.md","hash":"bd51e42c5e2a7dd6e28b6ed586ec232e8dc4c5a4","modified":1562998378083},{"_id":"source/_posts/20190729-sw-6325.md","hash":"c3f7d6f41a37f2928312923fa0b633ef24925f17","modified":1564382565296},{"_id":"source/img/.DS_Store","hash":"c6aec45bfebefdc3bb98388a7ad61d2b5665ad8a","modified":1564230944074},{"_id":"source/img/default_cover.png","hash":"a10a747bb6776ec0083d106ddec6cfaed87c589c","modified":1547630623977},{"_id":"source/img/signUp_url.png","hash":"aca74e918e5f062be454f04f375ca2e7df8d6d39","modified":1563415805362},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1562996588090},{"_id":"themes/hexo-theme-next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1562996588094},{"_id":"source/tags/index.md","hash":"2967af66eea09b7d5b0ddc512ef1c2e6586c27cc","modified":1563098928559},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1562996584243},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"fe1ee9e4efcc43a36c05df636384e7fe8caa01ff","modified":1562996588081},{"_id":"source/img/url_config.png","hash":"3e534590f78feb93d6b0b84f0fcaee1bec88d24f","modified":1563416157043},{"_id":"themes/hexo-theme-next/.git/index","hash":"810942b1addefbdd0f06fbd26e2d35aa7a0f1436","modified":1562996588703},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1562996588109},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"7ce6cdc8adcbfda68fcbcc54c8b9fd3434a37993","modified":1562996588110},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3239625bb2573e61f7bcce27a74882a9ff7021e9","modified":1562996588117},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1562996588110},{"_id":"themes/hexo-theme-next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1562996588121},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1562996588121},{"_id":"themes/hexo-theme-next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1562996588122},{"_id":"themes/hexo-theme-next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1562996588122},{"_id":"themes/hexo-theme-next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1562996588122},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"c9fdbbdf712327a8ae1ed5972973a75802e245bc","modified":1562996588123},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1562996588126},{"_id":"themes/hexo-theme-next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1562996588127},{"_id":"themes/hexo-theme-next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1562996588127},{"_id":"themes/hexo-theme-next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1562996588128},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1562996588139},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"4094dab82cbdfdd0de117e94b508bbd5ceb3d363","modified":1562996588139},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"265b3ae69a83efb2e0ce5308ef2dc0f5f1ea0b56","modified":1562996588142},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1562996588143},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1562996588144},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1562996588146},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1562996588149},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1562996588153},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1562996588154},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"88dcfa3e53cef1b7f858f98ca9f980179169ae4c","modified":1562996588195},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1562996588201},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1562996588201},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"a5203c7bbae70bc40f2ee526f9e8105ca9be851e","modified":1562996588203},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"cc1f3a13e020e2cc666ddc57aaebc4c1ebd669d0","modified":1562996588203},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"c1e2e892c678920854e1f3df409118398523849e","modified":1562996588206},{"_id":"themes/hexo-theme-next/languages/hu.yml","hash":"3b4c10c86a228da70dc4b1a1784a6f942e186032","modified":1562996588208},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"3a9f4485e6801e0e6fae749133a52e3797760795","modified":1562996588209},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"28ff9197a3d21e838e33bb026d8adb544320cb1a","modified":1562996588210},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"8f85a6500716191159f16c7f484ba61ddd16eeb6","modified":1562996588213},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"1df31bf037bcb6868a4bd60c49ff55eec5b8167f","modified":1562996588217},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"6f4a339ecc67a140f3f9c7bec369cbda6b45afd7","modified":1562996588217},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"301a0535df5de7b585c7c9752053c41c6ef26f9b","modified":1562996588218},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"6d87701443e33a13574049e613f064f1eb250c95","modified":1562996588221},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"93872ac01074159566ee3e1738eea6e9216bab8e","modified":1562996588221},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"5489606e6c40c0b226a3414c8e5037aac965211d","modified":1562996588282},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"765ba405778f07d7ec3713606568852b04e1a862","modified":1562996588282},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"6a812db8606498980cd64f001e9ef2f50e124809","modified":1562996588283},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"f311ad2cc2edba144764c36c0035b6ed0d356a53","modified":1562996588283},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"7a5e47f561d4b6e132f7f3b09676afbf8520264e","modified":1562996588283},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"3f3674cac8f47a9a509a7557ea1557bbfbd027e8","modified":1562996588284},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"82bb2678ba3ad2cfb3a89dbc7d9633fe98de332e","modified":1563339793210},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1562996588424},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1562996588425},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"9b4733d037c360e8504645b1d6c6dd17817c9d7b","modified":1562996588426},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1562996588430},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1562996588432},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1562996588427},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"29c64c7031aaf276d3d11cdf2e95025996fd6eed","modified":1562996588426},{"_id":"themes/hexo-theme-next/scripts/injects-point.js","hash":"e6ef2f179c4d52d3175e655f9725d6195b5be51b","modified":1562996588444},{"_id":"themes/hexo-theme-next/scripts/injects.js","hash":"f11bf387782cc0fcc8e64a374abbcad5b9e080c8","modified":1562996588445},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"47c79ff687e984c88312d5892ee2fa8bab4c491c","modified":1562996588446},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1562996588679},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1562996588700},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1562996588700},{"_id":"themes/hexo-theme-next/source/ads.txt","hash":"f5d7467f574815e9b39f82517dbdcca3a0663658","modified":1564208434665},{"_id":"source/img/history.png","hash":"91a7ca49b27afa4e1d538174424f2ba9a05aa60a","modified":1548922647325},{"_id":"source/img/sitemap.png","hash":"ac2c774a1d5d26aaa0a7ed31feab1f44f4c79ed2","modified":1563416823016},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562996588625},{"_id":"source/img/adsense/adsense_adstxt_3.png","hash":"5a44f22da32554646de3e77402855403fd4f67a4","modified":1564219093758},{"_id":"source/img/adsense/adsense_auto_info_2.png","hash":"d95febb07b3ddfa67d0528ff941cb5a7f6f4c159","modified":1564220249972},{"_id":"source/img/adsense/adsense_auto_4.png","hash":"fa9e4335fbcd423f65ce50a893fa1be431cce29d","modified":1564219617301},{"_id":"source/img/adsense/adsense_man_8.png","hash":"40f4f7239763b5f020b3fba3b671a7f390009662","modified":1564226933014},{"_id":"source/img/adsense/adsense_man_6.png","hash":"e4d6efd3733238b0466b17691bc236a281788863","modified":1564221797715},{"_id":"source/img/adsense/adsense_man_9.png","hash":"76c3d4d1340dc1f58c44a32a03ea4ad453b74338","modified":1564226953186},{"_id":"source/img/adsense/adsense_warning.png","hash":"fa61e68bd7d8ba98e9d4ae1869a3359693d6919a","modified":1564217937096},{"_id":"source/img/adsense/theme_layout.png","hash":"ba434383d2ccd66088418bc0dc54a77dcc064bfa","modified":1563419950894},{"_id":"source/img/adsense/adsense_wait.png","hash":"2cc2b2e0e94db2c830c9c4d074631e117b25428b","modified":1563418545967},{"_id":"source/img/Ads_SEO.png","hash":"6e0e913764e7de36035e0b41913002befa415d8e","modified":1563343492066},{"_id":"source/img/componentsOfCDA.png","hash":"dd294be69fc566ad92f627a84cf8ab12ee64736d","modified":1548024512699},{"_id":"source/img/seo_setting.png","hash":"c9c43e334182fdf4fa52041cbe80c0fb96905239","modified":1563414500660},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1562996584258},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1562996584247},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1562996584264},{"_id":"themes/hexo-theme-next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1562996584262},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1562996584251},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1562996584263},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1562996584264},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1562996584266},{"_id":"source/img/header-bg.jpg","hash":"5edbc7687d48e9a82034d237fdd5f1e86ecb2c73","modified":1547630339868},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1562996584270},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1562996584263},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1562996584238},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1562996588111},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1562996588115},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1562996588115},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1562996588116},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1562996584254},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"ccfedd8c37f8f75da997a453d21d2cdfedbc04ee","modified":1562996588091},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1562996588157},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1562996588161},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"932d3965d8b1a1ff653c07a0cafcdbf5892d6945","modified":1562996588166},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1562996588179},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1562996588169},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1562996588182},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"e083908279b805ac14b79280060b845089261b9c","modified":1562996588182},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0dfb458370a0ffbbe37c00f53c15e3aa3e79b125","modified":1562996588181},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1562996588182},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1562996588186},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1562996588194},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"79a73361b24e7fb7022992702961faacd6a2f9fe","modified":1562996588193},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1562996588191},{"_id":"themes/hexo-theme-next/layout/_custom/google_adsense.ejs","hash":"3a9c393beea9e5a6745a6030522c996259da2fec","modified":1563339733361},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1562996588312},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"b7f4b9fb69388a308f2ba430bca035aede001d3d","modified":1562996588325},{"_id":"themes/hexo-theme-next/layout/_custom/head.swig","hash":"3a9c393beea9e5a6745a6030522c996259da2fec","modified":1564225008619},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"784356dd77fe96ea1bc4cb0008e2b40de71bf2f0","modified":1562996588335},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"97953309b3ab354b8b7cf011850df42bc14b595d","modified":1562996588336},{"_id":"themes/hexo-theme-next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1562996588340},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"43214f4d39ed2865895c64b63284296078cdd58a","modified":1564228701146},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1562996588351},{"_id":"themes/hexo-theme-next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1562996588352},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"5db3bf74183de45bb4d6e4632a91f1a561467f17","modified":1562996588359},{"_id":"themes/hexo-theme-next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1562996588360},{"_id":"themes/hexo-theme-next/layout/_scripts/next-boot.swig","hash":"283e78eb795f52236026434dab6a0667f14d3c08","modified":1562996588360},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1562996588360},{"_id":"themes/hexo-theme-next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1562996588379},{"_id":"themes/hexo-theme-next/layout/_scripts/three.swig","hash":"cf1819fc0a075d2389ca491740c98eba54ba72a6","modified":1562996588379},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"e7cf946214e409b3717fdc282285adb81ae5d467","modified":1562996588379},{"_id":"themes/hexo-theme-next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1562996588399},{"_id":"themes/hexo-theme-next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1562996588400},{"_id":"themes/hexo-theme-next/layout/_third-party/chatra.swig","hash":"c59b04402ea02e52ea3dedc34217be0f0d1ad0ac","modified":1562996588400},{"_id":"themes/hexo-theme-next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1562996588408},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1562996588409},{"_id":"themes/hexo-theme-next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1562996588409},{"_id":"themes/hexo-theme-next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1562996588410},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.swig","hash":"7757bd285732e857996b99af9d917953589fac5e","modified":1562996588410},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1562996588413},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1562996588415},{"_id":"themes/hexo-theme-next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1562996588422},{"_id":"themes/hexo-theme-next/scripts/filters/default-injects.js","hash":"ed8b2871c10d7d1128bda48582997a4b926290de","modified":1562996588438},{"_id":"themes/hexo-theme-next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1562996588439},{"_id":"themes/hexo-theme-next/scripts/filters/lazyload.js","hash":"3d424ad75b1431f57f8d1d0218b2a06ecc0a6e70","modified":1562996588443},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1562996588443},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1562996588444},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1562996588448},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1562996588449},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"149de45ff83403e97f6affa280072392dca42e4f","modified":1562996588449},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1562996588450},{"_id":"themes/hexo-theme-next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1562996588450},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1562996588451},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1562996588451},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1562996588452},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1562996588457},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1562996588482},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1562996588500},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"7b5a1b48e95fb0d6a75be2ef7318a9a1fe71d09c","modified":1562996588625},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1562996588626},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1562996588628},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1562996588628},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1562996588629},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1562996588630},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1562996588630},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1562996588631},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1562996588632},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1562996588632},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1562996588635},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1562996588635},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1562996588636},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1562996588636},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1562996588636},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1562996588637},{"_id":"themes/hexo-theme-next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1562996588638},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1562996588641},{"_id":"themes/hexo-theme-next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1562996588642},{"_id":"themes/hexo-theme-next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1562996588642},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"ca2965da47ba9fc5b0dde0a825c29e0817b965b9","modified":1562996588643},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"d673f486417eaf1925ffecc3c4720850cad2ada3","modified":1562996588644},{"_id":"themes/hexo-theme-next/source/js/post-details.js","hash":"a614a3830f7dfcd4df303c1255d558a135b3854e","modified":1562996588644},{"_id":"themes/hexo-theme-next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1562996588647},{"_id":"themes/hexo-theme-next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1562996588647},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"cdb827a84df4330c728dbe5e50129a48ac33de01","modified":1564226647611},{"_id":"source/img/adsense/adsense_activate.png","hash":"07aa15657058bf0fdb28fb72365989d4a2c9981f","modified":1564218794209},{"_id":"source/img/adsense/adsense_auto.png","hash":"8923f9828f924ae3ecf6d42f616e6610d3074ec7","modified":1564218848093},{"_id":"source/img/adsense/adsense_adstxt_2.png","hash":"dbd2a32da2214942a1773e9a801e92bcb7a82ac5","modified":1564218773397},{"_id":"source/img/adsense/adsense_auto_info_1.png","hash":"6ca52dd93458b441f7f1d96c9bda221d3205e3f4","modified":1564220235278},{"_id":"source/img/adsense/adsense_auto_2.png","hash":"dbad996380bc8b00ee08180ed024a0a300156615","modified":1564219442704},{"_id":"source/img/adsense/adsense_man_3.png","hash":"c14ee9c403fee72360e0a454362c692002485a9e","modified":1564221454994},{"_id":"source/img/adsense/adsense_man_5.png","hash":"98234280b12dcc2b9fb6e8ac4b709ce457fe09e9","modified":1564230982560},{"_id":"source/img/adsense/adsense_man_7.png","hash":"d97c8597ce3e96285a2b5a9ebf12af1510230210","modified":1564222974396},{"_id":"source/img/live2d_koharu.png","hash":"5f0ddac4055e64220e772e910d4785ab3acffde8","modified":1563786691374},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562996588578},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562996588581},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562996588621},{"_id":"source/img/adsense/adsense_auto_3.png","hash":"05b4e1ceef2a77e1100a46f5e0d8d90056b8b75d","modified":1564219601795},{"_id":"source/img/adsense/adsense_auto_1.png","hash":"7432e2fce36ecb1f087eddb9f4b2bde3ed96d983","modified":1564219425671},{"_id":"source/img/adsense/adsense_man_1.png","hash":"2840d14db88bcf4c8e4a25ca3af9536a60191b71","modified":1564227814967},{"_id":"source/img/adsense/adsense_man_2.png","hash":"f9ac3bb89fb06c7c654a7efc9b65bf2600fa6964","modified":1564221450615},{"_id":"source/img/c-cda.png","hash":"f4771e30cbfae2e4ef595277238b60629af1add3","modified":1548915778892},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"5244a733f7cf30e1201b4f1da0e7ede3a52052ef","modified":1562996588090},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1562996588311},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-item.swig","hash":"9257da95bd032bb3bd1da670e302fd2c7d5610b6","modified":1562996588311},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1562996588341},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1562996588341},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"7a4bf2056034616ef2136759ab03b4c5c6074a68","modified":1562996588342},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1562996588343},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.swig","hash":"7e3d5b40a8e13ce3bb5f28cb23f62c10c2bf14dd","modified":1562996588347},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1562996588350},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1562996588347},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1562996588351},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1562996588351},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1562996588352},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1562996588353},{"_id":"themes/hexo-theme-next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1562996588353},{"_id":"themes/hexo-theme-next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1562996588353},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.swig","hash":"d9fe715fee716f78c7976c4e8838da71439ee0e0","modified":1562996588354},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1562996588354},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1562996588355},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1562996588355},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1562996588356},{"_id":"themes/hexo-theme-next/layout/_partials/share/likely.swig","hash":"06cafe19f0e307ef7ad54038ae76b8db6bb5b4f9","modified":1562996588356},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1562996588361},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1562996588367},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1562996588367},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1562996588374},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1562996588376},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1562996588381},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1562996588381},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1562996588382},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1562996588382},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1562996588383},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"3d01fa6edc0ad73f81813613f2e8a610777f1852","modified":1562996588383},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1562996588384},{"_id":"themes/hexo-theme-next/layout/_third-party/ad/ads_side.swig","hash":"dd4d74d120e67965f83f89f3679224962878657c","modified":1564225799924},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"9fa1ca7059243197d8fbbd35108c36629a254570","modified":1562996588388},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1562996588388},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1562996588388},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"a09d2af2a8470555eeb265b0eb14dc678079e870","modified":1562996588390},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1562996588392},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1562996588396},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1562996588399},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1562996588404},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"1a00b1b78c429721d6477c2d8f6f68f005285cc8","modified":1562996588404},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.swig","hash":"074a995cd630f56fc4a3135173515c86f2cb34b6","modified":1562996588404},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1562996588405},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"53a59cba82cad49f15a90e1a18007aaac525bddd","modified":1562996588405},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"40bab84a4a7a368fa31f0f8ce49af6ec3e5983c9","modified":1562996588406},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"15a4d60d3ecc59db2f23629477f8e7b8324981ed","modified":1562996588406},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1562996588407},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1562996588407},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1562996588408},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1562996588415},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1562996588415},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1562996588417},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1562996588577},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1562996588582},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"ee7659e711f73984f38e459e1143a6cc368a1cee","modified":1562996588582},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1562996588620},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1563172345967},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1562996588621},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1562996588624},{"_id":"themes/hexo-theme-next/source/css/_custom/styles.styl","hash":"d5c328bda569d50f3cfa71fb0cc88cf91efc66d4","modified":1563172346902},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"d2c1b0ae2dedaa9d4aff9bfa5d566efd99acb043","modified":1562996588645},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1562996588645},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1562996588650},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1562996588651},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1562996588651},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1562996588651},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1562996588652},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1562996588675},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1562996588676},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1562996588677},{"_id":"themes/hexo-theme-next/source/lib/lazyload/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1563788781642},{"_id":"themes/hexo-theme-next/source/lib/lazyload/README.md","hash":"05cd553b250a4a85ab9d724a24e8a75b66d00dc8","modified":1563788781642},{"_id":"themes/hexo-theme-next/source/lib/lazyload/lozad.min.js","hash":"53526b1d4201309c96e972ca462c272ecd0f1d77","modified":1563788781650},{"_id":"themes/hexo-theme-next/source/lib/lazyload/lozad.js","hash":"1bde373c01e1bbc414423d90df336822197974de","modified":1563788781643},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1563244123199},{"_id":"themes/hexo-theme-next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1563244123198},{"_id":"themes/hexo-theme-next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1563244123198},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1563244123199},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1563244123201},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1563244123202},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1563244123200},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1563244123203},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1563244123200},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1563244123202},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1563244123201},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1563244123203},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1563244123203},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1563244123204},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1563244123204},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1563244123205},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1563244123206},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1563244123205},{"_id":"source/img/adsense/adsense_adstxt_1.png","hash":"d65166dd644457e7f845b866d10a1919895790f8","modified":1564218827559},{"_id":"source/img/adsense/adsense_man_4.png","hash":"626b5d726aa8503bfc830d5a2e3deee0215de2f6","modified":1564227777195},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1562996588663},{"_id":"source/img/adsense/adsense_man_10.png","hash":"604b7f052db0c561b8026767d95f778ef2201722","modified":1564226290768},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1562996588088},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"ccfedd8c37f8f75da997a453d21d2cdfedbc04ee","modified":1562996588091},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1562996588502},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1562996588502},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1562996588503},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1562996588505},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1562996588508},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1562996588525},{"_id":"themes/hexo-theme-next/source/css/_common/components/rainbow.styl","hash":"4741d642f9ed2eec9be23112f7a51645e77e41f3","modified":1562996588533},{"_id":"themes/hexo-theme-next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1562996588536},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1562996588573},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1562996588573},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1562996588574},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"773f6d791f938ff037783004369092991d7bcd31","modified":1562996588576},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1562996588576},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1562996588576},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1562996588577},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"1489ff40ce5f9fee81a7b4aa5ef56a864a481a63","modified":1562996588583},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1562996588584},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1562996588585},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1562996588585},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1562996588589},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"213f2178dc260a28cba4fef723827a6e707f91a3","modified":1562996588592},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1562996588604},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"3948894201e6229a66bcf490e451f2481c8a99cb","modified":1562996588605},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1562996588611},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1562996588611},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1562996588611},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1562996588612},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"dfd7a9cf39a2135de4cf2f8651cac3fb333d028f","modified":1562996588614},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1562996588616},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1562996588618},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"2f782305b1e1d19197a90f1e5e9167fd77749a8e","modified":1562996588618},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44d834c231e2bb57851954d73e70f6995b5929e7","modified":1562996588619},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"6f427a43550f7b03c503106767fbcce1f18a4f78","modified":1562996588619},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1562996588619},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1562996588652},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1562996588653},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1562996588654},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1563788779621},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1563788781628},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/config","hash":"81241d3fb01195261367cd30a2a5b26c485c9551","modified":1563788781633},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/packed-refs","hash":"cfe12170291a597a42f8d243ec5d98328e9c564a","modified":1563788781624},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1563244123178},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/index","hash":"e3e982c6b594e68c613e7b886a4df91e1f7b0940","modified":1563788781651},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/config","hash":"46d590e05dc25560a69d5cc71b337adad9654443","modified":1563244123183},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1563244120228},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/packed-refs","hash":"af57663f760da0cd490acf8751934e585d5c11c8","modified":1563244123172},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/index","hash":"687809f3b3f1b0b86a1f271dd39421a1de89df0a","modified":1563244123206},{"_id":"themes/hexo-theme-next/source/lib/pace/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1563244123197},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1563788781641},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-528bf3dba101d9b8ce3a1ad976c426d16d084abc.idx","hash":"671d41df403c8dac85f9e8a45bf027eb7a19ce43","modified":1562996588055},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1562996588658},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1562996588659},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1562996588668},{"_id":"source/img/adsense/adsense_home.png","hash":"f7f7feac062ce198c13dd6e7ddc00bcf541552fc","modified":1563418603368},{"_id":"source/img/c-cda2.png","hash":"b9dc4cada91a2f2ad8c0088f54877622630b4936","modified":1548916110036},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1562996588509},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1562996588510},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1562996588511},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1562996588511},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1562996588512},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1562996588513},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/copy-code.styl","hash":"d132dcdce4928131a78f971f450243080e81e520","modified":1562996588514},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1562996588513},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1562996588515},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"41295e16da457eb5073ba74f988889e711e5a2e6","modified":1562996588515},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1562996588519},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1562996588516},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"f2469ecf57eeb32f5ad0a26c7358e521383ac935","modified":1562996588520},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"ccfedd8c37f8f75da997a453d21d2cdfedbc04ee","modified":1562996588087},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"e3124da5350d6c01f32ccd04134a686baa4fb30a","modified":1562996588520},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1562996588521},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1562996588521},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"9df791fa842b16ae72ad2998ffc2f87fdf0b6a88","modified":1562996588521},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1562996588524},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1562996588525},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"8bffc9f7f4b20860a56160f0d1ba77062106f990","modified":1562996588525},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1562996588526},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1562996588526},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"df3c19fd447da6d4a807683345007a41338f9a04","modified":1562996588527},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1562996588527},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"67165cd8836e03c289162b96ef06f8b024afe9af","modified":1562996588528},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1562996588528},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1562996588528},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1562996588529},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1562996588530},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1562996588531},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1562996588531},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1562996588532},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1562996588532},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"9c60fd1c4d221b968a5b1129f41e6d62adac1730","modified":1562996588533},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"3d55c8641a69449de7caf1ea2cf731973481daf5","modified":1562996588536},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1562996588536},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1562996588537},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1562996588538},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"987f1cdd57dd9f6f81c133c280c20d7168c37d7f","modified":1562996588538},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1562996588539},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1562996588540},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"4a655ce8217e038b4b9df2265555feae9ccd6242","modified":1562996588541},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"38314eec8f4a2d1667e1061d7a3deb1c16f17da9","modified":1562996588541},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1562996588542},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1562996588542},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1562996588543},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"c85df3ecc0b37095cac14114c308e5829c66b5a3","modified":1562996588543},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"ca7cd57bc346a3fda8097b2b49e6d943600912d2","modified":1562996588544},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1562996588545},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4b62818333d2463fe416fb3156ced12e7d60aafa","modified":1562996588545},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1562996588545},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1562996588567},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"1156b11ac74d2d21b1b5047767b2a9edafc9182d","modified":1562996588568},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1562996588568},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1562996588571},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1562996588571},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1562996588571},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"616f4820306dc0b6346cda3d2094a0af5ade4fba","modified":1562996588572},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1562996588606},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/_sidebar.styl","hash":"487dbb5b389620e7be2ce666531a7baa249d50a0","modified":1562996588615},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1562996588616},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1562996588657},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1562996588544},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1563788779625},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1563788779641},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1563788779637},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1563788779653},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1563788779634},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1563788779656},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1563788779631},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1563788779660},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1563788779646},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1563788779664},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1563788779649},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1563788779617},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1563244120233},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1563244120243},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1563244120248},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1563244120259},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1563244120263},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1563244120236},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1563244120256},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1563244120251},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1563244120270},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1563244120267},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1563244120224},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/logs/HEAD","hash":"cf5fe23f003d2800db578cd67abfddd02407f47e","modified":1563244123181},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/logs/HEAD","hash":"b74dd853ddfe11f0e5d82771e6f62e82cc36d782","modified":1563788781631},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1563244120240},{"_id":"source/img/adsense/adsense_accept.png","hash":"4957f48e3bb51daadbcb94ec67904bc0a5860f2c","modified":1564218808584},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/refs/heads/master","hash":"d936b34d1541268b9e9051f69f8e65ed3cd59f74","modified":1563788781631},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1563788781598},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1563788781594},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/objects/5f/0b9c5a78f6741c33571eca93bacd62dc7bc282","hash":"ae5d2268b0e3bb571e33fdc1a542bbf45efb33a4","modified":1563788781595},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/objects/48/e2eddd8d775074b2492d307c3242de5dd5f293","hash":"f5eecc13e76dee1c0969aa07f930e0e11f432ff5","modified":1563788781604},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/objects/48/66f625954255e4c8c26e815d1f0164193674e0","hash":"bbdb07468975dbedee40339eb63011156a98ec87","modified":1563788781592},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/objects/8e/9bda42aa252d42886f600e8d54fa7b107fc891","hash":"61b41d3e23e0d8a46be2da189b11fec91a1c301c","modified":1563788781607},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1563788781599},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/objects/5d/c2c51f8658f41fe25cd595f58995cb058ebc33","hash":"2de7a31e1b306169269562bfacc8f0f2d49ea577","modified":1563788781605},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/objects/9a/8d179be5a099c731be6084ceba24928e4574e2","hash":"68465547c82f0ce95be87b0370f5cd2fac6cb51c","modified":1563788781597},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/objects/f9/cce47fa41d0c0eb98ca498353d5f366d3c63f1","hash":"9c1cf7ddeab7078816e4d83b4ded385db4c15d35","modified":1563788781591},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/objects/cb/5cc9434249607fc442175e3e6c31f3a8cb7a04","hash":"ee1bd67de46a7e6c3a47a1abe0487a2b741d6be4","modified":1563788781601},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1563244123125},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/refs/heads/master","hash":"71e7f94e0b7228ed030f2241150324b5899054f0","modified":1563244123181},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/08/38a9623fabb4014d7ed7c0fa4ff8a5bc5e697e","hash":"aeee9d11c3a4c1dec1ad8414dca14e5aa9ca2b7d","modified":1563244123142},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1563244123138},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1563244123122},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1563244123127},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1563244123137},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1563244123133},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1563244123136},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1563244123121},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1563244123134},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/5f/2920b23993e6476c3edc77f76eba566e74dd7e","hash":"122d8ac05247282340317587435273e6f3c5a188","modified":1563244123146},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/61/fcbe3a99ad371eacdf3a3703883f8e95e072c8","hash":"480b60d684f9a077ade5dda0acfc75bcd9597aff","modified":1563244123120},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/68/54b8cf544e974998061fb08ea2bd96b561ed68","hash":"1aa0706b6495a5ebd70c3822ac3533df41940fb7","modified":1563244123144},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1563244123135},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1563244123140},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1563244123128},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1563244123123},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1563244123130},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1563244123115},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1563244123116},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1563244123125},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/86/ab4cb05d5132451e71dc4ecf6ef663f7404126","hash":"53f157552aa57d405ce6ab58c424bb948c2820d8","modified":1563244123143},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1563244123132},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1563244123131},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1563244123129},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1563244123117},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1563244123139},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/da/79363b808519d44a7eda67d7bc81e1587a06e8","hash":"0dc5dc27991da9a09d705e488bc3f1fe5a4d4728","modified":1563244123113},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1563244123126},{"_id":"source/img/gif/wanko.gif","hash":"b5a38911798dc9ce3bd858f5f401566048c5dbf4","modified":1563784638082},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/logs/refs/heads/master","hash":"cf5fe23f003d2800db578cd67abfddd02407f47e","modified":1563244123181},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/logs/refs/heads/master","hash":"b74dd853ddfe11f0e5d82771e6f62e82cc36d782","modified":1563788781631},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1563788781628},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1563244123177},{"_id":"themes/hexo-theme-next/source/lib/lazyload/.git/logs/refs/remotes/origin/HEAD","hash":"b74dd853ddfe11f0e5d82771e6f62e82cc36d782","modified":1563788781627},{"_id":"themes/hexo-theme-next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"cf5fe23f003d2800db578cd67abfddd02407f47e","modified":1563244123177},{"_id":"source/img/gif/hijiki.gif","hash":"b276efb514bc45184a9fd972a6111dd9aec6a676","modified":1563784664407},{"_id":"source/img/gif/tororo.gif","hash":"d3a4bec80c695e24f2fc844cdb374cefb508fe3e","modified":1563784660966},{"_id":"source/img/gif/koharu.gif","hash":"8485ac75ec4676284d269f8dcdc45bddadbb5f6d","modified":1563784650060},{"_id":"source/img/gif/Epsilon2.1.gif","hash":"6d01fa0ecbc2dc4dc94684d5f0f00c6837206453","modified":1563784537089},{"_id":"source/img/gif/tsumiki.gif","hash":"422ca75a1ad9788c56735b7cd3b8bd2b755deee8","modified":1563784633789},{"_id":"source/img/gif/haruto.gif","hash":"ed739c3ccf413d2b8af8cc46ee191eef10adffdb","modified":1563784653632},{"_id":"source/img/gif/ni-j.gif","hash":"c94f419e34d28a0e7e9b91d830050ffd3391a98d","modified":1563784609417},{"_id":"source/img/gif/nito.gif","hash":"a46ed7dc985168dc55c05537877ca32deeaac382","modified":1563784626444},{"_id":"source/img/gif/z16.gif","hash":"1effb55b48a8531348e083d2c501a193940f4334","modified":1563784642240},{"_id":"source/img/gif/haru.gif","hash":"f7d81d74d1bad0a747e887f99a53712d30325d30","modified":1563784589860},{"_id":"source/img/gif/Unitychan.gif","hash":"4295b1714e5a08e9dfa1c6d7a480a75ecc7e46fe","modified":1563784657687},{"_id":"source/img/gif/nico.gif","hash":"793d1619884ba8300d956bbd71f7f9db70505513","modified":1563784613706},{"_id":"source/img/gif/gf.gif","hash":"9c69e5fb6ce6ba41cc374eaf1cc36c2d95444296","modified":1563784555611},{"_id":"source/img/gif/nipsilon.gif","hash":"50abaf18f0a03bc93c6aabadc8be73c9e2976b71","modified":1563784622228},{"_id":"source/img/gif/shizuku.gif","hash":"a744acb89dc1a282af819e0fcbbbe8a782f8f116","modified":1563784630188},{"_id":"source/img/gif/hibiki.gif","hash":"a2b5f7016155736bbaafa9715a47eaa4924e5057","modified":1563784646503},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-528bf3dba101d9b8ce3a1ad976c426d16d084abc.pack","hash":"ce30e6200f763e504d09c66363cd7da30a5c9e76","modified":1562996588050},{"_id":"source/img/gif/nietzche.gif","hash":"198ae4cd1a4cd24c7b8f9e86498bc9ccb45264ae","modified":1563784618139},{"_id":"source/img/gif/miku.gif","hash":"162ec4475f47e728ee85d929460f5b59bf1953d2","modified":1563784595355},{"_id":"public/rss2.xml","hash":"7a76b7e4ce6015c3e73835f2138da9f9ed6854bd","modified":1564550690823},{"_id":"public/post-sitemap.xml","hash":"8e1baad963bef07e86dd470c94adeed3f741d542","modified":1564550691638},{"_id":"public/page-sitemap.xml","hash":"7672006020d519d275887451400c46d2f2374bf2","modified":1564478124330},{"_id":"public/tag-sitemap.xml","hash":"e21f4c4b207178d01a32881f0e96f7e239840668","modified":1564550691641},{"_id":"public/sitemap.xml","hash":"62ea73faf72c6c65b46f26e3b7bd5a2e30556d19","modified":1564550691679},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1564478124376},{"_id":"public/robots.txt","hash":"65990256b6ebe0149d8edfcae37274b6af3e42ae","modified":1564478124531},{"_id":"public/categories/BLOG/MARKDOWN/index.html","hash":"e3cc6ba97c4700288ac513409aefe3f39dbaa637","modified":1564478124548},{"_id":"public/tags/markup/index.html","hash":"f06f15591047f98eed53f0ca2b25a52a57b33fc2","modified":1564478124548},{"_id":"public/tags/markdown/index.html","hash":"faeeed303c7720a1830be3def6df54dbcf4eb63a","modified":1564478124548},{"_id":"public/tags/spring/index.html","hash":"b62d314cf754db94ef861a164b09a6cbc47e4488","modified":1564478124548},{"_id":"public/tags/스프링/index.html","hash":"6ac3bca7f9ffa7edc0c751be692fde07d276485d","modified":1564478124549},{"_id":"public/tags/FRAMEWORK/index.html","hash":"7928ebbed6f8fa7a11b32f74a3492cbe08635ed0","modified":1564478124549},{"_id":"public/tags/MODULES/index.html","hash":"76e183178072f6795f2a287e6403327aafc1d375","modified":1564478124549},{"_id":"public/tags/POJO/index.html","hash":"848f82f8ebaf1adbf68e9d111577774e0699569e","modified":1564478124549},{"_id":"public/tags/운영체제/index.html","hash":"6be729dbdf914595e111da1f687cd2c804af325a","modified":1564478124549},{"_id":"public/tags/운영체/index.html","hash":"3f9e769f4e8b72296f436c8d19ded72c644a7c50","modified":1564478124549},{"_id":"public/tags/functions/index.html","hash":"9b6d8667d2c881704be61c68269333dc4557086c","modified":1564478124549},{"_id":"public/tags/SEO/index.html","hash":"6770cec53734eaadc9055a029f03b19b6b77717b","modified":1564478124549},{"_id":"public/tags/live2D/index.html","hash":"8a7a924e8a37fe77a37daece1e1d492f8aef6f9e","modified":1564478124549},{"_id":"public/tags/움직이는/index.html","hash":"9d068a890e34fb7e39815be7e68cf48a329c6745","modified":1564478124549},{"_id":"public/tags/배경/index.html","hash":"2f896c1cd4123ee7adb694f4571a65445a0974e4","modified":1564478124549},{"_id":"public/tags/loops/index.html","hash":"e26fc630e5413cc27b9470d4329bfcdd09c99f12","modified":1564478124550},{"_id":"public/tags/list-comprehensions/index.html","hash":"2c2ba819f60ba6ead3e28791487610deb0576898","modified":1564478124550},{"_id":"public/tags/strings/index.html","hash":"335df5f81f19ef7ee282f2193bc35b6b0fb9106a","modified":1564478124550},{"_id":"public/tags/dictionaries/index.html","hash":"279983c1f57d96f4ce6bff91ccda1b43b6c0fe08","modified":1564478124550},{"_id":"public/about/index.html","hash":"c8ad65ba42fffb7fc1f20a07f78f6125c5032906","modified":1564478124550},{"_id":"public/categories/index.html","hash":"3ea982b373af7cf7a28030b46ac993bee6fee673","modified":1564478124550},{"_id":"public/tags/index.html","hash":"10592220fd5afda23597ed1faf6f31ba3f31bf14","modified":1564478124550},{"_id":"public/2019/07/29/sw-6325/index.html","hash":"8eecff5d7d71e652f82fadaccb652766f441d815","modified":1564478124550},{"_id":"public/2019/07/29/sw-6319/index.html","hash":"fb1b2950a504aaa2090243876d66904b0715bf4c","modified":1564478124550},{"_id":"public/2019/07/28/sw-6249/index.html","hash":"22671229fec7d1bd0932f5fde1a6179b385841c5","modified":1564478124550},{"_id":"public/2019/07/28/sw-6242/index.html","hash":"e4c178408235651358c265b4181c352c563ba309","modified":1564478124550},{"_id":"public/2019/07/28/sw-6230/index.html","hash":"0f1c663a53a88d270e1c970a299a4a3ef552a9e5","modified":1564478124550},{"_id":"public/2019/07/28/sw-6222/index.html","hash":"2bf2d2ff24d9ba8bc1e0228d45c22aac07c6b1dc","modified":1564478124550},{"_id":"public/2019/07/28/sw-6204/index.html","hash":"117454d016f690c22d4418922102fe6dca7cdd57","modified":1564478124550},{"_id":"public/2019/07/28/sw-6218/index.html","hash":"00d22c38c0fabac9e3a597f7b798cf9ee50e0e89","modified":1564478124550},{"_id":"public/2019/07/28/sw-6196/index.html","hash":"d160ed48160b06a7eee34376fe10f3e0b3b7698b","modified":1564478124551},{"_id":"public/2019/07/27/hexo-adsense-2/index.html","hash":"389a2fea5b7d12b42aadf375da9a1ee0bef2abef","modified":1564478124551},{"_id":"public/2019/07/26/06-strings-and-dictionaries/index.html","hash":"c7bcf92b952390c043450f65a8ff0951c6b203f0","modified":1564550691689},{"_id":"public/2019/07/25/05-loops-and-list-comprehensions/index.html","hash":"8d623fe453c82eacd24f1f45c2ff9b61ef4d94a1","modified":1564478124551},{"_id":"public/2019/07/22/hexo-live2d/index.html","hash":"0b49d82f4644dd881c308ea8a638824cd0868b17","modified":1564478124551},{"_id":"public/2019/07/22/04-lists/index.html","hash":"f190171be7e56a23ff2c3555573fa09ecbe5a436","modified":1564478124551},{"_id":"public/2019/07/17/hexo-adsense-1/index.html","hash":"cee4c8be05922899e71fd1ddd226752b21984f5c","modified":1564478124551},{"_id":"public/2019/07/17/hexo-seo/index.html","hash":"98b6c17fe6ec836dfc8d2f7dd480d6d659a6b89e","modified":1564478124551},{"_id":"public/2019/07/17/03-booleans-and-conditionals/index.html","hash":"e0e55759d8851edb01b02fa3dd94abe6b90d37b5","modified":1564478124551},{"_id":"public/2019/07/15/02-functions-and-getting-help/index.html","hash":"c7563d5dd7d57d24d610b8eb1e7d8cd30ebebae4","modified":1564478124551},{"_id":"public/2019/07/13/blog-migration/index.html","hash":"5a04b6ad143299a9e37a27eb6a6935cbeebda409","modified":1564478124551},{"_id":"public/2019/07/12/01-hello-python/index.html","hash":"58bae3c0ae7f4c8c72abd4b60c808357c08bb4e2","modified":1564478124551},{"_id":"public/2019/02/12/os-overview-2/index.html","hash":"6037af768cb9601718381faa2e3f281697b3b879","modified":1564478124552},{"_id":"public/2019/02/11/spring-IoC/index.html","hash":"f133c24058ad20ac91369ac05afbc76499e1292d","modified":1564478124552},{"_id":"public/2019/02/05/os-overview/index.html","hash":"18188df7f8c321fceaae47573b86fc1a6f952221","modified":1564478124552},{"_id":"public/2019/02/04/spring-pojo/index.html","hash":"ec0beae5f9c51523f91dd7ed17410a839c0c70c0","modified":1564478124552},{"_id":"public/2019/02/02/spring-keywords/index.html","hash":"810ef1091f067d9af65448a7aa11deeb9f9bd32c","modified":1564478124552},{"_id":"public/2019/01/31/spring-module/index.html","hash":"c84b1fffca84c56c57d59c8ad7bc5b44561240fb","modified":1564478124552},{"_id":"public/2019/01/28/cda-tutorial-1/index.html","hash":"d1ada3799f2032d0142d604564c3bc950b3e3847","modified":1564478124552},{"_id":"public/2019/01/22/spring/index.html","hash":"098642ec26d2421eb9622cece7f159c4f03474a5","modified":1564478124552},{"_id":"public/2019/01/19/cda-tutorial/index.html","hash":"6779d4cb103c1764eae08f924e280e999f16f884","modified":1564478124552},{"_id":"public/2019/01/17/markdown-basic/index.html","hash":"9be0b33e7300c83903d8d2c364796f31716d20be","modified":1564478124552},{"_id":"public/categories/BLOG/index.html","hash":"04d3f7180983e6efb0e413d4e6d1cd9b08f6295d","modified":1564478124553},{"_id":"public/categories/WEB/index.html","hash":"fda2f19fd034fcaac96a67b11ccb539fc658baf8","modified":1564478124553},{"_id":"public/categories/IHIS/index.html","hash":"949be6fb40031daf92b23bc9e2c727484fdb3942","modified":1564478124553},{"_id":"public/categories/WEB/SPRING/index.html","hash":"79427aec6a6a3cf62017e8f73884f671795e94af","modified":1564478124553},{"_id":"public/categories/IHIS/HL7/index.html","hash":"34049730a704b379508de99064853d48790264a4","modified":1564478124553},{"_id":"public/categories/OS/index.html","hash":"cc9a1d8c8fdda5d1120ad59a95fb1e9be43e1903","modified":1564478124553},{"_id":"public/categories/LANGUAGE/index.html","hash":"d2f8b6a6afc686e5c664b4b744bb1a45d2c7eedb","modified":1564478124553},{"_id":"public/categories/BLOG/HEXO-NEXT-THEME/index.html","hash":"8676d87eba8dc585a79a7794c80ddd995fe1ebb1","modified":1564478124553},{"_id":"public/categories/LANGUAGE/PYTHON/index.html","hash":"30ecb312907a2f39d54a7b6c0a738696272cefa2","modified":1564478124553},{"_id":"public/categories/SW-아카데미/index.html","hash":"71833c58d067501f3f2b461081fddd7c91253bfe","modified":1564478124553},{"_id":"public/archives/index.html","hash":"a7e84a1cc54cf882310009621608495426b30544","modified":1564478124553},{"_id":"public/archives/page/2/index.html","hash":"c3d38bf8ad882a5318ab370ef133c6c5c56ecd65","modified":1564478124554},{"_id":"public/archives/2019/index.html","hash":"54f7a4ae25678789ef256e0db1beae24fc105143","modified":1564478124554},{"_id":"public/archives/2019/page/2/index.html","hash":"c6a2b74e7a7f8444328a98e6c00bf738e57a1d02","modified":1564478124554},{"_id":"public/archives/2019/01/index.html","hash":"7a5fe29b4036eb52031e7cae05214978a64e7a73","modified":1564478124554},{"_id":"public/archives/2019/02/index.html","hash":"118c1950dcc4dfe85c46ba61c87d385efe24b88c","modified":1564478124554},{"_id":"public/archives/2019/07/index.html","hash":"db95b51dd8a1f9ac140afd600b911eee08ffdaaf","modified":1564478124554},{"_id":"public/index.html","hash":"5f6e99fe76c340cff7b0a8c7c54a211f6650f938","modified":1564478124554},{"_id":"public/page/2/index.html","hash":"17eef75b70c93229b3cd5d95774e0627952aec08","modified":1564478124554},{"_id":"public/page/3/index.html","hash":"56426faf86268920cad9028dc55edab2810c5ed6","modified":1564478124554},{"_id":"public/page/4/index.html","hash":"9f1fa791a96c9a313051452075905a593a898228","modified":1564478124554},{"_id":"public/page/5/index.html","hash":"ddbe47c9803f8534c079d5c6ad4d6ec10396c692","modified":1564550691689},{"_id":"public/page/6/index.html","hash":"638933809d48c8f4d124bccdba59333eceb228d6","modified":1564478124554},{"_id":"public/page/7/index.html","hash":"7738ec948a5ba7cf9122b32ee38bb5b4af784188","modified":1564478124554},{"_id":"public/page/8/index.html","hash":"b80aff075ebb28635733943dc6f3fedfbcf83816","modified":1564478124555},{"_id":"public/page/9/index.html","hash":"e89744c63d04d763c1294a4c0e58dd530d23fb26","modified":1564478124555},{"_id":"public/page/10/index.html","hash":"4b3aef943fe9859d34770c6b2a70d4f8e1979648","modified":1564478124555},{"_id":"public/tags/hexo/index.html","hash":"055820c2f19b7b1665c0dbd98caa86588b8d7db4","modified":1564478124555},{"_id":"public/tags/헥소/index.html","hash":"69f22ef142f83bf380da532ddfafa086372220d3","modified":1564478124555},{"_id":"public/tags/HL7/index.html","hash":"bda03598f5cc7589e9ff79360fabd06d03964e01","modified":1564478124555},{"_id":"public/tags/CDA/index.html","hash":"343dd7fb6381d28522d5fa62980bf36f02bb505b","modified":1564478124555},{"_id":"public/tags/SPRING/index.html","hash":"707b851e3cad73eaf19d9b12b1c65cd39cd59153","modified":1564478124555},{"_id":"public/tags/OS/index.html","hash":"88338a98f1b957603c634d7cb507ec920ec10a9b","modified":1564478124555},{"_id":"public/tags/파이썬/index.html","hash":"1a3abfca2a24dc9b58b454c0771048416dff5da6","modified":1564478124555},{"_id":"public/tags/캐글/index.html","hash":"2b19d7c86b75468dcb3c5c2a4595239d1082cca3","modified":1564478124555},{"_id":"public/tags/튜토리얼/index.html","hash":"134dee5071e6e9a249754cdc3c322b71b9de1536","modified":1564478124555},{"_id":"public/tags/kaggle/index.html","hash":"69924a75c7907011660972780291343861e7b501","modified":1564478124556},{"_id":"public/tags/programming-language/index.html","hash":"9753f9220adeca46e982dc8496652fc938374b3e","modified":1564478124556},{"_id":"public/tags/language/index.html","hash":"37dcf1d4c3c59aafa61323a2a7e976777221b5db","modified":1564478124556},{"_id":"public/tags/python/index.html","hash":"aacf10382baf06927a19079afb1c2d45ee39e3c3","modified":1564478124556},{"_id":"public/tags/tutorial/index.html","hash":"926ba38d31d3ae894802d9e6980b3984349c9227","modified":1564478124556},{"_id":"public/tags/블로그/index.html","hash":"52fe3bd2b111d1e80de30f0610b6c7ebf0f1205d","modified":1564478124556},{"_id":"public/tags/테마/index.html","hash":"6744e5dcc5d14f5da2bc6816f43523b3bf750350","modified":1564478124556},{"_id":"public/tags/adsense/index.html","hash":"7fcafbacf17e8aa30f76b41e508b89c9c131b22e","modified":1564478124556},{"_id":"public/tags/blog/index.html","hash":"4470a00e9e977cdc85fcbbf528789fe7aa2d99d5","modified":1564478124556},{"_id":"public/tags/next-theme/index.html","hash":"a199c0d51b2640d7460200ff7d908d80c5894c4d","modified":1564478124556},{"_id":"public/tags/github-page/index.html","hash":"e28d64e5077d6f570ee3d7a41a4e84bbc63356ac","modified":1564478124556},{"_id":"public/tags/booleans/index.html","hash":"e1cb3ce1ea1bab3901712cffc4762b3c41131be6","modified":1564478124556},{"_id":"public/tags/conditionals/index.html","hash":"19c539d55c25e9793458f5c058ba6795020a1fb4","modified":1564478124557},{"_id":"public/tags/삼성/index.html","hash":"8d1b12fad7b1f365ab094b4fcc61fb009ca2066d","modified":1564478124557},{"_id":"public/tags/SW-Academy/index.html","hash":"8ef419d962c7e9dc554b8423f8469c8cf27a1ad8","modified":1564478124557},{"_id":"public/2019/07/30/sw-6315/index.html","hash":"285765c8fe82ebb9ecc6e9575cf95d63c9b164b8","modified":1564478124701},{"_id":"public/2019/07/30/sw-6308/index.html","hash":"254afe2d48e27ed9c34adfe52ad31dc3424cacb5","modified":1564478124717},{"_id":"public/archives/2019/07/page/2/index.html","hash":"4c212d56e88163daa8f488ad49598e93c7a640f9","modified":1564478124721},{"_id":"public/page/11/index.html","hash":"f8d4e127a40d87cb959370c6081d30db3d3776df","modified":1564478124722},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1564478124722},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1564478124722},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1564478124722},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1564478124722},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1564478124722},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1564478124722},{"_id":"public/live2dw/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1564478124722},{"_id":"public/live2dw/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1564478124723},{"_id":"public/live2dw/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1564478124723},{"_id":"public/live2dw/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1564478124723},{"_id":"public/live2dw/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1564478124723},{"_id":"public/live2dw/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1564478124723},{"_id":"public/live2dw/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1564478124723},{"_id":"public/css/spoiler.css","hash":"78428e2fd20142332b1154eb2bde0247226b264a","modified":1564478124723},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1564478124723},{"_id":"public/js/spoiler.js","hash":"bbcbcbb9e77933929819ad65345955df6d22246a","modified":1564478124723},{"_id":"public/live2dw/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1564478124727},{"_id":"public/live2dw/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1564478124727},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1564478124727},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1564478124734},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1564478124767}],"Category":[{"name":"STUDY","_id":"cjyplt7po00022646r7g8mpcy"},{"name":"BLOG","_id":"cjyplt7py00072646nz3p0rbh"},{"name":"컴퓨터망","parent":"cjyplt7po00022646r7g8mpcy","_id":"cjyplt7qc000f2646gma2ix6u"},{"name":"WEB","_id":"cjyplt7qf000h2646zma91p04"},{"name":"IHIS","_id":"cjyplt7qg000k26469mwif74e"},{"name":"HEXO","parent":"cjyplt7py00072646nz3p0rbh","_id":"cjyplt7qh000n2646lndrsbby"},{"name":"MARKDOWN","parent":"cjyplt7py00072646nz3p0rbh","_id":"cjyplt7qj000v2646g2q4tdut"},{"name":"SPRING","parent":"cjyplt7qf000h2646zma91p04","_id":"cjyplt7qk00102646vxn7p7s5"},{"name":"HL7","parent":"cjyplt7qg000k26469mwif74e","_id":"cjyplt7ql00142646merla4ey"},{"name":"OS","_id":"cjyplt85n001z2646jtpyjxh6"},{"name":"LANGUAGE","_id":"cjyplt86n002e26460n3ii7bv"},{"name":"HEXO-NEXT-THEME","parent":"cjyplt7py00072646nz3p0rbh","_id":"cjyplt875002s26461uok18x2"},{"name":"PYTHON","parent":"cjyplt86n002e26460n3ii7bv","_id":"cjyplt881003a2646aqvg3zey"},{"name":"SW 아카데미","_id":"cjyplt88b003m2646d87dqus0"}],"Data":[],"Page":[{"title":"about","date":"2019-07-13T07:33:59.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-13 16:33:59\n---\n","updated":"2019-07-13T07:33:59.196Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjyplt84f001o2646d1y6rk5k","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-13T07:33:23.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-13 16:33:23\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-07-14T10:08:47.638Z","path":"categories/index.html","layout":"page","_id":"cjyplt84k001q264695nch27g","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-07-13T07:33:23.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-13 16:33:23\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-07-14T10:08:48.559Z","path":"tags/index.html","layout":"page","_id":"cjyplt84s001t26460kqjgkfu","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"데이터망 - 데이터통신 개요","author":{"nick":"TAEJIN","link":null},"date":"2019-03-07T07:02:57.000Z","subtitle":"수업소개, 개요","cover":"https://telco.co.zw/wp-content/uploads/2018/07/networking.jpg","_content":"\n> 김재수 교수님, 컴퓨터망(Data Communications and Networking) 수업 내용\n> 수업 복습 겸 ppt 내용 정리\n\n### 수업 목표\n\n- 데이터 통신과 컴퓨터 통신에 대한 기본 원리 및 구조, 표준을 이해\n- 컴퓨터 네트워크와 관련된 기술과 개념을 이해\n\n> 교수님 曰 : Data transmission(communication) 에서 제일 중요한 것은 protocol 이다!\n\n\n\n# <span style=\"color:blue\">Chapter 1</span> Introduction(개요)\n\n\n## 1.1 데이터 통신\n\n**데이터 통신(Data communication)** 은 전선과 같은 통신 매체를 통하여 두 장치간에 데이터를 교환하는 것\n데이터(data) : 데이터를 만들어 사용하는 사용자 간에 합의된 형태로 표현된 정보\n\n​      **기본 특성**\n\n- delivery - 올바른 목적지, 원하는 장치나 사용자에게 전달\n- accuracy - 요류, 손실 없이 정확하게 데이터를 전달\n- timeliness - 적정 시간 내에 데이터를 전달\n- jitter(파형 난조) - 패킷의 도착 시간이 서로 차이가 나서 품질(quality)이 일정치 못함\n\n> DATJi(닷지)...???ㅋㅋ\n\n\n\n### 1.1.1 데이터 통신 구성 요소\n\n<img align=\"middle\" src=\"http://www.myreadingroom.co.in/images/stories/docs/dcn/Components%20of%20Data%20Communication.jpg\">\n\n**5개의 구성 요소** 가 있다\n\n- <span style=\"color:green\">메세지(Message)</span>\n  -- 통신의 대상이 되는 정보(데이터)\n  ex) text, number, image, audio, video\n- <span style=\"color:green\">송신자(Sender)</span>\n  -- 데이터 메시지를 보내는 장치\n   ex) computer, telephone, camera\n- <span style=\"color:green\">수신자(Receiver)</span>\n  -- 메시지를 받는 장치\n   ex) computer, telephone, television\n- <span style=\"color:green\">전송매체(Medium)</span>\n  -- sender부터 receiver까지 이동하는 물리적인 경로\n   ex) twisted pair wire, coaxial cable, fiber-optic cable, laser, wireless wave\n- <span style=\"color:green\">프로토콜(Protocol)</span>\n  -- 통신하는 기기간의 약속(통신 규약)\n\n\n\n### 1.1.2 데이터 표현\n\n- Text \t\t-> Bit Pattern\n- Number \t-> Bit Pattern\n- Image \t\t-> Pixel, Resolution\n- Audio \t\t-> 연속 신호\n- Video \t\t-> 연속적인 개체 또는 여러 화상의 조합\n\n\n\n### 1.1.3 데이터 흐름 방향\n\n<img align=\"center\" src=\"http://www.opentextbooks.org.hk/system/files/resource/10/10132/10137/media/ct332_01.gif\">\n\na. <span style=\"color:blue\">Simplex</span>\n\n- 한쪽 방향으로만 통신 가능\n- <span style=\"color:red\"> Keyboard, Monitor, Radio, TV</span>\n\nb. <span style=\"color:blue\">Half-duplex</span>\n\n- 양 방향 송신 가능하지만 **동시에** 송신 불가\n- <span style=\"color:red\"> Walkie-talkie(무전기)</span>\n\nc. <span style=\"color:blue\">Full-duplex</span>\n\n- 양 방향 송/수신 가능(2차선 도로와 같음)\n- <span style=\"color:red\">Telephone, Internet</span>\n\n------\n\n\n\n## 1.2 네트워크\n\n**통신 링크에 서로 연결된 장치(Node)의 모임**\nThe interconnection of a set of devices capable of communication\n\n\n\n### 1.2.1 ~~네트워크 성능 평가~~\n\n생략\n\n\n\n### 1.2.2 물리적 구조(Physical Structures) : 연결 방식\n\n<img align=\"center\" src=\"https://systemzone.net/wp-content/uploads/2017/09/network-topology.png\">\n\n**Physical Topology** : 네트워크가 물리적으로 어떻게 구성 되었는가\n(하이브리드 토폴로지 같은 것은 제외하고 기본적인 종류만 다룬다)\n\n- Point-to-point\t- 기본적인 연결\n- Multipoint\t\t- tree와 같은 것 아닐까??\n- <span style=\"color:red\">Mesh</span>\n- <span style=\"color:red\">Star</span>\n- <span style=\"color:red\">Bus</span>\n- <span style=\"color:red\">Ring</span>\n\n\n\n## 1.3 네트워크 유형\n\n<img align=\"center\" src=\"https://www.researchgate.net/profile/Viet_Hung_Nguyen3/publication/225349001/figure/fig1/AS:302593634648075@1449155352384/Global-view-of-metropolitan-area-network.png\">\n\n-  <span style=\"color:blue\">Local-area Network</span> **LAN**\n  개인(기관)이 소유함 : Office, Building, Campus\n  단순히 2개만 연결하는 것에서 부터, 여러 대 까지 확장이 가능\n  각각의 host는 **identifier와 address**를 가지고 있다\n  과거에는 bus type으로 구성했다면, 현대에는 switch를 사용해서 star type으로 구성한다!\n\n\n\n-  <span style=\"color:blue\">Metropolitan-area Network</span> **MAN**\n  우리나라에 해당 없으니 생략\n\n\n\n-  <span style=\"color:blue\">Wide-area Network</span> **WAN**\n  아주 넓은 지역의 네트워크 : town, state, country, the world\n  communicational organization이 소유\n  Point-to-point WAN, Switched WAN\n\n\n\n### 1.3.3 스위칭(Switching)\n\n**2개 이상의 입력 단자와 출력 단자를 연결시켜 주는 기능**\n\n<img src=\"https://www.thecrazyprogrammer.com/wp-content/uploads/2018/01/Difference-between-Circuit-Switching-and-Packet-Switching.gif\">\n\n- <span style=\"color:red\">회선교환망(Circuit Switched Network)</span> - 음성 전화\n  dedicated connection(전용으로 할당) 을 circuit 이라고 한다\n  과거에는 *Telephone network* 라고 했다\n\n  (지금 telephone network는 packet switching의 일부)\n  활성화 비활성화만 할 수 있다\n\n\n\n- <span style=\"color:red\">패킷 교환망(Packet Switched Network)</span> - 인터넷\n  blocks of data 로 이루어진 packets 라고 한다\n  switches fuction의 *storing* 과 *forwarding* 을 사용해서 데이터를 주고 받음\n  즉, 저장했다 보내는 것\n\n\n\n### 1.3.4 인터넷\n\n <span style=\"color: red\">Internet Service Provider(ISP) </span> : LG, KT, SK 같은 인터넷을 제공해 주는 곳\n\n주로 물리적인 연결 방법으로 point-to-point WAN 방식을 사용한다\n\n\n\n## 정리\n\n- Data Communication\n  Components, Data Type, Data Flow\n- Network Topology\n  Mesh, Star, Bus, Ring\n- The Configuration of Internet\n","source":"_drafts/20190307-networking-01.md","raw":"---\ntitle: 데이터망 - 데이터통신 개요\nauthor:\n  nick: TAEJIN\n  link: null\ncategories:\n  - STUDY\n  - 컴퓨터망\ntags:\n  - networking\n  - 컴퓨터망\ndate: 2019-03-07 16:02:57\nsubtitle: 수업소개, 개요\ncover: https://telco.co.zw/wp-content/uploads/2018/07/networking.jpg\n\n---\n\n> 김재수 교수님, 컴퓨터망(Data Communications and Networking) 수업 내용\n> 수업 복습 겸 ppt 내용 정리\n\n### 수업 목표\n\n- 데이터 통신과 컴퓨터 통신에 대한 기본 원리 및 구조, 표준을 이해\n- 컴퓨터 네트워크와 관련된 기술과 개념을 이해\n\n> 교수님 曰 : Data transmission(communication) 에서 제일 중요한 것은 protocol 이다!\n\n\n\n# <span style=\"color:blue\">Chapter 1</span> Introduction(개요)\n\n\n## 1.1 데이터 통신\n\n**데이터 통신(Data communication)** 은 전선과 같은 통신 매체를 통하여 두 장치간에 데이터를 교환하는 것\n데이터(data) : 데이터를 만들어 사용하는 사용자 간에 합의된 형태로 표현된 정보\n\n​      **기본 특성**\n\n- delivery - 올바른 목적지, 원하는 장치나 사용자에게 전달\n- accuracy - 요류, 손실 없이 정확하게 데이터를 전달\n- timeliness - 적정 시간 내에 데이터를 전달\n- jitter(파형 난조) - 패킷의 도착 시간이 서로 차이가 나서 품질(quality)이 일정치 못함\n\n> DATJi(닷지)...???ㅋㅋ\n\n\n\n### 1.1.1 데이터 통신 구성 요소\n\n<img align=\"middle\" src=\"http://www.myreadingroom.co.in/images/stories/docs/dcn/Components%20of%20Data%20Communication.jpg\">\n\n**5개의 구성 요소** 가 있다\n\n- <span style=\"color:green\">메세지(Message)</span>\n  -- 통신의 대상이 되는 정보(데이터)\n  ex) text, number, image, audio, video\n- <span style=\"color:green\">송신자(Sender)</span>\n  -- 데이터 메시지를 보내는 장치\n   ex) computer, telephone, camera\n- <span style=\"color:green\">수신자(Receiver)</span>\n  -- 메시지를 받는 장치\n   ex) computer, telephone, television\n- <span style=\"color:green\">전송매체(Medium)</span>\n  -- sender부터 receiver까지 이동하는 물리적인 경로\n   ex) twisted pair wire, coaxial cable, fiber-optic cable, laser, wireless wave\n- <span style=\"color:green\">프로토콜(Protocol)</span>\n  -- 통신하는 기기간의 약속(통신 규약)\n\n\n\n### 1.1.2 데이터 표현\n\n- Text \t\t-> Bit Pattern\n- Number \t-> Bit Pattern\n- Image \t\t-> Pixel, Resolution\n- Audio \t\t-> 연속 신호\n- Video \t\t-> 연속적인 개체 또는 여러 화상의 조합\n\n\n\n### 1.1.3 데이터 흐름 방향\n\n<img align=\"center\" src=\"http://www.opentextbooks.org.hk/system/files/resource/10/10132/10137/media/ct332_01.gif\">\n\na. <span style=\"color:blue\">Simplex</span>\n\n- 한쪽 방향으로만 통신 가능\n- <span style=\"color:red\"> Keyboard, Monitor, Radio, TV</span>\n\nb. <span style=\"color:blue\">Half-duplex</span>\n\n- 양 방향 송신 가능하지만 **동시에** 송신 불가\n- <span style=\"color:red\"> Walkie-talkie(무전기)</span>\n\nc. <span style=\"color:blue\">Full-duplex</span>\n\n- 양 방향 송/수신 가능(2차선 도로와 같음)\n- <span style=\"color:red\">Telephone, Internet</span>\n\n------\n\n\n\n## 1.2 네트워크\n\n**통신 링크에 서로 연결된 장치(Node)의 모임**\nThe interconnection of a set of devices capable of communication\n\n\n\n### 1.2.1 ~~네트워크 성능 평가~~\n\n생략\n\n\n\n### 1.2.2 물리적 구조(Physical Structures) : 연결 방식\n\n<img align=\"center\" src=\"https://systemzone.net/wp-content/uploads/2017/09/network-topology.png\">\n\n**Physical Topology** : 네트워크가 물리적으로 어떻게 구성 되었는가\n(하이브리드 토폴로지 같은 것은 제외하고 기본적인 종류만 다룬다)\n\n- Point-to-point\t- 기본적인 연결\n- Multipoint\t\t- tree와 같은 것 아닐까??\n- <span style=\"color:red\">Mesh</span>\n- <span style=\"color:red\">Star</span>\n- <span style=\"color:red\">Bus</span>\n- <span style=\"color:red\">Ring</span>\n\n\n\n## 1.3 네트워크 유형\n\n<img align=\"center\" src=\"https://www.researchgate.net/profile/Viet_Hung_Nguyen3/publication/225349001/figure/fig1/AS:302593634648075@1449155352384/Global-view-of-metropolitan-area-network.png\">\n\n-  <span style=\"color:blue\">Local-area Network</span> **LAN**\n  개인(기관)이 소유함 : Office, Building, Campus\n  단순히 2개만 연결하는 것에서 부터, 여러 대 까지 확장이 가능\n  각각의 host는 **identifier와 address**를 가지고 있다\n  과거에는 bus type으로 구성했다면, 현대에는 switch를 사용해서 star type으로 구성한다!\n\n\n\n-  <span style=\"color:blue\">Metropolitan-area Network</span> **MAN**\n  우리나라에 해당 없으니 생략\n\n\n\n-  <span style=\"color:blue\">Wide-area Network</span> **WAN**\n  아주 넓은 지역의 네트워크 : town, state, country, the world\n  communicational organization이 소유\n  Point-to-point WAN, Switched WAN\n\n\n\n### 1.3.3 스위칭(Switching)\n\n**2개 이상의 입력 단자와 출력 단자를 연결시켜 주는 기능**\n\n<img src=\"https://www.thecrazyprogrammer.com/wp-content/uploads/2018/01/Difference-between-Circuit-Switching-and-Packet-Switching.gif\">\n\n- <span style=\"color:red\">회선교환망(Circuit Switched Network)</span> - 음성 전화\n  dedicated connection(전용으로 할당) 을 circuit 이라고 한다\n  과거에는 *Telephone network* 라고 했다\n\n  (지금 telephone network는 packet switching의 일부)\n  활성화 비활성화만 할 수 있다\n\n\n\n- <span style=\"color:red\">패킷 교환망(Packet Switched Network)</span> - 인터넷\n  blocks of data 로 이루어진 packets 라고 한다\n  switches fuction의 *storing* 과 *forwarding* 을 사용해서 데이터를 주고 받음\n  즉, 저장했다 보내는 것\n\n\n\n### 1.3.4 인터넷\n\n <span style=\"color: red\">Internet Service Provider(ISP) </span> : LG, KT, SK 같은 인터넷을 제공해 주는 곳\n\n주로 물리적인 연결 방법으로 point-to-point WAN 방식을 사용한다\n\n\n\n## 정리\n\n- Data Communication\n  Components, Data Type, Data Flow\n- Network Topology\n  Mesh, Star, Bus, Ring\n- The Configuration of Internet\n","slug":"networking-01","published":0,"updated":"2019-07-14T10:17:03.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt7p800002646142myjsf","content":"<blockquote>\n<p>김재수 교수님, 컴퓨터망(Data Communications and Networking) 수업 내용<br>수업 복습 겸 ppt 내용 정리</p>\n</blockquote>\n<h3 id=\"수업-목표\"><a href=\"#수업-목표\" class=\"headerlink\" title=\"수업 목표\"></a>수업 목표</h3><ul>\n<li>데이터 통신과 컴퓨터 통신에 대한 기본 원리 및 구조, 표준을 이해</li>\n<li>컴퓨터 네트워크와 관련된 기술과 개념을 이해</li>\n</ul>\n<blockquote>\n<p>교수님 曰 : Data transmission(communication) 에서 제일 중요한 것은 protocol 이다!</p>\n</blockquote>\n<h1 id=\"Chapter-1-Introduction-개요\"><a href=\"#Chapter-1-Introduction-개요\" class=\"headerlink\" title=\"Chapter 1 Introduction(개요)\"></a><span style=\"color:blue\">Chapter 1</span> Introduction(개요)</h1><h2 id=\"1-1-데이터-통신\"><a href=\"#1-1-데이터-통신\" class=\"headerlink\" title=\"1.1 데이터 통신\"></a>1.1 데이터 통신</h2><p><strong>데이터 통신(Data communication)</strong> 은 전선과 같은 통신 매체를 통하여 두 장치간에 데이터를 교환하는 것<br>데이터(data) : 데이터를 만들어 사용하는 사용자 간에 합의된 형태로 표현된 정보</p>\n<p>​      <strong>기본 특성</strong></p>\n<ul>\n<li>delivery - 올바른 목적지, 원하는 장치나 사용자에게 전달</li>\n<li>accuracy - 요류, 손실 없이 정확하게 데이터를 전달</li>\n<li>timeliness - 적정 시간 내에 데이터를 전달</li>\n<li>jitter(파형 난조) - 패킷의 도착 시간이 서로 차이가 나서 품질(quality)이 일정치 못함</li>\n</ul>\n<blockquote>\n<p>DATJi(닷지)…???ㅋㅋ</p>\n</blockquote>\n<h3 id=\"1-1-1-데이터-통신-구성-요소\"><a href=\"#1-1-1-데이터-통신-구성-요소\" class=\"headerlink\" title=\"1.1.1 데이터 통신 구성 요소\"></a>1.1.1 데이터 통신 구성 요소</h3><img align=\"middle\" data-src=\"http://www.myreadingroom.co.in/images/stories/docs/dcn/Components%20of%20Data%20Communication.jpg\">\n\n<p><strong>5개의 구성 요소</strong> 가 있다</p>\n<ul>\n<li><span style=\"color:green\">메세지(Message)</span><br>– 통신의 대상이 되는 정보(데이터)<br>ex) text, number, image, audio, video</li>\n<li><span style=\"color:green\">송신자(Sender)</span><br>– 데이터 메시지를 보내는 장치<br> ex) computer, telephone, camera</li>\n<li><span style=\"color:green\">수신자(Receiver)</span><br>– 메시지를 받는 장치<br> ex) computer, telephone, television</li>\n<li><span style=\"color:green\">전송매체(Medium)</span><br>– sender부터 receiver까지 이동하는 물리적인 경로<br> ex) twisted pair wire, coaxial cable, fiber-optic cable, laser, wireless wave</li>\n<li><span style=\"color:green\">프로토콜(Protocol)</span><br>– 통신하는 기기간의 약속(통신 규약)</li>\n</ul>\n<h3 id=\"1-1-2-데이터-표현\"><a href=\"#1-1-2-데이터-표현\" class=\"headerlink\" title=\"1.1.2 데이터 표현\"></a>1.1.2 데이터 표현</h3><ul>\n<li>Text         -&gt; Bit Pattern</li>\n<li>Number     -&gt; Bit Pattern</li>\n<li>Image         -&gt; Pixel, Resolution</li>\n<li>Audio         -&gt; 연속 신호</li>\n<li>Video         -&gt; 연속적인 개체 또는 여러 화상의 조합</li>\n</ul>\n<h3 id=\"1-1-3-데이터-흐름-방향\"><a href=\"#1-1-3-데이터-흐름-방향\" class=\"headerlink\" title=\"1.1.3 데이터 흐름 방향\"></a>1.1.3 데이터 흐름 방향</h3><img align=\"center\" data-src=\"http://www.opentextbooks.org.hk/system/files/resource/10/10132/10137/media/ct332_01.gif\">\n\n<p>a. <span style=\"color:blue\">Simplex</span></p>\n<ul>\n<li>한쪽 방향으로만 통신 가능</li>\n<li><span style=\"color:red\"> Keyboard, Monitor, Radio, TV</span></li>\n</ul>\n<p>b. <span style=\"color:blue\">Half-duplex</span></p>\n<ul>\n<li>양 방향 송신 가능하지만 <strong>동시에</strong> 송신 불가</li>\n<li><span style=\"color:red\"> Walkie-talkie(무전기)</span></li>\n</ul>\n<p>c. <span style=\"color:blue\">Full-duplex</span></p>\n<ul>\n<li>양 방향 송/수신 가능(2차선 도로와 같음)</li>\n<li><span style=\"color:red\">Telephone, Internet</span></li>\n</ul>\n<hr>\n<h2 id=\"1-2-네트워크\"><a href=\"#1-2-네트워크\" class=\"headerlink\" title=\"1.2 네트워크\"></a>1.2 네트워크</h2><p><strong>통신 링크에 서로 연결된 장치(Node)의 모임</strong><br>The interconnection of a set of devices capable of communication</p>\n<h3 id=\"1-2-1-네트워크-성능-평가\"><a href=\"#1-2-1-네트워크-성능-평가\" class=\"headerlink\" title=\"1.2.1 네트워크 성능 평가\"></a>1.2.1 <del>네트워크 성능 평가</del></h3><p>생략</p>\n<h3 id=\"1-2-2-물리적-구조-Physical-Structures-연결-방식\"><a href=\"#1-2-2-물리적-구조-Physical-Structures-연결-방식\" class=\"headerlink\" title=\"1.2.2 물리적 구조(Physical Structures) : 연결 방식\"></a>1.2.2 물리적 구조(Physical Structures) : 연결 방식</h3><img align=\"center\" data-src=\"https://systemzone.net/wp-content/uploads/2017/09/network-topology.png\">\n\n<p><strong>Physical Topology</strong> : 네트워크가 물리적으로 어떻게 구성 되었는가<br>(하이브리드 토폴로지 같은 것은 제외하고 기본적인 종류만 다룬다)</p>\n<ul>\n<li>Point-to-point    - 기본적인 연결</li>\n<li>Multipoint        - tree와 같은 것 아닐까??</li>\n<li><span style=\"color:red\">Mesh</span></li>\n<li><span style=\"color:red\">Star</span></li>\n<li><span style=\"color:red\">Bus</span></li>\n<li><span style=\"color:red\">Ring</span></li>\n</ul>\n<h2 id=\"1-3-네트워크-유형\"><a href=\"#1-3-네트워크-유형\" class=\"headerlink\" title=\"1.3 네트워크 유형\"></a>1.3 네트워크 유형</h2><img align=\"center\" data-src=\"https://www.researchgate.net/profile/Viet_Hung_Nguyen3/publication/225349001/figure/fig1/AS:302593634648075@1449155352384/Global-view-of-metropolitan-area-network.png\">\n\n<ul>\n<li><span style=\"color:blue\">Local-area Network</span> <strong>LAN</strong><br>개인(기관)이 소유함 : Office, Building, Campus<br>단순히 2개만 연결하는 것에서 부터, 여러 대 까지 확장이 가능<br>각각의 host는 <strong>identifier와 address</strong>를 가지고 있다<br>과거에는 bus type으로 구성했다면, 현대에는 switch를 사용해서 star type으로 구성한다!</li>\n</ul>\n<ul>\n<li><span style=\"color:blue\">Metropolitan-area Network</span> <strong>MAN</strong><br>우리나라에 해당 없으니 생략</li>\n</ul>\n<ul>\n<li><span style=\"color:blue\">Wide-area Network</span> <strong>WAN</strong><br>아주 넓은 지역의 네트워크 : town, state, country, the world<br>communicational organization이 소유<br>Point-to-point WAN, Switched WAN</li>\n</ul>\n<h3 id=\"1-3-3-스위칭-Switching\"><a href=\"#1-3-3-스위칭-Switching\" class=\"headerlink\" title=\"1.3.3 스위칭(Switching)\"></a>1.3.3 스위칭(Switching)</h3><p><strong>2개 이상의 입력 단자와 출력 단자를 연결시켜 주는 기능</strong></p>\n<img data-src=\"https://www.thecrazyprogrammer.com/wp-content/uploads/2018/01/Difference-between-Circuit-Switching-and-Packet-Switching.gif\">\n\n<ul>\n<li><p><span style=\"color:red\">회선교환망(Circuit Switched Network)</span> - 음성 전화<br>dedicated connection(전용으로 할당) 을 circuit 이라고 한다<br>과거에는 <em>Telephone network</em> 라고 했다</p>\n<p>(지금 telephone network는 packet switching의 일부)<br>활성화 비활성화만 할 수 있다</p>\n</li>\n</ul>\n<ul>\n<li><span style=\"color:red\">패킷 교환망(Packet Switched Network)</span> - 인터넷<br>blocks of data 로 이루어진 packets 라고 한다<br>switches fuction의 <em>storing</em> 과 <em>forwarding</em> 을 사용해서 데이터를 주고 받음<br>즉, 저장했다 보내는 것</li>\n</ul>\n<h3 id=\"1-3-4-인터넷\"><a href=\"#1-3-4-인터넷\" class=\"headerlink\" title=\"1.3.4 인터넷\"></a>1.3.4 인터넷</h3><p> <span style=\"color: red\">Internet Service Provider(ISP) </span> : LG, KT, SK 같은 인터넷을 제공해 주는 곳</p>\n<p>주로 물리적인 연결 방법으로 point-to-point WAN 방식을 사용한다</p>\n<h2 id=\"정리\"><a href=\"#정리\" class=\"headerlink\" title=\"정리\"></a>정리</h2><ul>\n<li>Data Communication<br>Components, Data Type, Data Flow</li>\n<li>Network Topology<br>Mesh, Star, Bus, Ring</li>\n<li>The Configuration of Internet</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>김재수 교수님, 컴퓨터망(Data Communications and Networking) 수업 내용<br>수업 복습 겸 ppt 내용 정리</p>\n</blockquote>\n<h3 id=\"수업-목표\"><a href=\"#수업-목표\" class=\"headerlink\" title=\"수업 목표\"></a>수업 목표</h3><ul>\n<li>데이터 통신과 컴퓨터 통신에 대한 기본 원리 및 구조, 표준을 이해</li>\n<li>컴퓨터 네트워크와 관련된 기술과 개념을 이해</li>\n</ul>\n<blockquote>\n<p>교수님 曰 : Data transmission(communication) 에서 제일 중요한 것은 protocol 이다!</p>\n</blockquote>\n<h1 id=\"Chapter-1-Introduction-개요\"><a href=\"#Chapter-1-Introduction-개요\" class=\"headerlink\" title=\"Chapter 1 Introduction(개요)\"></a><span style=\"color:blue\">Chapter 1</span> Introduction(개요)</h1><h2 id=\"1-1-데이터-통신\"><a href=\"#1-1-데이터-통신\" class=\"headerlink\" title=\"1.1 데이터 통신\"></a>1.1 데이터 통신</h2><p><strong>데이터 통신(Data communication)</strong> 은 전선과 같은 통신 매체를 통하여 두 장치간에 데이터를 교환하는 것<br>데이터(data) : 데이터를 만들어 사용하는 사용자 간에 합의된 형태로 표현된 정보</p>\n<p>​      <strong>기본 특성</strong></p>\n<ul>\n<li>delivery - 올바른 목적지, 원하는 장치나 사용자에게 전달</li>\n<li>accuracy - 요류, 손실 없이 정확하게 데이터를 전달</li>\n<li>timeliness - 적정 시간 내에 데이터를 전달</li>\n<li>jitter(파형 난조) - 패킷의 도착 시간이 서로 차이가 나서 품질(quality)이 일정치 못함</li>\n</ul>\n<blockquote>\n<p>DATJi(닷지)…???ㅋㅋ</p>\n</blockquote>\n<h3 id=\"1-1-1-데이터-통신-구성-요소\"><a href=\"#1-1-1-데이터-통신-구성-요소\" class=\"headerlink\" title=\"1.1.1 데이터 통신 구성 요소\"></a>1.1.1 데이터 통신 구성 요소</h3><img align=\"middle\" data-src=\"http://www.myreadingroom.co.in/images/stories/docs/dcn/Components%20of%20Data%20Communication.jpg\">\n\n<p><strong>5개의 구성 요소</strong> 가 있다</p>\n<ul>\n<li><span style=\"color:green\">메세지(Message)</span><br>– 통신의 대상이 되는 정보(데이터)<br>ex) text, number, image, audio, video</li>\n<li><span style=\"color:green\">송신자(Sender)</span><br>– 데이터 메시지를 보내는 장치<br> ex) computer, telephone, camera</li>\n<li><span style=\"color:green\">수신자(Receiver)</span><br>– 메시지를 받는 장치<br> ex) computer, telephone, television</li>\n<li><span style=\"color:green\">전송매체(Medium)</span><br>– sender부터 receiver까지 이동하는 물리적인 경로<br> ex) twisted pair wire, coaxial cable, fiber-optic cable, laser, wireless wave</li>\n<li><span style=\"color:green\">프로토콜(Protocol)</span><br>– 통신하는 기기간의 약속(통신 규약)</li>\n</ul>\n<h3 id=\"1-1-2-데이터-표현\"><a href=\"#1-1-2-데이터-표현\" class=\"headerlink\" title=\"1.1.2 데이터 표현\"></a>1.1.2 데이터 표현</h3><ul>\n<li>Text         -&gt; Bit Pattern</li>\n<li>Number     -&gt; Bit Pattern</li>\n<li>Image         -&gt; Pixel, Resolution</li>\n<li>Audio         -&gt; 연속 신호</li>\n<li>Video         -&gt; 연속적인 개체 또는 여러 화상의 조합</li>\n</ul>\n<h3 id=\"1-1-3-데이터-흐름-방향\"><a href=\"#1-1-3-데이터-흐름-방향\" class=\"headerlink\" title=\"1.1.3 데이터 흐름 방향\"></a>1.1.3 데이터 흐름 방향</h3><img align=\"center\" data-src=\"http://www.opentextbooks.org.hk/system/files/resource/10/10132/10137/media/ct332_01.gif\">\n\n<p>a. <span style=\"color:blue\">Simplex</span></p>\n<ul>\n<li>한쪽 방향으로만 통신 가능</li>\n<li><span style=\"color:red\"> Keyboard, Monitor, Radio, TV</span></li>\n</ul>\n<p>b. <span style=\"color:blue\">Half-duplex</span></p>\n<ul>\n<li>양 방향 송신 가능하지만 <strong>동시에</strong> 송신 불가</li>\n<li><span style=\"color:red\"> Walkie-talkie(무전기)</span></li>\n</ul>\n<p>c. <span style=\"color:blue\">Full-duplex</span></p>\n<ul>\n<li>양 방향 송/수신 가능(2차선 도로와 같음)</li>\n<li><span style=\"color:red\">Telephone, Internet</span></li>\n</ul>\n<hr>\n<h2 id=\"1-2-네트워크\"><a href=\"#1-2-네트워크\" class=\"headerlink\" title=\"1.2 네트워크\"></a>1.2 네트워크</h2><p><strong>통신 링크에 서로 연결된 장치(Node)의 모임</strong><br>The interconnection of a set of devices capable of communication</p>\n<h3 id=\"1-2-1-네트워크-성능-평가\"><a href=\"#1-2-1-네트워크-성능-평가\" class=\"headerlink\" title=\"1.2.1 네트워크 성능 평가\"></a>1.2.1 <del>네트워크 성능 평가</del></h3><p>생략</p>\n<h3 id=\"1-2-2-물리적-구조-Physical-Structures-연결-방식\"><a href=\"#1-2-2-물리적-구조-Physical-Structures-연결-방식\" class=\"headerlink\" title=\"1.2.2 물리적 구조(Physical Structures) : 연결 방식\"></a>1.2.2 물리적 구조(Physical Structures) : 연결 방식</h3><img align=\"center\" data-src=\"https://systemzone.net/wp-content/uploads/2017/09/network-topology.png\">\n\n<p><strong>Physical Topology</strong> : 네트워크가 물리적으로 어떻게 구성 되었는가<br>(하이브리드 토폴로지 같은 것은 제외하고 기본적인 종류만 다룬다)</p>\n<ul>\n<li>Point-to-point    - 기본적인 연결</li>\n<li>Multipoint        - tree와 같은 것 아닐까??</li>\n<li><span style=\"color:red\">Mesh</span></li>\n<li><span style=\"color:red\">Star</span></li>\n<li><span style=\"color:red\">Bus</span></li>\n<li><span style=\"color:red\">Ring</span></li>\n</ul>\n<h2 id=\"1-3-네트워크-유형\"><a href=\"#1-3-네트워크-유형\" class=\"headerlink\" title=\"1.3 네트워크 유형\"></a>1.3 네트워크 유형</h2><img align=\"center\" data-src=\"https://www.researchgate.net/profile/Viet_Hung_Nguyen3/publication/225349001/figure/fig1/AS:302593634648075@1449155352384/Global-view-of-metropolitan-area-network.png\">\n\n<ul>\n<li><span style=\"color:blue\">Local-area Network</span> <strong>LAN</strong><br>개인(기관)이 소유함 : Office, Building, Campus<br>단순히 2개만 연결하는 것에서 부터, 여러 대 까지 확장이 가능<br>각각의 host는 <strong>identifier와 address</strong>를 가지고 있다<br>과거에는 bus type으로 구성했다면, 현대에는 switch를 사용해서 star type으로 구성한다!</li>\n</ul>\n<ul>\n<li><span style=\"color:blue\">Metropolitan-area Network</span> <strong>MAN</strong><br>우리나라에 해당 없으니 생략</li>\n</ul>\n<ul>\n<li><span style=\"color:blue\">Wide-area Network</span> <strong>WAN</strong><br>아주 넓은 지역의 네트워크 : town, state, country, the world<br>communicational organization이 소유<br>Point-to-point WAN, Switched WAN</li>\n</ul>\n<h3 id=\"1-3-3-스위칭-Switching\"><a href=\"#1-3-3-스위칭-Switching\" class=\"headerlink\" title=\"1.3.3 스위칭(Switching)\"></a>1.3.3 스위칭(Switching)</h3><p><strong>2개 이상의 입력 단자와 출력 단자를 연결시켜 주는 기능</strong></p>\n<img data-src=\"https://www.thecrazyprogrammer.com/wp-content/uploads/2018/01/Difference-between-Circuit-Switching-and-Packet-Switching.gif\">\n\n<ul>\n<li><p><span style=\"color:red\">회선교환망(Circuit Switched Network)</span> - 음성 전화<br>dedicated connection(전용으로 할당) 을 circuit 이라고 한다<br>과거에는 <em>Telephone network</em> 라고 했다</p>\n<p>(지금 telephone network는 packet switching의 일부)<br>활성화 비활성화만 할 수 있다</p>\n</li>\n</ul>\n<ul>\n<li><span style=\"color:red\">패킷 교환망(Packet Switched Network)</span> - 인터넷<br>blocks of data 로 이루어진 packets 라고 한다<br>switches fuction의 <em>storing</em> 과 <em>forwarding</em> 을 사용해서 데이터를 주고 받음<br>즉, 저장했다 보내는 것</li>\n</ul>\n<h3 id=\"1-3-4-인터넷\"><a href=\"#1-3-4-인터넷\" class=\"headerlink\" title=\"1.3.4 인터넷\"></a>1.3.4 인터넷</h3><p> <span style=\"color: red\">Internet Service Provider(ISP) </span> : LG, KT, SK 같은 인터넷을 제공해 주는 곳</p>\n<p>주로 물리적인 연결 방법으로 point-to-point WAN 방식을 사용한다</p>\n<h2 id=\"정리\"><a href=\"#정리\" class=\"headerlink\" title=\"정리\"></a>정리</h2><ul>\n<li>Data Communication<br>Components, Data Type, Data Flow</li>\n<li>Network Topology<br>Mesh, Star, Bus, Ring</li>\n<li>The Configuration of Internet</li>\n</ul>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_drafts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":0,"date":"2019-07-13T05:48:07.676Z","updated":"2019-07-13T05:48:07.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt7pk000126464v0uhdan","content":"<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\" title=\"https://hexo.io/\">Hexo<i class=\"fa fa-external-link\"></i></span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\" title=\"https://hexo.io/docs/\">documentation<i class=\"fa fa-external-link\"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\" title=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting<i class=\"fa fa-external-link\"></i></span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\" title=\"https://github.com/hexojs/hexo/issues\">GitHub<i class=\"fa fa-external-link\"></i></span>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\" title=\"https://hexo.io/docs/writing.html\">Writing<i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\" title=\"https://hexo.io/docs/server.html\">Server<i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\" title=\"https://hexo.io/docs/generating.html\">Generating<i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZGVwbG95bWVudC5odG1s\" title=\"https://hexo.io/docs/deployment.html\">Deployment<i class=\"fa fa-external-link\"></i></span></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\" title=\"https://hexo.io/\">Hexo<i class=\"fa fa-external-link\"></i></span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\" title=\"https://hexo.io/docs/\">documentation<i class=\"fa fa-external-link\"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\" title=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting<i class=\"fa fa-external-link\"></i></span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\" title=\"https://github.com/hexojs/hexo/issues\">GitHub<i class=\"fa fa-external-link\"></i></span>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\" title=\"https://hexo.io/docs/writing.html\">Writing<i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\" title=\"https://hexo.io/docs/server.html\">Server<i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\" title=\"https://hexo.io/docs/generating.html\">Generating<i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZGVwbG95bWVudC5odG1s\" title=\"https://hexo.io/docs/deployment.html\">Deployment<i class=\"fa fa-external-link\"></i></span></p>\n"},{"title":"포스트 작성을 위한 Hexo Plugins","author":{"nick":"TAEJIN","link":null},"date":"2019-01-23T07:32:24.000Z","subtitle":"19.01.23 작성, 블로그 포스트를 작성하며 유용할 것 같은 플러그인들을 소개","cover":"/img/hexo_plugin.jpg","_content":"\n### Related Posts\n","source":"_drafts/20190123-markdown-plugin.md","raw":"---\ntitle: 포스트 작성을 위한 Hexo Plugins\nauthor:\n  nick: TAEJIN\n  link: null\ncategories:\n  - BLOG\n  - HEXO\ntags:\n  - hexo\n  - plugins\n  - 헥소\n  - 플러그인\ndate: 2019-01-23 16:32:24\nsubtitle: 19.01.23 작성, 블로그 포스트를 작성하며 유용할 것 같은 플러그인들을 소개\ncover: '/img/hexo_plugin.jpg'\n---\n\n### Related Posts\n","slug":"markdown-plugin","published":0,"updated":"2019-07-13T09:41:13.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt7pq00042646mr7326ps","content":"<h3 id=\"Related-Posts\"><a href=\"#Related-Posts\" class=\"headerlink\" title=\"Related Posts\"></a>Related Posts</h3><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Related-Posts\"><a href=\"#Related-Posts\" class=\"headerlink\" title=\"Related Posts\"></a>Related Posts</h3>"},{"title":"Markup? Markdown!","author":{"nick":"TAEJIN","link":"https://www.github.com/taejin0323"},"date":"2019-01-17T07:31:42.000Z","subtitle":"첫 포스팅","cover":"https://www.mcdwayne.com/wp-content/uploads/2018/05/I-love-markdown-syntax-language.png","_content":"\nGithub Page를 시작 하면서 처음으로 Markdown 언어를 사용하게 되었습니다.\n처음 웹 프로그래밍을 배울 때 HTML부터 배우면서 Hyper Text Markup Language(HTML)의 정확한 의미와 뜻은 알지 못한체 그저 태그로 구성된 문서(!)라는 정도로만 이해하고 넘겼습니다.\n\n뜬금없이 HTML과 Markup에 대해 언급해서 의아하실 수 있지만, [Markdown](https://en.wikipedia.org/wiki/Markdown)에 대한 위키피디아 정의를 보면 'Markdown is a lightweight markup language'라고 언급되어 있습니다.\n여기서 HTML에 대한 정의를 깊게 이야기하진 않겠지만, 적어도 **Markup**은 무엇인지 알고 **Markdown**에 대해서 알아보도록 하겠습니다.\n\n## Markup 이란?\n'Markup'이란 단어는 비즈니스나 법률 등에도 다른 의미로 사용되는데, 프로그래밍에서는 쉽게 말해 **어딘가에 표시를 해두는 것**을 뜻합니다.\n이해를 돕기 위해 예를 들어보겠습니다.\n\n예 1) 표시가 없을 때\n- HTML을 가르쳐드립니다 핵심 태그만 알면 당신도 HTML의 고수가 될 수 있습니다 19/01/17 세미나실\n\n\n예 2) 표시가 있을 때\n- 제목 : HTML을 가르쳐드립니다\n- 내용 : 핵심 태그만 알면 당신도 HTML의 고수가 될 수 있습니다\n- 날짜 : 19/01/17\n- 장소 : 세미나실\n\n\n표시가 있음으로 단락(HTML에서는 Tag로 표현합니다)이 구분되고 직관적으로 이해하기도 쉬워졌습니다. 즉, **Markup 언어를 사용하면 문서(text)를 구조적으로 표현할 수 있습니다.**\n\n## Markdown 이란?\n[마크다운](https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4) 언어는 **사람들이 읽기 쉽고 쓰기 쉬운 플레인 텍스트 포맷을 사용하여 쓸 수 있으면서 구조적으로 유효한 HTML로 선택적 변환이 가능하게 하는 것을 목표**로 2004년 [존 그루버](https://en.wikipedia.org/wiki/John_Gruber)가 [에런 스위츠](https://ko.wikipedia.org/wiki/%EC%97%90%EB%9F%B0_%EC%8A%A4%EC%9B%8C%EC%B8%A0)와 협업하여 만든 언어입니다.\n특수기호와 문자를 이용하는 비교적 매우 간단한 문법 구조로 빠르게 컨텐츠를 작성할 수 있고 보다 직관적으로 이해할 수 있습니다.\n\n이해를 돕기 위해 일상에서 자주 사용되는 예를 들어보겠습니다.\n- SNS의 태그 기능 ex) 페이스북, 인스타그램\n- 깃허브 README.md 등...\n\n\n맨 처음 언급한 위키피디아 내용처럼 마크다운 언어는 마크업 언어를 **좀 더 직관적이고 간결하게 문서를 작성하게 해주는 언어**입니다.\n\n## 마크다운의 장-단점\n### 장점\n\t1. 간결하다.\n\t2. 별도의 도구없이 작성가능하다.\n\t3. 다양한 형태로 변환이 가능하다.\n\t3. 텍스트(Text)로 저장되기 때문에 용량이 적어 보관이 용이하다.\n\t4. 텍스트파일이기 때문에 버전관리시스템을 이용하여 변경이력을 관리할 수 있다.\n\t5. 지원하는 프로그램과 플랫폼이 다양하다.\n### 단점\n\t1. 표준이 없다.\n\t2. 표준이 없기 때문에 도구에 따라서 변환방식이나 생성물이 다르다.\n\t3. 모든 HTML 마크업을 대신하지 못한다.\n\n\n\n\n\n참조 :\n----------\n- https://brunch.co.kr/@coveryou/14\n- https://cordelia273.space/15\n\n<br><br><br>\n","source":"_posts/20190117-markdown-basic.md","raw":"---\ntitle: Markup? Markdown!\nauthor:\n  nick: TAEJIN\n  link: https://www.github.com/taejin0323\ncategories:\n  - BLOG\n  - MARKDOWN\ntags:\n  - markup\n  - markdown\ndate: 2019-01-17 16:31:42\nsubtitle: 첫 포스팅\ncover: https://www.mcdwayne.com/wp-content/uploads/2018/05/I-love-markdown-syntax-language.png\n---\n\nGithub Page를 시작 하면서 처음으로 Markdown 언어를 사용하게 되었습니다.\n처음 웹 프로그래밍을 배울 때 HTML부터 배우면서 Hyper Text Markup Language(HTML)의 정확한 의미와 뜻은 알지 못한체 그저 태그로 구성된 문서(!)라는 정도로만 이해하고 넘겼습니다.\n\n뜬금없이 HTML과 Markup에 대해 언급해서 의아하실 수 있지만, [Markdown](https://en.wikipedia.org/wiki/Markdown)에 대한 위키피디아 정의를 보면 'Markdown is a lightweight markup language'라고 언급되어 있습니다.\n여기서 HTML에 대한 정의를 깊게 이야기하진 않겠지만, 적어도 **Markup**은 무엇인지 알고 **Markdown**에 대해서 알아보도록 하겠습니다.\n\n## Markup 이란?\n'Markup'이란 단어는 비즈니스나 법률 등에도 다른 의미로 사용되는데, 프로그래밍에서는 쉽게 말해 **어딘가에 표시를 해두는 것**을 뜻합니다.\n이해를 돕기 위해 예를 들어보겠습니다.\n\n예 1) 표시가 없을 때\n- HTML을 가르쳐드립니다 핵심 태그만 알면 당신도 HTML의 고수가 될 수 있습니다 19/01/17 세미나실\n\n\n예 2) 표시가 있을 때\n- 제목 : HTML을 가르쳐드립니다\n- 내용 : 핵심 태그만 알면 당신도 HTML의 고수가 될 수 있습니다\n- 날짜 : 19/01/17\n- 장소 : 세미나실\n\n\n표시가 있음으로 단락(HTML에서는 Tag로 표현합니다)이 구분되고 직관적으로 이해하기도 쉬워졌습니다. 즉, **Markup 언어를 사용하면 문서(text)를 구조적으로 표현할 수 있습니다.**\n\n## Markdown 이란?\n[마크다운](https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4) 언어는 **사람들이 읽기 쉽고 쓰기 쉬운 플레인 텍스트 포맷을 사용하여 쓸 수 있으면서 구조적으로 유효한 HTML로 선택적 변환이 가능하게 하는 것을 목표**로 2004년 [존 그루버](https://en.wikipedia.org/wiki/John_Gruber)가 [에런 스위츠](https://ko.wikipedia.org/wiki/%EC%97%90%EB%9F%B0_%EC%8A%A4%EC%9B%8C%EC%B8%A0)와 협업하여 만든 언어입니다.\n특수기호와 문자를 이용하는 비교적 매우 간단한 문법 구조로 빠르게 컨텐츠를 작성할 수 있고 보다 직관적으로 이해할 수 있습니다.\n\n이해를 돕기 위해 일상에서 자주 사용되는 예를 들어보겠습니다.\n- SNS의 태그 기능 ex) 페이스북, 인스타그램\n- 깃허브 README.md 등...\n\n\n맨 처음 언급한 위키피디아 내용처럼 마크다운 언어는 마크업 언어를 **좀 더 직관적이고 간결하게 문서를 작성하게 해주는 언어**입니다.\n\n## 마크다운의 장-단점\n### 장점\n\t1. 간결하다.\n\t2. 별도의 도구없이 작성가능하다.\n\t3. 다양한 형태로 변환이 가능하다.\n\t3. 텍스트(Text)로 저장되기 때문에 용량이 적어 보관이 용이하다.\n\t4. 텍스트파일이기 때문에 버전관리시스템을 이용하여 변경이력을 관리할 수 있다.\n\t5. 지원하는 프로그램과 플랫폼이 다양하다.\n### 단점\n\t1. 표준이 없다.\n\t2. 표준이 없기 때문에 도구에 따라서 변환방식이나 생성물이 다르다.\n\t3. 모든 HTML 마크업을 대신하지 못한다.\n\n\n\n\n\n참조 :\n----------\n- https://brunch.co.kr/@coveryou/14\n- https://cordelia273.space/15\n\n<br><br><br>\n","slug":"markdown-basic","published":1,"updated":"2019-07-13T09:41:13.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt7pt00052646px19ywpy","content":"<p>Github Page를 시작 하면서 처음으로 Markdown 언어를 사용하게 되었습니다.<br>처음 웹 프로그래밍을 배울 때 HTML부터 배우면서 Hyper Text Markup Language(HTML)의 정확한 의미와 뜻은 알지 못한체 그저 태그로 구성된 문서(!)라는 정도로만 이해하고 넘겼습니다.</p>\n<p>뜬금없이 HTML과 Markup에 대해 언급해서 의아하실 수 있지만, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWFya2Rvd24=\" title=\"https://en.wikipedia.org/wiki/Markdown\">Markdown<i class=\"fa fa-external-link\"></i></span>에 대한 위키피디아 정의를 보면 ‘Markdown is a lightweight markup language’라고 언급되어 있습니다.<br>여기서 HTML에 대한 정의를 깊게 이야기하진 않겠지만, 적어도 <strong>Markup</strong>은 무엇인지 알고 <strong>Markdown</strong>에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"Markup-이란\"><a href=\"#Markup-이란\" class=\"headerlink\" title=\"Markup 이란?\"></a>Markup 이란?</h2><p>‘Markup’이란 단어는 비즈니스나 법률 등에도 다른 의미로 사용되는데, 프로그래밍에서는 쉽게 말해 <strong>어딘가에 표시를 해두는 것</strong>을 뜻합니다.<br>이해를 돕기 위해 예를 들어보겠습니다.</p>\n<p>예 1) 표시가 없을 때</p>\n<ul>\n<li>HTML을 가르쳐드립니다 핵심 태그만 알면 당신도 HTML의 고수가 될 수 있습니다 19/01/17 세미나실</li>\n</ul>\n<p>예 2) 표시가 있을 때</p>\n<ul>\n<li>제목 : HTML을 가르쳐드립니다</li>\n<li>내용 : 핵심 태그만 알면 당신도 HTML의 고수가 될 수 있습니다</li>\n<li>날짜 : 19/01/17</li>\n<li>장소 : 세미나실</li>\n</ul>\n<p>표시가 있음으로 단락(HTML에서는 Tag로 표현합니다)이 구분되고 직관적으로 이해하기도 쉬워졌습니다. 즉, <strong>Markup 언어를 사용하면 문서(text)를 구조적으로 표현할 수 있습니다.</strong></p>\n<h2 id=\"Markdown-이란\"><a href=\"#Markdown-이란\" class=\"headerlink\" title=\"Markdown 이란?\"></a>Markdown 이란?</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rby53aWtpcGVkaWEub3JnL3dpa2kvJUVCJUE3JTg4JUVEJTgxJUFDJUVCJThCJUE0JUVDJTlBJUI0\" title=\"https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4\">마크다운<i class=\"fa fa-external-link\"></i></span> 언어는 <strong>사람들이 읽기 쉽고 쓰기 쉬운 플레인 텍스트 포맷을 사용하여 쓸 수 있으면서 구조적으로 유효한 HTML로 선택적 변환이 가능하게 하는 것을 목표</strong>로 2004년 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSm9obl9HcnViZXI=\" title=\"https://en.wikipedia.org/wiki/John_Gruber\">존 그루버<i class=\"fa fa-external-link\"></i></span>가 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rby53aWtpcGVkaWEub3JnL3dpa2kvJUVDJTk3JTkwJUVCJTlGJUIwXyVFQyU4QSVBNCVFQyU5QiU4QyVFQyVCOCVBMA==\" title=\"https://ko.wikipedia.org/wiki/%EC%97%90%EB%9F%B0_%EC%8A%A4%EC%9B%8C%EC%B8%A0\">에런 스위츠<i class=\"fa fa-external-link\"></i></span>와 협업하여 만든 언어입니다.<br>특수기호와 문자를 이용하는 비교적 매우 간단한 문법 구조로 빠르게 컨텐츠를 작성할 수 있고 보다 직관적으로 이해할 수 있습니다.</p>\n<p>이해를 돕기 위해 일상에서 자주 사용되는 예를 들어보겠습니다.</p>\n<ul>\n<li>SNS의 태그 기능 ex) 페이스북, 인스타그램</li>\n<li>깃허브 README.md 등…</li>\n</ul>\n<p>맨 처음 언급한 위키피디아 내용처럼 마크다운 언어는 마크업 언어를 <strong>좀 더 직관적이고 간결하게 문서를 작성하게 해주는 언어</strong>입니다.</p>\n<h2 id=\"마크다운의-장-단점\"><a href=\"#마크다운의-장-단점\" class=\"headerlink\" title=\"마크다운의 장-단점\"></a>마크다운의 장-단점</h2><h3 id=\"장점\"><a href=\"#장점\" class=\"headerlink\" title=\"장점\"></a>장점</h3><pre><code>1. 간결하다.\n2. 별도의 도구없이 작성가능하다.\n3. 다양한 형태로 변환이 가능하다.\n3. 텍스트(Text)로 저장되기 때문에 용량이 적어 보관이 용이하다.\n4. 텍스트파일이기 때문에 버전관리시스템을 이용하여 변경이력을 관리할 수 있다.\n5. 지원하는 프로그램과 플랫폼이 다양하다.</code></pre><h3 id=\"단점\"><a href=\"#단점\" class=\"headerlink\" title=\"단점\"></a>단점</h3><pre><code>1. 표준이 없다.\n2. 표준이 없기 때문에 도구에 따라서 변환방식이나 생성물이 다르다.\n3. 모든 HTML 마크업을 대신하지 못한다.</code></pre><h2 id=\"참조\"><a href=\"#참조\" class=\"headerlink\" title=\"참조 :\"></a>참조 :</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9icnVuY2guY28ua3IvQGNvdmVyeW91LzE0\" title=\"https://brunch.co.kr/@coveryou/14\">https://brunch.co.kr/@coveryou/14<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb3JkZWxpYTI3My5zcGFjZS8xNQ==\" title=\"https://cordelia273.space/15\">https://cordelia273.space/15<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<p><br><br><br></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<p>Github Page를 시작 하면서 처음으로 Markdown 언어를 사용하게 되었습니다.<br>처음 웹 프로그래밍을 배울 때 HTML부터 배우면서 Hyper Text Markup Language(HTML)의 정확한 의미와 뜻은 알지 못한체 그저 태그로 구성된 문서(!)라는 정도로만 이해하고 넘겼습니다.</p>\n<p>뜬금없이 HTML과 Markup에 대해 언급해서 의아하실 수 있지만, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWFya2Rvd24=\" title=\"https://en.wikipedia.org/wiki/Markdown\">Markdown<i class=\"fa fa-external-link\"></i></span>에 대한 위키피디아 정의를 보면 ‘Markdown is a lightweight markup language’라고 언급되어 있습니다.<br>여기서 HTML에 대한 정의를 깊게 이야기하진 않겠지만, 적어도 <strong>Markup</strong>은 무엇인지 알고 <strong>Markdown</strong>에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"Markup-이란\"><a href=\"#Markup-이란\" class=\"headerlink\" title=\"Markup 이란?\"></a>Markup 이란?</h2><p>‘Markup’이란 단어는 비즈니스나 법률 등에도 다른 의미로 사용되는데, 프로그래밍에서는 쉽게 말해 <strong>어딘가에 표시를 해두는 것</strong>을 뜻합니다.<br>이해를 돕기 위해 예를 들어보겠습니다.</p>\n<p>예 1) 표시가 없을 때</p>\n<ul>\n<li>HTML을 가르쳐드립니다 핵심 태그만 알면 당신도 HTML의 고수가 될 수 있습니다 19/01/17 세미나실</li>\n</ul>\n<p>예 2) 표시가 있을 때</p>\n<ul>\n<li>제목 : HTML을 가르쳐드립니다</li>\n<li>내용 : 핵심 태그만 알면 당신도 HTML의 고수가 될 수 있습니다</li>\n<li>날짜 : 19/01/17</li>\n<li>장소 : 세미나실</li>\n</ul>\n<p>표시가 있음으로 단락(HTML에서는 Tag로 표현합니다)이 구분되고 직관적으로 이해하기도 쉬워졌습니다. 즉, <strong>Markup 언어를 사용하면 문서(text)를 구조적으로 표현할 수 있습니다.</strong></p>\n<h2 id=\"Markdown-이란\"><a href=\"#Markdown-이란\" class=\"headerlink\" title=\"Markdown 이란?\"></a>Markdown 이란?</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rby53aWtpcGVkaWEub3JnL3dpa2kvJUVCJUE3JTg4JUVEJTgxJUFDJUVCJThCJUE0JUVDJTlBJUI0\" title=\"https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4\">마크다운<i class=\"fa fa-external-link\"></i></span> 언어는 <strong>사람들이 읽기 쉽고 쓰기 쉬운 플레인 텍스트 포맷을 사용하여 쓸 수 있으면서 구조적으로 유효한 HTML로 선택적 변환이 가능하게 하는 것을 목표</strong>로 2004년 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSm9obl9HcnViZXI=\" title=\"https://en.wikipedia.org/wiki/John_Gruber\">존 그루버<i class=\"fa fa-external-link\"></i></span>가 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rby53aWtpcGVkaWEub3JnL3dpa2kvJUVDJTk3JTkwJUVCJTlGJUIwXyVFQyU4QSVBNCVFQyU5QiU4QyVFQyVCOCVBMA==\" title=\"https://ko.wikipedia.org/wiki/%EC%97%90%EB%9F%B0_%EC%8A%A4%EC%9B%8C%EC%B8%A0\">에런 스위츠<i class=\"fa fa-external-link\"></i></span>와 협업하여 만든 언어입니다.<br>특수기호와 문자를 이용하는 비교적 매우 간단한 문법 구조로 빠르게 컨텐츠를 작성할 수 있고 보다 직관적으로 이해할 수 있습니다.</p>\n<p>이해를 돕기 위해 일상에서 자주 사용되는 예를 들어보겠습니다.</p>\n<ul>\n<li>SNS의 태그 기능 ex) 페이스북, 인스타그램</li>\n<li>깃허브 README.md 등…</li>\n</ul>\n<p>맨 처음 언급한 위키피디아 내용처럼 마크다운 언어는 마크업 언어를 <strong>좀 더 직관적이고 간결하게 문서를 작성하게 해주는 언어</strong>입니다.</p>\n<h2 id=\"마크다운의-장-단점\"><a href=\"#마크다운의-장-단점\" class=\"headerlink\" title=\"마크다운의 장-단점\"></a>마크다운의 장-단점</h2><h3 id=\"장점\"><a href=\"#장점\" class=\"headerlink\" title=\"장점\"></a>장점</h3><pre><code>1. 간결하다.\n2. 별도의 도구없이 작성가능하다.\n3. 다양한 형태로 변환이 가능하다.\n3. 텍스트(Text)로 저장되기 때문에 용량이 적어 보관이 용이하다.\n4. 텍스트파일이기 때문에 버전관리시스템을 이용하여 변경이력을 관리할 수 있다.\n5. 지원하는 프로그램과 플랫폼이 다양하다.</code></pre><h3 id=\"단점\"><a href=\"#단점\" class=\"headerlink\" title=\"단점\"></a>단점</h3><pre><code>1. 표준이 없다.\n2. 표준이 없기 때문에 도구에 따라서 변환방식이나 생성물이 다르다.\n3. 모든 HTML 마크업을 대신하지 못한다.</code></pre><h2 id=\"참조\"><a href=\"#참조\" class=\"headerlink\" title=\"참조 :\"></a>참조 :</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9icnVuY2guY28ua3IvQGNvdmVyeW91LzE0\" title=\"https://brunch.co.kr/@coveryou/14\">https://brunch.co.kr/@coveryou/14<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb3JkZWxpYTI3My5zcGFjZS8xNQ==\" title=\"https://cordelia273.space/15\">https://cordelia273.space/15<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<p><br><br><br></p>\n"},{"title":"Spring 개요","author":{"nick":"TAEJIN","link":"https://www.github.com/taejin0323"},"date":"2019-01-22T08:30:00.000Z","subtitle":"스프링에 대해 알아보고 정리한 내용","cover":"https://spring.io/img/spring-by-pivotal.png","_content":"\n> 가장 좋은 문서는 spring.io 공식 홈페이지에서 제공하는 documents 입니다. 개인적으로 공부하면서 작성하는 문서라 틀린 부분이 있을 수 있으니, 반드시 공식 문서를 참조하시기 바랍니다.\n>\n> > [스프링 공식 홈페이지](https://spring.io)\n> > [소스코드](https://github.com/spring-projects)\n> > [가이드](https://spring.io/guides)\n\n------\n\n### 1. 스프링\n\n공식 홈페이지 첫 화면을 보면 <u>Spring : the source for modern java</u> 라고 적혀있습니다.\n\n이 문장만으로는 이해하기 어려워서 구글에 검색을 해도 우리나라에서는 스프링하면 <u>스프링 프레임워크(Spring framework)</u>를 주로 이야기해서 스프링의 정의에 대해 다루는 자료는 그렇게 많지 않았습니다.\n\n그럼에도 스프링이란 무엇인지 명확하게 짚고 넘어가는 것이 좋을 것 같습니다.\n\n**스프링(Spring)** 은\n\n<div style=\"border:3px; border-style:dashed; color:grey; text-align:center\">\n  <br>자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크<br><br>\n</div>\n\n라는 정의를 가지고 있습니다.\n\n 얼핏 보면 감이 잘 안 잡히기 때문에 시간을 내셔서 제가 참조했던 '12bme'님의 포스트[^1] 를 자세히 읽어보시고 이해하시면 좋을 것 같습니다.\n\n 또한 공식 홈페이지에 따르면 Spring 개발진의 철학이 Rod Johnson이 2002년 10월에 출판한 'Expert One-on-One J2EE Design and Develpment'에 요약되어 있다고 하니 여유가 있다면 한번 읽어보면 깊은 이해를 하는데 도움이 될 것 같습니다.\n\n\n\n스프링 개발진의 **목표(Aim)** 로는,\n\n- 스프링은 사용하기 즐거워야 하고\n- 여러분의 애플리케이션 코드가 스프링 API들에 의존해서는 안되며\n- JDO, Toplink, Hibernate와 같은 훌륭한 O/R mapping solution들과 경쟁하지 않지만, 통합을 촉진하는 것 입니다.\n\n\n\n 또한 공식 홈페이지에서 **PROJECTS** 탭을 보면 스프링을 활용한 다양한 프로젝트들을 보실 수 있습니다.\n\n- Spring Boot\n- Spring Framework\n- Spring Cloud\n- Etc ...\n\n\n\n이처럼 스프링은 <u>어디서나 간단하고, 이식하기 쉬우며, 신속하고, 유연하게 JVM 기반의 시스템과 애플리케이션을 구축</u>할 수 있어  ==다양한 프로젝트들의 디자인이 되는 모듈==이라고 생각할 수 있습니다.\n\n\n\n[^1]: [스프링이란 무엇인가? - 12bme](https://12bme.tistory.com/157)\n\n\n\n### 2. 스프링 프레임워크란\n\n 위에서 언급한 12bme님의 포스트를 보셨으면 쉽게 이해하시겠지만, *엔터프라이즈 애플리케이션* 개발이 어려운 이유는 사회가 점점 복잡해지고, 시스템에서 다루어야 하는 업무의 복잡도와 의존도가 높아져 <u>개발의 복잡성이 증가</u>했기 때문입니다. 이에 사용자의 요구를 빠르고 안정적이면서 확장 가능한 형태로 유지가히 위한 로우레벨(Low level) 수준의 기술적 처리가 필요해졌고 우리는 스프링 프레임워크를 통해 쉽게 자바 엔터프라이즈 애플리케이션을 개발할 수 있게 되었습니다.\n\n\n\n![history](/img/history.png)\n\n 2004년 3월 Spring Framework 1.0 버전을 시작으로, 포스트 작성일 기준(2019년 1월) Spring Framework는 5.1.4 버전이 최신 버전입니다.\n\n\n\n 짧게 스프링(Spring)이라고 불리는 스프링 프레임워크는 **모든 플랫폼에서 자바 기반 엔터프라이즈 애플리케이션(JAVA EE) 개발을 편하게 해주는 종합적인 프로그래밍 및 구성 모델을 제공**합니다.\n\n\n\n 프레임워크의 바탕인 *스프링* 의 핵심 요소가 <u>애플리케이션 수준에서의 인프라 지원</u>이기 때문에 스프링 프레임워크에서는 개발 환경 구축에 필요한 하부구조(Infrastructure)를 포괄적으로 제공하고 처리하기 때문에 <u>개발자는 애플리케이션 개발(plumbing[^2])에 집중</u>할 수 있게 되었습니다.\n\n![plumbing](https://www.jbrothershi.com/wp-content/uploads/2018/10/SpringPlumbingLogo.png)\n\n 참고로 스프링 프레임워크는 대한민국 공공기관의 웹 서비스 개발 시 사용을 권장하고 있는 전자 정부 표준 프레임워크의 기반 기술입니다.\n\n[^2]: 원문에는 plumbing이라는 단어로 표현하는데, 프레임워크가 부품들 다 만들어 놓으면 개발자는 그것들을 조립하는 느낌이라 이런 단어를 사용한 것 같습니다.\n\n<br><br><br>\n","source":"_posts/20190122-spring.md","raw":"---\ntitle: Spring 개요\nauthor:\n  nick: TAEJIN  \n  link: https://www.github.com/taejin0323\ncategories:\n  - WEB\n  - SPRING\ntags:\n  - spring\n  - 스프링\ndate: 2019-01-22 17:30:00\nsubtitle: 스프링에 대해 알아보고 정리한 내용\ncover: https://spring.io/img/spring-by-pivotal.png\n\n---\n\n> 가장 좋은 문서는 spring.io 공식 홈페이지에서 제공하는 documents 입니다. 개인적으로 공부하면서 작성하는 문서라 틀린 부분이 있을 수 있으니, 반드시 공식 문서를 참조하시기 바랍니다.\n>\n> > [스프링 공식 홈페이지](https://spring.io)\n> > [소스코드](https://github.com/spring-projects)\n> > [가이드](https://spring.io/guides)\n\n------\n\n### 1. 스프링\n\n공식 홈페이지 첫 화면을 보면 <u>Spring : the source for modern java</u> 라고 적혀있습니다.\n\n이 문장만으로는 이해하기 어려워서 구글에 검색을 해도 우리나라에서는 스프링하면 <u>스프링 프레임워크(Spring framework)</u>를 주로 이야기해서 스프링의 정의에 대해 다루는 자료는 그렇게 많지 않았습니다.\n\n그럼에도 스프링이란 무엇인지 명확하게 짚고 넘어가는 것이 좋을 것 같습니다.\n\n**스프링(Spring)** 은\n\n<div style=\"border:3px; border-style:dashed; color:grey; text-align:center\">\n  <br>자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크<br><br>\n</div>\n\n라는 정의를 가지고 있습니다.\n\n 얼핏 보면 감이 잘 안 잡히기 때문에 시간을 내셔서 제가 참조했던 '12bme'님의 포스트[^1] 를 자세히 읽어보시고 이해하시면 좋을 것 같습니다.\n\n 또한 공식 홈페이지에 따르면 Spring 개발진의 철학이 Rod Johnson이 2002년 10월에 출판한 'Expert One-on-One J2EE Design and Develpment'에 요약되어 있다고 하니 여유가 있다면 한번 읽어보면 깊은 이해를 하는데 도움이 될 것 같습니다.\n\n\n\n스프링 개발진의 **목표(Aim)** 로는,\n\n- 스프링은 사용하기 즐거워야 하고\n- 여러분의 애플리케이션 코드가 스프링 API들에 의존해서는 안되며\n- JDO, Toplink, Hibernate와 같은 훌륭한 O/R mapping solution들과 경쟁하지 않지만, 통합을 촉진하는 것 입니다.\n\n\n\n 또한 공식 홈페이지에서 **PROJECTS** 탭을 보면 스프링을 활용한 다양한 프로젝트들을 보실 수 있습니다.\n\n- Spring Boot\n- Spring Framework\n- Spring Cloud\n- Etc ...\n\n\n\n이처럼 스프링은 <u>어디서나 간단하고, 이식하기 쉬우며, 신속하고, 유연하게 JVM 기반의 시스템과 애플리케이션을 구축</u>할 수 있어  ==다양한 프로젝트들의 디자인이 되는 모듈==이라고 생각할 수 있습니다.\n\n\n\n[^1]: [스프링이란 무엇인가? - 12bme](https://12bme.tistory.com/157)\n\n\n\n### 2. 스프링 프레임워크란\n\n 위에서 언급한 12bme님의 포스트를 보셨으면 쉽게 이해하시겠지만, *엔터프라이즈 애플리케이션* 개발이 어려운 이유는 사회가 점점 복잡해지고, 시스템에서 다루어야 하는 업무의 복잡도와 의존도가 높아져 <u>개발의 복잡성이 증가</u>했기 때문입니다. 이에 사용자의 요구를 빠르고 안정적이면서 확장 가능한 형태로 유지가히 위한 로우레벨(Low level) 수준의 기술적 처리가 필요해졌고 우리는 스프링 프레임워크를 통해 쉽게 자바 엔터프라이즈 애플리케이션을 개발할 수 있게 되었습니다.\n\n\n\n![history](/img/history.png)\n\n 2004년 3월 Spring Framework 1.0 버전을 시작으로, 포스트 작성일 기준(2019년 1월) Spring Framework는 5.1.4 버전이 최신 버전입니다.\n\n\n\n 짧게 스프링(Spring)이라고 불리는 스프링 프레임워크는 **모든 플랫폼에서 자바 기반 엔터프라이즈 애플리케이션(JAVA EE) 개발을 편하게 해주는 종합적인 프로그래밍 및 구성 모델을 제공**합니다.\n\n\n\n 프레임워크의 바탕인 *스프링* 의 핵심 요소가 <u>애플리케이션 수준에서의 인프라 지원</u>이기 때문에 스프링 프레임워크에서는 개발 환경 구축에 필요한 하부구조(Infrastructure)를 포괄적으로 제공하고 처리하기 때문에 <u>개발자는 애플리케이션 개발(plumbing[^2])에 집중</u>할 수 있게 되었습니다.\n\n![plumbing](https://www.jbrothershi.com/wp-content/uploads/2018/10/SpringPlumbingLogo.png)\n\n 참고로 스프링 프레임워크는 대한민국 공공기관의 웹 서비스 개발 시 사용을 권장하고 있는 전자 정부 표준 프레임워크의 기반 기술입니다.\n\n[^2]: 원문에는 plumbing이라는 단어로 표현하는데, 프레임워크가 부품들 다 만들어 놓으면 개발자는 그것들을 조립하는 느낌이라 이런 단어를 사용한 것 같습니다.\n\n<br><br><br>\n","slug":"spring","published":1,"updated":"2019-07-16T13:50:22.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt7pw00062646pbtce6gs","content":"<blockquote>\n<p>가장 좋은 문서는 spring.io 공식 홈페이지에서 제공하는 documents 입니다. 개인적으로 공부하면서 작성하는 문서라 틀린 부분이 있을 수 있으니, 반드시 공식 문서를 참조하시기 바랍니다.</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8=\" title=\"https://spring.io\">스프링 공식 홈페이지<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cw==\" title=\"https://github.com/spring-projects\">소스코드<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vZ3VpZGVz\" title=\"https://spring.io/guides\">가이드<i class=\"fa fa-external-link\"></i></span></p>\n</blockquote>\n</blockquote>\n<hr>\n<h3 id=\"1-스프링\"><a href=\"#1-스프링\" class=\"headerlink\" title=\"1. 스프링\"></a>1. 스프링</h3><p>공식 홈페이지 첫 화면을 보면 <u>Spring : the source for modern java</u> 라고 적혀있습니다.</p>\n<p>이 문장만으로는 이해하기 어려워서 구글에 검색을 해도 우리나라에서는 스프링하면 <u>스프링 프레임워크(Spring framework)</u>를 주로 이야기해서 스프링의 정의에 대해 다루는 자료는 그렇게 많지 않았습니다.</p>\n<p>그럼에도 스프링이란 무엇인지 명확하게 짚고 넘어가는 것이 좋을 것 같습니다.</p>\n<p><strong>스프링(Spring)</strong> 은</p>\n<div style=\"border:3px; border-style:dashed; color:grey; text-align:center\">\n  <br>자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크<br><br>\n</div>\n\n<p>라는 정의를 가지고 있습니다.</p>\n<p> 얼핏 보면 감이 잘 안 잡히기 때문에 시간을 내셔서 제가 참조했던 ‘12bme’님의 포스트[^1] 를 자세히 읽어보시고 이해하시면 좋을 것 같습니다.</p>\n<p> 또한 공식 홈페이지에 따르면 Spring 개발진의 철학이 Rod Johnson이 2002년 10월에 출판한 ‘Expert One-on-One J2EE Design and Develpment’에 요약되어 있다고 하니 여유가 있다면 한번 읽어보면 깊은 이해를 하는데 도움이 될 것 같습니다.</p>\n<p>스프링 개발진의 <strong>목표(Aim)</strong> 로는,</p>\n<ul>\n<li>스프링은 사용하기 즐거워야 하고</li>\n<li>여러분의 애플리케이션 코드가 스프링 API들에 의존해서는 안되며</li>\n<li>JDO, Toplink, Hibernate와 같은 훌륭한 O/R mapping solution들과 경쟁하지 않지만, 통합을 촉진하는 것 입니다.</li>\n</ul>\n<p> 또한 공식 홈페이지에서 <strong>PROJECTS</strong> 탭을 보면 스프링을 활용한 다양한 프로젝트들을 보실 수 있습니다.</p>\n<ul>\n<li>Spring Boot</li>\n<li>Spring Framework</li>\n<li>Spring Cloud</li>\n<li>Etc …</li>\n</ul>\n<p>이처럼 스프링은 <u>어디서나 간단하고, 이식하기 쉬우며, 신속하고, 유연하게 JVM 기반의 시스템과 애플리케이션을 구축</u>할 수 있어  ==다양한 프로젝트들의 디자인이 되는 모듈==이라고 생각할 수 있습니다.</p>\n<p>[^1]: <span class=\"exturl\" data-url=\"aHR0cHM6Ly8xMmJtZS50aXN0b3J5LmNvbS8xNTc=\" title=\"https://12bme.tistory.com/157\">스프링이란 무엇인가? - 12bme<i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"2-스프링-프레임워크란\"><a href=\"#2-스프링-프레임워크란\" class=\"headerlink\" title=\"2. 스프링 프레임워크란\"></a>2. 스프링 프레임워크란</h3><p> 위에서 언급한 12bme님의 포스트를 보셨으면 쉽게 이해하시겠지만, <em>엔터프라이즈 애플리케이션</em> 개발이 어려운 이유는 사회가 점점 복잡해지고, 시스템에서 다루어야 하는 업무의 복잡도와 의존도가 높아져 <u>개발의 복잡성이 증가</u>했기 때문입니다. 이에 사용자의 요구를 빠르고 안정적이면서 확장 가능한 형태로 유지가히 위한 로우레벨(Low level) 수준의 기술적 처리가 필요해졌고 우리는 스프링 프레임워크를 통해 쉽게 자바 엔터프라이즈 애플리케이션을 개발할 수 있게 되었습니다.</p>\n<p><img alt=\"history\" data-src=\"/img/history.png\"></p>\n<p> 2004년 3월 Spring Framework 1.0 버전을 시작으로, 포스트 작성일 기준(2019년 1월) Spring Framework는 5.1.4 버전이 최신 버전입니다.</p>\n<p> 짧게 스프링(Spring)이라고 불리는 스프링 프레임워크는 <strong>모든 플랫폼에서 자바 기반 엔터프라이즈 애플리케이션(JAVA EE) 개발을 편하게 해주는 종합적인 프로그래밍 및 구성 모델을 제공</strong>합니다.</p>\n<p> 프레임워크의 바탕인 <em>스프링</em> 의 핵심 요소가 <u>애플리케이션 수준에서의 인프라 지원</u>이기 때문에 스프링 프레임워크에서는 개발 환경 구축에 필요한 하부구조(Infrastructure)를 포괄적으로 제공하고 처리하기 때문에 <u>개발자는 애플리케이션 개발(plumbing[^2])에 집중</u>할 수 있게 되었습니다.</p>\n<p><img alt=\"plumbing\" data-src=\"https://www.jbrothershi.com/wp-content/uploads/2018/10/SpringPlumbingLogo.png\"></p>\n<p> 참고로 스프링 프레임워크는 대한민국 공공기관의 웹 서비스 개발 시 사용을 권장하고 있는 전자 정부 표준 프레임워크의 기반 기술입니다.</p>\n<p>[^2]: 원문에는 plumbing이라는 단어로 표현하는데, 프레임워크가 부품들 다 만들어 놓으면 개발자는 그것들을 조립하는 느낌이라 이런 단어를 사용한 것 같습니다.</p>\n<p><br><br><br></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>가장 좋은 문서는 spring.io 공식 홈페이지에서 제공하는 documents 입니다. 개인적으로 공부하면서 작성하는 문서라 틀린 부분이 있을 수 있으니, 반드시 공식 문서를 참조하시기 바랍니다.</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8=\" title=\"https://spring.io\">스프링 공식 홈페이지<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cw==\" title=\"https://github.com/spring-projects\">소스코드<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vZ3VpZGVz\" title=\"https://spring.io/guides\">가이드<i class=\"fa fa-external-link\"></i></span></p>\n</blockquote>\n</blockquote>\n<hr>\n<h3 id=\"1-스프링\"><a href=\"#1-스프링\" class=\"headerlink\" title=\"1. 스프링\"></a>1. 스프링</h3><p>공식 홈페이지 첫 화면을 보면 <u>Spring : the source for modern java</u> 라고 적혀있습니다.</p>\n<p>이 문장만으로는 이해하기 어려워서 구글에 검색을 해도 우리나라에서는 스프링하면 <u>스프링 프레임워크(Spring framework)</u>를 주로 이야기해서 스프링의 정의에 대해 다루는 자료는 그렇게 많지 않았습니다.</p>\n<p>그럼에도 스프링이란 무엇인지 명확하게 짚고 넘어가는 것이 좋을 것 같습니다.</p>\n<p><strong>스프링(Spring)</strong> 은</p>\n<div style=\"border:3px; border-style:dashed; color:grey; text-align:center\">\n  <br>자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크<br><br>\n</div>\n\n<p>라는 정의를 가지고 있습니다.</p>\n<p> 얼핏 보면 감이 잘 안 잡히기 때문에 시간을 내셔서 제가 참조했던 ‘12bme’님의 포스트[^1] 를 자세히 읽어보시고 이해하시면 좋을 것 같습니다.</p>\n<p> 또한 공식 홈페이지에 따르면 Spring 개발진의 철학이 Rod Johnson이 2002년 10월에 출판한 ‘Expert One-on-One J2EE Design and Develpment’에 요약되어 있다고 하니 여유가 있다면 한번 읽어보면 깊은 이해를 하는데 도움이 될 것 같습니다.</p>\n<p>스프링 개발진의 <strong>목표(Aim)</strong> 로는,</p>\n<ul>\n<li>스프링은 사용하기 즐거워야 하고</li>\n<li>여러분의 애플리케이션 코드가 스프링 API들에 의존해서는 안되며</li>\n<li>JDO, Toplink, Hibernate와 같은 훌륭한 O/R mapping solution들과 경쟁하지 않지만, 통합을 촉진하는 것 입니다.</li>\n</ul>\n<p> 또한 공식 홈페이지에서 <strong>PROJECTS</strong> 탭을 보면 스프링을 활용한 다양한 프로젝트들을 보실 수 있습니다.</p>\n<ul>\n<li>Spring Boot</li>\n<li>Spring Framework</li>\n<li>Spring Cloud</li>\n<li>Etc …</li>\n</ul>\n<p>이처럼 스프링은 <u>어디서나 간단하고, 이식하기 쉬우며, 신속하고, 유연하게 JVM 기반의 시스템과 애플리케이션을 구축</u>할 수 있어  ==다양한 프로젝트들의 디자인이 되는 모듈==이라고 생각할 수 있습니다.</p>\n<p>[^1]: <span class=\"exturl\" data-url=\"aHR0cHM6Ly8xMmJtZS50aXN0b3J5LmNvbS8xNTc=\" title=\"https://12bme.tistory.com/157\">스프링이란 무엇인가? - 12bme<i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"2-스프링-프레임워크란\"><a href=\"#2-스프링-프레임워크란\" class=\"headerlink\" title=\"2. 스프링 프레임워크란\"></a>2. 스프링 프레임워크란</h3><p> 위에서 언급한 12bme님의 포스트를 보셨으면 쉽게 이해하시겠지만, <em>엔터프라이즈 애플리케이션</em> 개발이 어려운 이유는 사회가 점점 복잡해지고, 시스템에서 다루어야 하는 업무의 복잡도와 의존도가 높아져 <u>개발의 복잡성이 증가</u>했기 때문입니다. 이에 사용자의 요구를 빠르고 안정적이면서 확장 가능한 형태로 유지가히 위한 로우레벨(Low level) 수준의 기술적 처리가 필요해졌고 우리는 스프링 프레임워크를 통해 쉽게 자바 엔터프라이즈 애플리케이션을 개발할 수 있게 되었습니다.</p>\n<p><img alt=\"history\" data-src=\"/img/history.png\"></p>\n<p> 2004년 3월 Spring Framework 1.0 버전을 시작으로, 포스트 작성일 기준(2019년 1월) Spring Framework는 5.1.4 버전이 최신 버전입니다.</p>\n<p> 짧게 스프링(Spring)이라고 불리는 스프링 프레임워크는 <strong>모든 플랫폼에서 자바 기반 엔터프라이즈 애플리케이션(JAVA EE) 개발을 편하게 해주는 종합적인 프로그래밍 및 구성 모델을 제공</strong>합니다.</p>\n<p> 프레임워크의 바탕인 <em>스프링</em> 의 핵심 요소가 <u>애플리케이션 수준에서의 인프라 지원</u>이기 때문에 스프링 프레임워크에서는 개발 환경 구축에 필요한 하부구조(Infrastructure)를 포괄적으로 제공하고 처리하기 때문에 <u>개발자는 애플리케이션 개발(plumbing[^2])에 집중</u>할 수 있게 되었습니다.</p>\n<p><img alt=\"plumbing\" data-src=\"https://www.jbrothershi.com/wp-content/uploads/2018/10/SpringPlumbingLogo.png\"></p>\n<p> 참고로 스프링 프레임워크는 대한민국 공공기관의 웹 서비스 개발 시 사용을 권장하고 있는 전자 정부 표준 프레임워크의 기반 기술입니다.</p>\n<p>[^2]: 원문에는 plumbing이라는 단어로 표현하는데, 프레임워크가 부품들 다 만들어 놓으면 개발자는 그것들을 조립하는 느낌이라 이런 단어를 사용한 것 같습니다.</p>\n<p><br><br><br></p>\n"},{"title":"CDA 란?","author":{"nick":"TAEJIN","link":"https://www.github.com/taejin0323"},"subtitle":"19.01.17 내용 복습","cover":"https://images.slideplayer.com/25/7958574/slides/slide_1.jpg","date":"2019-01-19T10:07:59.000Z","_content":"\n### Related Post\n\n------\n\n> 본 문서는 IHIS 연구소의 **'HL7 Clinical Document Architecture Release 2'** pdf 문서를 기반으로 작성 되었습니다.\n\n------\n\n# CDA 개요\n\n@[toc]\n\n## 1.  CDA의 정의(Definition)\n\n정식 명칭은 <span style=\"color:blue\">The HL7 **Clinical Document Architecture (CDA)**</span>로\n**\"공유 목적으로 하는 임상 문서(clinical document)의 구조와 의미를 명시하는 문서 표기(Markup)의 표준\"** 이라고 정의 되어있다.\n\n <div style=\"font-size:small\">임상문서는 의사가 환자를 진료 후 진단된 병명 및 진료내역 등을 기술하고 투약, 주요 실시검사 내용 등 주요 진료결과를 포함하는 문서이다.\n    <div style=\"border:1px solid; padding:10px; box-sizing: border-box;\"><b>임상 문서(Clinical document)</b>는 <u>다음과 같은 특성</u>을 가진다 :\n        <pre>\n    - <strong>Persistence (존속성)</strong>\n    &emsp;- 문서는 지역 및 규제 요건에 의해 정의된 기간 동안 변경되지 않은 상태로 계속 존재한다.\n    - <strong>Stewardship (관리 책임)</strong>\n    &emsp;- 문서는  그 관리를 위임받은 기관에 의해 보존된다.\n    - <strong>Potential for authentication (인증가능성)</strong>\n    &emsp;- 문서는 합법적으로 인증받고자 하는 정보의 집합물이다.\n    - <strong>Context (문맥))</strong>\n    &emsp;- 임상 문서에 대한 기본 맥락(default context)를 설정한다.\n    - <strong>Wholeness (전체성)</strong>\n    &emsp;- 문서의 인증은 전체적으로 적용되며 문서 전체 맥락(context)이 없는 부분에는 적용되지 않는다.\n    - <strong>Human readability (가독성)</strong>\n    &emsp;- 사람이 읽을 수 있어야 한다.</pre>\n    </div>\n </div>\n\n## 2. CDA의 주요 특성(Key aspects)\n\n- <span style=\"color:green;\">Extensible Markup Language **(XML)**</span>로 인코딩 된다.\n- <span style=\"color:green;\">HL7 Reference Information Model(이하 RIM)</span>로부터 기계처리적 의미가 유도되고 <span style=\"color:green;\">HL7의 버전 3 데이터 타입</span>을 사용한다\n- 표현력이 풍부하고 유연하다.\n  - <span style=\"color:green;\">document 레벨, section 레벨, entry 레벨의 템플릿</span>은 일반적인 CDA 명세를 통제하기 위해 사용될 수 있다\n\n## 3. CDA의 목표\n\n- 환자의 보호에 우선권을 둔다.\n- 가능한 광범위한 시스템에서 사용이 가능하도록 하면서 비용이 효율적이게 구현한다.\n- 전문 지식의 수준이 다른 사용자들도 판독이 가능하도록 지원한다.\n- 인코딩된 정보가 오래 유지되도록 한다.\n- 합리적이고 빠르게 디자인이 되도록 한다.\n\n## 4. CDA Document의 주요 요소들\n\n![CDA document](/img/componentsOfCDA.png)\n\n- **The Header**\n  - &lt;ClinicalDocument&gt; 태그와 &lt;structuredBody&gt; 태그 사이에 있다\n  - 문서를 확인하고 분류하며 ==인증, 진료, 환자, 관련된 제공자들의 정보==를 담는다.\n- **The Body**\n  - 진료 보고서(clinical report)를 담고 있다.\n  - 1)비정형화(unstructured blob) 또는,\n    2)정형화된 표기(structured markup) 둘 중 하나이다.\n  - 위 예제는 &lt;structuredBody&gt; 태그로 정형화된 구조이고, document section이 되풀이해서 올 수 있는 recursive 구조이다.\n\n## 5. CDA \"levels\"\n\n> PDF 문서에서 이 부분은 표 하나만 있어서 추가 자료 조사를 통해 작성하였습니다. 따라서 부족한 본인이 작성했기에 잘못된 내용이 있을 수도 있습니다.\n\n<table>\n    <colgroup>\n    \t<col width=\"20%\" />\n        <col width=\"80%\" />\n    </colgroup>\n    <thead>\n    <tr>\n        <th>CDA, Release One</th>\n        <th>CDA, Release Two</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n    \t<td>CDA Level One</td>\n        <td>The unconstrained CDA specification.\n        규제되지 않은 CDA 규정</td>\n    </tr>\n    <tr>\n    \t<td>CDA Level Two</td>\n        <td>The CDA specification with section-level templates applied.\n        색션 레벨의 템플릿을 적용한 CDA 규정</td>\n    </tr>\n    <tr>\n    \t<td>CDA Level Three</td>\n        <td>The CDA specification with entry-level (and optionally section-level) templates applied.\n            엔트리 레벨(선택적 색션 레벨) 템플릿을 적용한 CDA 규정</td>\n    </tr>\n    </tbody>\n</table>\n\n- CDA는 2가지 버전이 있다\n\n  - 첫 번째 버전(Release One)에서는 단순 CDA 설계의 목표를 달성하기 위한 *XML DTDs* 또는 *XML Schemas* 계층구조를 세 단계(level)로 나눈 것이다.\n  ![CDA level](http://iehr.eu/wp-content/uploads/2015/11/cda_levels.png)\n\n  - 두 번째 버전(Release Two)에서는 하나의 CDA XML Schema로 이루어지고, HL7 templates들을 계층적으로 적용해 나가는 구조이다.\n  ![CDA Release2](https://slideplayer.com/slide/3227951/11/images/18/CDA+Clinical+Document+Architecture+Document+Hierarchy.jpg)\n\n\n\n## 6. 보안성, 기고성, 데이터 무경성\n\n- CDA 문서를 보내고 받는 <u>애플리케이션 시스템</u>은\n  - 문서 인증, 기밀 유지 및 보존에 대한 모든 법적 요구 사항을 충족해야한다.\n  - 대중 매체를 통한 통신의 경우, 송신자(source)/수신자(recipient) 인증 및 캡슐화(요약)된 문서의 안전한 전송을 취한 암호화 기술이 요구될 수 있으므로 표준의 범위를 벗어나는 상용 도구로 해결 해야한다.\n    <br>\n- <u>CDA</u>는\n  - 애플리케이션 시스템이 중요한 데이터에 대한 접근을 관리하는데 도움이 되는 기밀성 상태 정보를 제공한다. 기밀성 상태(confidentiality status)는 전체 문서 또는 문서의 특정 부분에 적용될 수 있다.\n\n<br><br><br>\n","source":"_posts/20190119-cda-tutorial.md","raw":"---\ntitle: CDA 란?\nauthor:\n  nick: TAEJIN\n  link: https://www.github.com/taejin0323\nsubtitle: 19.01.17 내용 복습\ncategories:\n  - IHIS\n  - HL7\ntags:\n  - HL7\n  - CDA\ncover: 'https://images.slideplayer.com/25/7958574/slides/slide_1.jpg'\ndate: 2019-01-19 19:07:59\n\n---\n\n### Related Post\n\n------\n\n> 본 문서는 IHIS 연구소의 **'HL7 Clinical Document Architecture Release 2'** pdf 문서를 기반으로 작성 되었습니다.\n\n------\n\n# CDA 개요\n\n@[toc]\n\n## 1.  CDA의 정의(Definition)\n\n정식 명칭은 <span style=\"color:blue\">The HL7 **Clinical Document Architecture (CDA)**</span>로\n**\"공유 목적으로 하는 임상 문서(clinical document)의 구조와 의미를 명시하는 문서 표기(Markup)의 표준\"** 이라고 정의 되어있다.\n\n <div style=\"font-size:small\">임상문서는 의사가 환자를 진료 후 진단된 병명 및 진료내역 등을 기술하고 투약, 주요 실시검사 내용 등 주요 진료결과를 포함하는 문서이다.\n    <div style=\"border:1px solid; padding:10px; box-sizing: border-box;\"><b>임상 문서(Clinical document)</b>는 <u>다음과 같은 특성</u>을 가진다 :\n        <pre>\n    - <strong>Persistence (존속성)</strong>\n    &emsp;- 문서는 지역 및 규제 요건에 의해 정의된 기간 동안 변경되지 않은 상태로 계속 존재한다.\n    - <strong>Stewardship (관리 책임)</strong>\n    &emsp;- 문서는  그 관리를 위임받은 기관에 의해 보존된다.\n    - <strong>Potential for authentication (인증가능성)</strong>\n    &emsp;- 문서는 합법적으로 인증받고자 하는 정보의 집합물이다.\n    - <strong>Context (문맥))</strong>\n    &emsp;- 임상 문서에 대한 기본 맥락(default context)를 설정한다.\n    - <strong>Wholeness (전체성)</strong>\n    &emsp;- 문서의 인증은 전체적으로 적용되며 문서 전체 맥락(context)이 없는 부분에는 적용되지 않는다.\n    - <strong>Human readability (가독성)</strong>\n    &emsp;- 사람이 읽을 수 있어야 한다.</pre>\n    </div>\n </div>\n\n## 2. CDA의 주요 특성(Key aspects)\n\n- <span style=\"color:green;\">Extensible Markup Language **(XML)**</span>로 인코딩 된다.\n- <span style=\"color:green;\">HL7 Reference Information Model(이하 RIM)</span>로부터 기계처리적 의미가 유도되고 <span style=\"color:green;\">HL7의 버전 3 데이터 타입</span>을 사용한다\n- 표현력이 풍부하고 유연하다.\n  - <span style=\"color:green;\">document 레벨, section 레벨, entry 레벨의 템플릿</span>은 일반적인 CDA 명세를 통제하기 위해 사용될 수 있다\n\n## 3. CDA의 목표\n\n- 환자의 보호에 우선권을 둔다.\n- 가능한 광범위한 시스템에서 사용이 가능하도록 하면서 비용이 효율적이게 구현한다.\n- 전문 지식의 수준이 다른 사용자들도 판독이 가능하도록 지원한다.\n- 인코딩된 정보가 오래 유지되도록 한다.\n- 합리적이고 빠르게 디자인이 되도록 한다.\n\n## 4. CDA Document의 주요 요소들\n\n![CDA document](/img/componentsOfCDA.png)\n\n- **The Header**\n  - &lt;ClinicalDocument&gt; 태그와 &lt;structuredBody&gt; 태그 사이에 있다\n  - 문서를 확인하고 분류하며 ==인증, 진료, 환자, 관련된 제공자들의 정보==를 담는다.\n- **The Body**\n  - 진료 보고서(clinical report)를 담고 있다.\n  - 1)비정형화(unstructured blob) 또는,\n    2)정형화된 표기(structured markup) 둘 중 하나이다.\n  - 위 예제는 &lt;structuredBody&gt; 태그로 정형화된 구조이고, document section이 되풀이해서 올 수 있는 recursive 구조이다.\n\n## 5. CDA \"levels\"\n\n> PDF 문서에서 이 부분은 표 하나만 있어서 추가 자료 조사를 통해 작성하였습니다. 따라서 부족한 본인이 작성했기에 잘못된 내용이 있을 수도 있습니다.\n\n<table>\n    <colgroup>\n    \t<col width=\"20%\" />\n        <col width=\"80%\" />\n    </colgroup>\n    <thead>\n    <tr>\n        <th>CDA, Release One</th>\n        <th>CDA, Release Two</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n    \t<td>CDA Level One</td>\n        <td>The unconstrained CDA specification.\n        규제되지 않은 CDA 규정</td>\n    </tr>\n    <tr>\n    \t<td>CDA Level Two</td>\n        <td>The CDA specification with section-level templates applied.\n        색션 레벨의 템플릿을 적용한 CDA 규정</td>\n    </tr>\n    <tr>\n    \t<td>CDA Level Three</td>\n        <td>The CDA specification with entry-level (and optionally section-level) templates applied.\n            엔트리 레벨(선택적 색션 레벨) 템플릿을 적용한 CDA 규정</td>\n    </tr>\n    </tbody>\n</table>\n\n- CDA는 2가지 버전이 있다\n\n  - 첫 번째 버전(Release One)에서는 단순 CDA 설계의 목표를 달성하기 위한 *XML DTDs* 또는 *XML Schemas* 계층구조를 세 단계(level)로 나눈 것이다.\n  ![CDA level](http://iehr.eu/wp-content/uploads/2015/11/cda_levels.png)\n\n  - 두 번째 버전(Release Two)에서는 하나의 CDA XML Schema로 이루어지고, HL7 templates들을 계층적으로 적용해 나가는 구조이다.\n  ![CDA Release2](https://slideplayer.com/slide/3227951/11/images/18/CDA+Clinical+Document+Architecture+Document+Hierarchy.jpg)\n\n\n\n## 6. 보안성, 기고성, 데이터 무경성\n\n- CDA 문서를 보내고 받는 <u>애플리케이션 시스템</u>은\n  - 문서 인증, 기밀 유지 및 보존에 대한 모든 법적 요구 사항을 충족해야한다.\n  - 대중 매체를 통한 통신의 경우, 송신자(source)/수신자(recipient) 인증 및 캡슐화(요약)된 문서의 안전한 전송을 취한 암호화 기술이 요구될 수 있으므로 표준의 범위를 벗어나는 상용 도구로 해결 해야한다.\n    <br>\n- <u>CDA</u>는\n  - 애플리케이션 시스템이 중요한 데이터에 대한 접근을 관리하는데 도움이 되는 기밀성 상태 정보를 제공한다. 기밀성 상태(confidentiality status)는 전체 문서 또는 문서의 특정 부분에 적용될 수 있다.\n\n<br><br><br>\n","slug":"cda-tutorial","published":1,"updated":"2019-07-25T15:49:09.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt7q100092646sxen49r5","content":"<h3 id=\"Related-Post\"><a href=\"#Related-Post\" class=\"headerlink\" title=\"Related Post\"></a>Related Post</h3><hr>\n<blockquote>\n<p>본 문서는 IHIS 연구소의 <strong>‘HL7 Clinical Document Architecture Release 2’</strong> pdf 문서를 기반으로 작성 되었습니다.</p>\n</blockquote>\n<hr>\n<h1 id=\"CDA-개요\"><a href=\"#CDA-개요\" class=\"headerlink\" title=\"CDA 개요\"></a>CDA 개요</h1><p>@[toc]</p>\n<h2 id=\"1-CDA의-정의-Definition\"><a href=\"#1-CDA의-정의-Definition\" class=\"headerlink\" title=\"1.  CDA의 정의(Definition)\"></a>1.  CDA의 정의(Definition)</h2><p>정식 명칭은 <span style=\"color:blue\">The HL7 <strong>Clinical Document Architecture (CDA)</strong></span>로<br><strong>“공유 목적으로 하는 임상 문서(clinical document)의 구조와 의미를 명시하는 문서 표기(Markup)의 표준”</strong> 이라고 정의 되어있다.</p>\n <div style=\"font-size:small\">임상문서는 의사가 환자를 진료 후 진단된 병명 및 진료내역 등을 기술하고 투약, 주요 실시검사 내용 등 주요 진료결과를 포함하는 문서이다.\n    <div style=\"border:1px solid; padding:10px; box-sizing: border-box;\"><b>임상 문서(Clinical document)</b>는 <u>다음과 같은 특성</u>을 가진다 :\n        <pre>\n    - <strong>Persistence (존속성)</strong>\n    &emsp;- 문서는 지역 및 규제 요건에 의해 정의된 기간 동안 변경되지 않은 상태로 계속 존재한다.\n    - <strong>Stewardship (관리 책임)</strong>\n    &emsp;- 문서는  그 관리를 위임받은 기관에 의해 보존된다.\n    - <strong>Potential for authentication (인증가능성)</strong>\n    &emsp;- 문서는 합법적으로 인증받고자 하는 정보의 집합물이다.\n    - <strong>Context (문맥))</strong>\n    &emsp;- 임상 문서에 대한 기본 맥락(default context)를 설정한다.\n    - <strong>Wholeness (전체성)</strong>\n    &emsp;- 문서의 인증은 전체적으로 적용되며 문서 전체 맥락(context)이 없는 부분에는 적용되지 않는다.\n    - <strong>Human readability (가독성)</strong>\n    &emsp;- 사람이 읽을 수 있어야 한다.</pre>\n    </div>\n </div>\n\n<h2 id=\"2-CDA의-주요-특성-Key-aspects\"><a href=\"#2-CDA의-주요-특성-Key-aspects\" class=\"headerlink\" title=\"2. CDA의 주요 특성(Key aspects)\"></a>2. CDA의 주요 특성(Key aspects)</h2><ul>\n<li><span style=\"color:green;\">Extensible Markup Language <strong>(XML)</strong></span>로 인코딩 된다.</li>\n<li><span style=\"color:green;\">HL7 Reference Information Model(이하 RIM)</span>로부터 기계처리적 의미가 유도되고 <span style=\"color:green;\">HL7의 버전 3 데이터 타입</span>을 사용한다</li>\n<li>표현력이 풍부하고 유연하다.<ul>\n<li><span style=\"color:green;\">document 레벨, section 레벨, entry 레벨의 템플릿</span>은 일반적인 CDA 명세를 통제하기 위해 사용될 수 있다</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-CDA의-목표\"><a href=\"#3-CDA의-목표\" class=\"headerlink\" title=\"3. CDA의 목표\"></a>3. CDA의 목표</h2><ul>\n<li>환자의 보호에 우선권을 둔다.</li>\n<li>가능한 광범위한 시스템에서 사용이 가능하도록 하면서 비용이 효율적이게 구현한다.</li>\n<li>전문 지식의 수준이 다른 사용자들도 판독이 가능하도록 지원한다.</li>\n<li>인코딩된 정보가 오래 유지되도록 한다.</li>\n<li>합리적이고 빠르게 디자인이 되도록 한다.</li>\n</ul>\n<h2 id=\"4-CDA-Document의-주요-요소들\"><a href=\"#4-CDA-Document의-주요-요소들\" class=\"headerlink\" title=\"4. CDA Document의 주요 요소들\"></a>4. CDA Document의 주요 요소들</h2><p><img alt=\"CDA document\" data-src=\"/img/componentsOfCDA.png\"></p>\n<ul>\n<li><strong>The Header</strong><ul>\n<li>&lt;ClinicalDocument&gt; 태그와 &lt;structuredBody&gt; 태그 사이에 있다</li>\n<li>문서를 확인하고 분류하며 ==인증, 진료, 환자, 관련된 제공자들의 정보==를 담는다.</li>\n</ul>\n</li>\n<li><strong>The Body</strong><ul>\n<li>진료 보고서(clinical report)를 담고 있다.</li>\n<li>1)비정형화(unstructured blob) 또는,<br>2)정형화된 표기(structured markup) 둘 중 하나이다.</li>\n<li>위 예제는 &lt;structuredBody&gt; 태그로 정형화된 구조이고, document section이 되풀이해서 올 수 있는 recursive 구조이다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-CDA-“levels”\"><a href=\"#5-CDA-“levels”\" class=\"headerlink\" title=\"5. CDA “levels”\"></a>5. CDA “levels”</h2><blockquote>\n<p>PDF 문서에서 이 부분은 표 하나만 있어서 추가 자료 조사를 통해 작성하였습니다. 따라서 부족한 본인이 작성했기에 잘못된 내용이 있을 수도 있습니다.</p>\n</blockquote>\n<table>\n    <colgroup>\n        <col width=\"20%\">\n        <col width=\"80%\">\n    </colgroup>\n    <thead>\n    <tr>\n        <th>CDA, Release One</th>\n        <th>CDA, Release Two</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>CDA Level One</td>\n        <td>The unconstrained CDA specification.\n        규제되지 않은 CDA 규정</td>\n    </tr>\n    <tr>\n        <td>CDA Level Two</td>\n        <td>The CDA specification with section-level templates applied.\n        색션 레벨의 템플릿을 적용한 CDA 규정</td>\n    </tr>\n    <tr>\n        <td>CDA Level Three</td>\n        <td>The CDA specification with entry-level (and optionally section-level) templates applied.\n            엔트리 레벨(선택적 색션 레벨) 템플릿을 적용한 CDA 규정</td>\n    </tr>\n    </tbody>\n</table>\n\n<ul>\n<li><p>CDA는 2가지 버전이 있다</p>\n<ul>\n<li><p>첫 번째 버전(Release One)에서는 단순 CDA 설계의 목표를 달성하기 위한 <em>XML DTDs</em> 또는 <em>XML Schemas</em> 계층구조를 세 단계(level)로 나눈 것이다.<br><img alt=\"CDA level\" data-src=\"http://iehr.eu/wp-content/uploads/2015/11/cda_levels.png\"></p>\n</li>\n<li><p>두 번째 버전(Release Two)에서는 하나의 CDA XML Schema로 이루어지고, HL7 templates들을 계층적으로 적용해 나가는 구조이다.<br><img alt=\"CDA Release2\" data-src=\"https://slideplayer.com/slide/3227951/11/images/18/CDA+Clinical+Document+Architecture+Document+Hierarchy.jpg\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-보안성-기고성-데이터-무경성\"><a href=\"#6-보안성-기고성-데이터-무경성\" class=\"headerlink\" title=\"6. 보안성, 기고성, 데이터 무경성\"></a>6. 보안성, 기고성, 데이터 무경성</h2><ul>\n<li>CDA 문서를 보내고 받는 <u>애플리케이션 시스템</u>은<ul>\n<li>문서 인증, 기밀 유지 및 보존에 대한 모든 법적 요구 사항을 충족해야한다.</li>\n<li>대중 매체를 통한 통신의 경우, 송신자(source)/수신자(recipient) 인증 및 캡슐화(요약)된 문서의 안전한 전송을 취한 암호화 기술이 요구될 수 있으므로 표준의 범위를 벗어나는 상용 도구로 해결 해야한다.<br></li>\n</ul>\n</li>\n<li><u>CDA</u>는<ul>\n<li>애플리케이션 시스템이 중요한 데이터에 대한 접근을 관리하는데 도움이 되는 기밀성 상태 정보를 제공한다. 기밀성 상태(confidentiality status)는 전체 문서 또는 문서의 특정 부분에 적용될 수 있다.</li>\n</ul>\n</li>\n</ul>\n<p><br><br><br></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Related-Post\"><a href=\"#Related-Post\" class=\"headerlink\" title=\"Related Post\"></a>Related Post</h3><hr>\n<blockquote>\n<p>본 문서는 IHIS 연구소의 <strong>‘HL7 Clinical Document Architecture Release 2’</strong> pdf 문서를 기반으로 작성 되었습니다.</p>\n</blockquote>\n<hr>\n<h1 id=\"CDA-개요\"><a href=\"#CDA-개요\" class=\"headerlink\" title=\"CDA 개요\"></a>CDA 개요</h1><p>@[toc]</p>\n<h2 id=\"1-CDA의-정의-Definition\"><a href=\"#1-CDA의-정의-Definition\" class=\"headerlink\" title=\"1.  CDA의 정의(Definition)\"></a>1.  CDA의 정의(Definition)</h2><p>정식 명칭은 <span style=\"color:blue\">The HL7 <strong>Clinical Document Architecture (CDA)</strong></span>로<br><strong>“공유 목적으로 하는 임상 문서(clinical document)의 구조와 의미를 명시하는 문서 표기(Markup)의 표준”</strong> 이라고 정의 되어있다.</p>\n <div style=\"font-size:small\">임상문서는 의사가 환자를 진료 후 진단된 병명 및 진료내역 등을 기술하고 투약, 주요 실시검사 내용 등 주요 진료결과를 포함하는 문서이다.\n    <div style=\"border:1px solid; padding:10px; box-sizing: border-box;\"><b>임상 문서(Clinical document)</b>는 <u>다음과 같은 특성</u>을 가진다 :\n        <pre>\n    - <strong>Persistence (존속성)</strong>\n    &emsp;- 문서는 지역 및 규제 요건에 의해 정의된 기간 동안 변경되지 않은 상태로 계속 존재한다.\n    - <strong>Stewardship (관리 책임)</strong>\n    &emsp;- 문서는  그 관리를 위임받은 기관에 의해 보존된다.\n    - <strong>Potential for authentication (인증가능성)</strong>\n    &emsp;- 문서는 합법적으로 인증받고자 하는 정보의 집합물이다.\n    - <strong>Context (문맥))</strong>\n    &emsp;- 임상 문서에 대한 기본 맥락(default context)를 설정한다.\n    - <strong>Wholeness (전체성)</strong>\n    &emsp;- 문서의 인증은 전체적으로 적용되며 문서 전체 맥락(context)이 없는 부분에는 적용되지 않는다.\n    - <strong>Human readability (가독성)</strong>\n    &emsp;- 사람이 읽을 수 있어야 한다.</pre>\n    </div>\n </div>\n\n<h2 id=\"2-CDA의-주요-특성-Key-aspects\"><a href=\"#2-CDA의-주요-특성-Key-aspects\" class=\"headerlink\" title=\"2. CDA의 주요 특성(Key aspects)\"></a>2. CDA의 주요 특성(Key aspects)</h2><ul>\n<li><span style=\"color:green;\">Extensible Markup Language <strong>(XML)</strong></span>로 인코딩 된다.</li>\n<li><span style=\"color:green;\">HL7 Reference Information Model(이하 RIM)</span>로부터 기계처리적 의미가 유도되고 <span style=\"color:green;\">HL7의 버전 3 데이터 타입</span>을 사용한다</li>\n<li>표현력이 풍부하고 유연하다.<ul>\n<li><span style=\"color:green;\">document 레벨, section 레벨, entry 레벨의 템플릿</span>은 일반적인 CDA 명세를 통제하기 위해 사용될 수 있다</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-CDA의-목표\"><a href=\"#3-CDA의-목표\" class=\"headerlink\" title=\"3. CDA의 목표\"></a>3. CDA의 목표</h2><ul>\n<li>환자의 보호에 우선권을 둔다.</li>\n<li>가능한 광범위한 시스템에서 사용이 가능하도록 하면서 비용이 효율적이게 구현한다.</li>\n<li>전문 지식의 수준이 다른 사용자들도 판독이 가능하도록 지원한다.</li>\n<li>인코딩된 정보가 오래 유지되도록 한다.</li>\n<li>합리적이고 빠르게 디자인이 되도록 한다.</li>\n</ul>\n<h2 id=\"4-CDA-Document의-주요-요소들\"><a href=\"#4-CDA-Document의-주요-요소들\" class=\"headerlink\" title=\"4. CDA Document의 주요 요소들\"></a>4. CDA Document의 주요 요소들</h2><p><img alt=\"CDA document\" data-src=\"/img/componentsOfCDA.png\"></p>\n<ul>\n<li><strong>The Header</strong><ul>\n<li>&lt;ClinicalDocument&gt; 태그와 &lt;structuredBody&gt; 태그 사이에 있다</li>\n<li>문서를 확인하고 분류하며 ==인증, 진료, 환자, 관련된 제공자들의 정보==를 담는다.</li>\n</ul>\n</li>\n<li><strong>The Body</strong><ul>\n<li>진료 보고서(clinical report)를 담고 있다.</li>\n<li>1)비정형화(unstructured blob) 또는,<br>2)정형화된 표기(structured markup) 둘 중 하나이다.</li>\n<li>위 예제는 &lt;structuredBody&gt; 태그로 정형화된 구조이고, document section이 되풀이해서 올 수 있는 recursive 구조이다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-CDA-“levels”\"><a href=\"#5-CDA-“levels”\" class=\"headerlink\" title=\"5. CDA “levels”\"></a>5. CDA “levels”</h2><blockquote>\n<p>PDF 문서에서 이 부분은 표 하나만 있어서 추가 자료 조사를 통해 작성하였습니다. 따라서 부족한 본인이 작성했기에 잘못된 내용이 있을 수도 있습니다.</p>\n</blockquote>\n<table>\n    <colgroup>\n        <col width=\"20%\">\n        <col width=\"80%\">\n    </colgroup>\n    <thead>\n    <tr>\n        <th>CDA, Release One</th>\n        <th>CDA, Release Two</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>CDA Level One</td>\n        <td>The unconstrained CDA specification.\n        규제되지 않은 CDA 규정</td>\n    </tr>\n    <tr>\n        <td>CDA Level Two</td>\n        <td>The CDA specification with section-level templates applied.\n        색션 레벨의 템플릿을 적용한 CDA 규정</td>\n    </tr>\n    <tr>\n        <td>CDA Level Three</td>\n        <td>The CDA specification with entry-level (and optionally section-level) templates applied.\n            엔트리 레벨(선택적 색션 레벨) 템플릿을 적용한 CDA 규정</td>\n    </tr>\n    </tbody>\n</table>\n\n<ul>\n<li><p>CDA는 2가지 버전이 있다</p>\n<ul>\n<li><p>첫 번째 버전(Release One)에서는 단순 CDA 설계의 목표를 달성하기 위한 <em>XML DTDs</em> 또는 <em>XML Schemas</em> 계층구조를 세 단계(level)로 나눈 것이다.<br><img alt=\"CDA level\" data-src=\"http://iehr.eu/wp-content/uploads/2015/11/cda_levels.png\"></p>\n</li>\n<li><p>두 번째 버전(Release Two)에서는 하나의 CDA XML Schema로 이루어지고, HL7 templates들을 계층적으로 적용해 나가는 구조이다.<br><img alt=\"CDA Release2\" data-src=\"https://slideplayer.com/slide/3227951/11/images/18/CDA+Clinical+Document+Architecture+Document+Hierarchy.jpg\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-보안성-기고성-데이터-무경성\"><a href=\"#6-보안성-기고성-데이터-무경성\" class=\"headerlink\" title=\"6. 보안성, 기고성, 데이터 무경성\"></a>6. 보안성, 기고성, 데이터 무경성</h2><ul>\n<li>CDA 문서를 보내고 받는 <u>애플리케이션 시스템</u>은<ul>\n<li>문서 인증, 기밀 유지 및 보존에 대한 모든 법적 요구 사항을 충족해야한다.</li>\n<li>대중 매체를 통한 통신의 경우, 송신자(source)/수신자(recipient) 인증 및 캡슐화(요약)된 문서의 안전한 전송을 취한 암호화 기술이 요구될 수 있으므로 표준의 범위를 벗어나는 상용 도구로 해결 해야한다.<br></li>\n</ul>\n</li>\n<li><u>CDA</u>는<ul>\n<li>애플리케이션 시스템이 중요한 데이터에 대한 접근을 관리하는데 도움이 되는 기밀성 상태 정보를 제공한다. 기밀성 상태(confidentiality status)는 전체 문서 또는 문서의 특정 부분에 적용될 수 있다.</li>\n</ul>\n</li>\n</ul>\n<p><br><br><br></p>\n"},{"title":"C-CDA 란?","author":{"nick":"TAEJIN","link":null},"date":"2019-01-28T07:08:17.000Z","subtitle":null,"cover":"http://vico.org/CDAR22005_HL7SP/infrastructure/cda/graphics/L-POCD_RM000040.gif","_content":"\n### Related Posts\n\n------\n\n> 본 문서는 IHIS 연구소의 **'HL7 C-CDA 교육'** pdf 문서를 기반으로 작성 되었습니다.\n\n------\n\n\n## Pre-Consolidation context\n\n##### CDA 통합 이전\n\n 컴퓨터와 인터넷이 보편화 되고 사람들의 기대수명이 높아지면서 ICT(Information and Communication System) 기술을 보건의료 영역에 적용하려는 움직임이 시작 되었습니다.\n 하지만 병원과 기관마다 서로 다른 소프트웨어를 사용하기 때문에 정보 교환 또는 호환이 어려운 문제점이 있었습니다. 이를 해결하고자 *HITSP, HL7, IHE, Health Story* 등의 여러 기업 및 기관들이 표준화된 **CDA(Clinical Document Architecture)**를 규정하고, 많은 사람들이 자신들의 표준을 사용하게 하기 위해 **CDA Implementation Guide(CDA IG)** 를 배포하였습니다.\n 각각의 표준은 비슷하지만 조금씩은 차이가 있었기 때문에 진정한 표준이 되지 못하고 다람쥐 쳇바퀴 돌 듯 이 문서들 간의 교환 및 교환의 문제가 발생하였습니다.\n\n![C-CDA](/img/c-cda.png)\n\n## Consolidated CDA\n\n 2012년 <u>the Office of the National Coordinator for Health Information Technology(ONC)</u> 에서 이러한 문제점을 해결하고자 **Consolidated CDA 라는 통일된 표준** 을 제시하였다고 위키피디아[^1]에 적혀있습니다. 저는 대중적으로 많이 사용하는 HL7 기관에서 2011년 12월에 발표한  'A draft Implementation Guide for CDA Release 2.0, Consolidated CDA Templates'[^2]를 기반으로 다룰 것 입니다.\n\n\n\n\n\n**C-CDA IG** 는 아래와 같은 의료 문서를 포함합니다(year released)\n\n- Consultation Note(2008)\n- Discharge Summary(2009)\n- Imaging Integration and DICOM Diagnostic Imaging Reports(DIR)(2009)\n- History and Physical(H&P)(2008)\n- Operative Note(2009)\n- Progress Note(2010)\n- Procedure Note(2010)\n- Unstructured documents(2010)\n\n![C-CDA2](/img/c-cda2.png)\n\n\n\n## C-CDA IG Navigation\n\n Consolidated CDA 작성 방법에 대한 자세한 정보는 공식 홈페이지를 참조하면 될 것 같습니다.\n[HL7 Implementation Guide for CDA Release 2:IHE Health Story Consolidation, Release 1.1 - US Realm](http://www.hl7.org/implement/standards/product_matrix.cfm)\n\n\n\n<br><br><br>\n\n[^1]: [Consolidated Clinical Document Architecture 탭에 있음](https://en.wikipedia.org/wiki/Clinical_Document_Architecture)\n[^2]: 초안의 사본은 HL7  웹 사이트를 가면 쉽게 찾을 수 있습니다.\n","source":"_posts/20190128-cda-tutorial-1.md","raw":"---\ntitle: C-CDA 란?\nauthor:\n  nick: TAEJIN\n  link: null\ncategories:\n  - IHIS\n  - HL7\ntags:\n  - CDA\n  - HL7\ndate: 2019-01-28 16:08:17\nsubtitle:\ncover: 'http://vico.org/CDAR22005_HL7SP/infrastructure/cda/graphics/L-POCD_RM000040.gif'\n\n\n---\n\n### Related Posts\n\n------\n\n> 본 문서는 IHIS 연구소의 **'HL7 C-CDA 교육'** pdf 문서를 기반으로 작성 되었습니다.\n\n------\n\n\n## Pre-Consolidation context\n\n##### CDA 통합 이전\n\n 컴퓨터와 인터넷이 보편화 되고 사람들의 기대수명이 높아지면서 ICT(Information and Communication System) 기술을 보건의료 영역에 적용하려는 움직임이 시작 되었습니다.\n 하지만 병원과 기관마다 서로 다른 소프트웨어를 사용하기 때문에 정보 교환 또는 호환이 어려운 문제점이 있었습니다. 이를 해결하고자 *HITSP, HL7, IHE, Health Story* 등의 여러 기업 및 기관들이 표준화된 **CDA(Clinical Document Architecture)**를 규정하고, 많은 사람들이 자신들의 표준을 사용하게 하기 위해 **CDA Implementation Guide(CDA IG)** 를 배포하였습니다.\n 각각의 표준은 비슷하지만 조금씩은 차이가 있었기 때문에 진정한 표준이 되지 못하고 다람쥐 쳇바퀴 돌 듯 이 문서들 간의 교환 및 교환의 문제가 발생하였습니다.\n\n![C-CDA](/img/c-cda.png)\n\n## Consolidated CDA\n\n 2012년 <u>the Office of the National Coordinator for Health Information Technology(ONC)</u> 에서 이러한 문제점을 해결하고자 **Consolidated CDA 라는 통일된 표준** 을 제시하였다고 위키피디아[^1]에 적혀있습니다. 저는 대중적으로 많이 사용하는 HL7 기관에서 2011년 12월에 발표한  'A draft Implementation Guide for CDA Release 2.0, Consolidated CDA Templates'[^2]를 기반으로 다룰 것 입니다.\n\n\n\n\n\n**C-CDA IG** 는 아래와 같은 의료 문서를 포함합니다(year released)\n\n- Consultation Note(2008)\n- Discharge Summary(2009)\n- Imaging Integration and DICOM Diagnostic Imaging Reports(DIR)(2009)\n- History and Physical(H&P)(2008)\n- Operative Note(2009)\n- Progress Note(2010)\n- Procedure Note(2010)\n- Unstructured documents(2010)\n\n![C-CDA2](/img/c-cda2.png)\n\n\n\n## C-CDA IG Navigation\n\n Consolidated CDA 작성 방법에 대한 자세한 정보는 공식 홈페이지를 참조하면 될 것 같습니다.\n[HL7 Implementation Guide for CDA Release 2:IHE Health Story Consolidation, Release 1.1 - US Realm](http://www.hl7.org/implement/standards/product_matrix.cfm)\n\n\n\n<br><br><br>\n\n[^1]: [Consolidated Clinical Document Architecture 탭에 있음](https://en.wikipedia.org/wiki/Clinical_Document_Architecture)\n[^2]: 초안의 사본은 HL7  웹 사이트를 가면 쉽게 찾을 수 있습니다.\n","slug":"cda-tutorial-1","published":1,"updated":"2019-07-25T15:49:21.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt7q4000a26465at7smhu","content":"<h3 id=\"Related-Posts\"><a href=\"#Related-Posts\" class=\"headerlink\" title=\"Related Posts\"></a>Related Posts</h3><hr>\n<blockquote>\n<p>본 문서는 IHIS 연구소의 <strong>‘HL7 C-CDA 교육’</strong> pdf 문서를 기반으로 작성 되었습니다.</p>\n</blockquote>\n<hr>\n<h2 id=\"Pre-Consolidation-context\"><a href=\"#Pre-Consolidation-context\" class=\"headerlink\" title=\"Pre-Consolidation context\"></a>Pre-Consolidation context</h2><h5 id=\"CDA-통합-이전\"><a href=\"#CDA-통합-이전\" class=\"headerlink\" title=\"CDA 통합 이전\"></a>CDA 통합 이전</h5><p> 컴퓨터와 인터넷이 보편화 되고 사람들의 기대수명이 높아지면서 ICT(Information and Communication System) 기술을 보건의료 영역에 적용하려는 움직임이 시작 되었습니다.<br> 하지만 병원과 기관마다 서로 다른 소프트웨어를 사용하기 때문에 정보 교환 또는 호환이 어려운 문제점이 있었습니다. 이를 해결하고자 <em>HITSP, HL7, IHE, Health Story</em> 등의 여러 기업 및 기관들이 표준화된 <strong>CDA(Clinical Document Architecture)</strong>를 규정하고, 많은 사람들이 자신들의 표준을 사용하게 하기 위해 <strong>CDA Implementation Guide(CDA IG)</strong> 를 배포하였습니다.<br> 각각의 표준은 비슷하지만 조금씩은 차이가 있었기 때문에 진정한 표준이 되지 못하고 다람쥐 쳇바퀴 돌 듯 이 문서들 간의 교환 및 교환의 문제가 발생하였습니다.</p>\n<p><img alt=\"C-CDA\" data-src=\"/img/c-cda.png\"></p>\n<h2 id=\"Consolidated-CDA\"><a href=\"#Consolidated-CDA\" class=\"headerlink\" title=\"Consolidated CDA\"></a>Consolidated CDA</h2><p> 2012년 <u>the Office of the National Coordinator for Health Information Technology(ONC)</u> 에서 이러한 문제점을 해결하고자 <strong>Consolidated CDA 라는 통일된 표준</strong> 을 제시하였다고 위키피디아[^1]에 적혀있습니다. 저는 대중적으로 많이 사용하는 HL7 기관에서 2011년 12월에 발표한  ‘A draft Implementation Guide for CDA Release 2.0, Consolidated CDA Templates’[^2]를 기반으로 다룰 것 입니다.</p>\n<p><strong>C-CDA IG</strong> 는 아래와 같은 의료 문서를 포함합니다(year released)</p>\n<ul>\n<li>Consultation Note(2008)</li>\n<li>Discharge Summary(2009)</li>\n<li>Imaging Integration and DICOM Diagnostic Imaging Reports(DIR)(2009)</li>\n<li>History and Physical(H&amp;P)(2008)</li>\n<li>Operative Note(2009)</li>\n<li>Progress Note(2010)</li>\n<li>Procedure Note(2010)</li>\n<li>Unstructured documents(2010)</li>\n</ul>\n<p><img alt=\"C-CDA2\" data-src=\"/img/c-cda2.png\"></p>\n<h2 id=\"C-CDA-IG-Navigation\"><a href=\"#C-CDA-IG-Navigation\" class=\"headerlink\" title=\"C-CDA IG Navigation\"></a>C-CDA IG Navigation</h2><p> Consolidated CDA 작성 방법에 대한 자세한 정보는 공식 홈페이지를 참조하면 될 것 같습니다.<br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5obDcub3JnL2ltcGxlbWVudC9zdGFuZGFyZHMvcHJvZHVjdF9tYXRyaXguY2Zt\" title=\"http://www.hl7.org/implement/standards/product_matrix.cfm\">HL7 Implementation Guide for CDA Release 2:IHE Health Story Consolidation, Release 1.1 - US Realm<i class=\"fa fa-external-link\"></i></span></p>\n<p><br><br><br></p>\n<p>[^1]: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2xpbmljYWxfRG9jdW1lbnRfQXJjaGl0ZWN0dXJl\" title=\"https://en.wikipedia.org/wiki/Clinical_Document_Architecture\">Consolidated Clinical Document Architecture 탭에 있음<i class=\"fa fa-external-link\"></i></span><br>[^2]: 초안의 사본은 HL7  웹 사이트를 가면 쉽게 찾을 수 있습니다.</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Related-Posts\"><a href=\"#Related-Posts\" class=\"headerlink\" title=\"Related Posts\"></a>Related Posts</h3><hr>\n<blockquote>\n<p>본 문서는 IHIS 연구소의 <strong>‘HL7 C-CDA 교육’</strong> pdf 문서를 기반으로 작성 되었습니다.</p>\n</blockquote>\n<hr>\n<h2 id=\"Pre-Consolidation-context\"><a href=\"#Pre-Consolidation-context\" class=\"headerlink\" title=\"Pre-Consolidation context\"></a>Pre-Consolidation context</h2><h5 id=\"CDA-통합-이전\"><a href=\"#CDA-통합-이전\" class=\"headerlink\" title=\"CDA 통합 이전\"></a>CDA 통합 이전</h5><p> 컴퓨터와 인터넷이 보편화 되고 사람들의 기대수명이 높아지면서 ICT(Information and Communication System) 기술을 보건의료 영역에 적용하려는 움직임이 시작 되었습니다.<br> 하지만 병원과 기관마다 서로 다른 소프트웨어를 사용하기 때문에 정보 교환 또는 호환이 어려운 문제점이 있었습니다. 이를 해결하고자 <em>HITSP, HL7, IHE, Health Story</em> 등의 여러 기업 및 기관들이 표준화된 <strong>CDA(Clinical Document Architecture)</strong>를 규정하고, 많은 사람들이 자신들의 표준을 사용하게 하기 위해 <strong>CDA Implementation Guide(CDA IG)</strong> 를 배포하였습니다.<br> 각각의 표준은 비슷하지만 조금씩은 차이가 있었기 때문에 진정한 표준이 되지 못하고 다람쥐 쳇바퀴 돌 듯 이 문서들 간의 교환 및 교환의 문제가 발생하였습니다.</p>\n<p><img alt=\"C-CDA\" data-src=\"/img/c-cda.png\"></p>\n<h2 id=\"Consolidated-CDA\"><a href=\"#Consolidated-CDA\" class=\"headerlink\" title=\"Consolidated CDA\"></a>Consolidated CDA</h2><p> 2012년 <u>the Office of the National Coordinator for Health Information Technology(ONC)</u> 에서 이러한 문제점을 해결하고자 <strong>Consolidated CDA 라는 통일된 표준</strong> 을 제시하였다고 위키피디아[^1]에 적혀있습니다. 저는 대중적으로 많이 사용하는 HL7 기관에서 2011년 12월에 발표한  ‘A draft Implementation Guide for CDA Release 2.0, Consolidated CDA Templates’[^2]를 기반으로 다룰 것 입니다.</p>\n<p><strong>C-CDA IG</strong> 는 아래와 같은 의료 문서를 포함합니다(year released)</p>\n<ul>\n<li>Consultation Note(2008)</li>\n<li>Discharge Summary(2009)</li>\n<li>Imaging Integration and DICOM Diagnostic Imaging Reports(DIR)(2009)</li>\n<li>History and Physical(H&amp;P)(2008)</li>\n<li>Operative Note(2009)</li>\n<li>Progress Note(2010)</li>\n<li>Procedure Note(2010)</li>\n<li>Unstructured documents(2010)</li>\n</ul>\n<p><img alt=\"C-CDA2\" data-src=\"/img/c-cda2.png\"></p>\n<h2 id=\"C-CDA-IG-Navigation\"><a href=\"#C-CDA-IG-Navigation\" class=\"headerlink\" title=\"C-CDA IG Navigation\"></a>C-CDA IG Navigation</h2><p> Consolidated CDA 작성 방법에 대한 자세한 정보는 공식 홈페이지를 참조하면 될 것 같습니다.<br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5obDcub3JnL2ltcGxlbWVudC9zdGFuZGFyZHMvcHJvZHVjdF9tYXRyaXguY2Zt\" title=\"http://www.hl7.org/implement/standards/product_matrix.cfm\">HL7 Implementation Guide for CDA Release 2:IHE Health Story Consolidation, Release 1.1 - US Realm<i class=\"fa fa-external-link\"></i></span></p>\n<p><br><br><br></p>\n<p>[^1]: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2xpbmljYWxfRG9jdW1lbnRfQXJjaGl0ZWN0dXJl\" title=\"https://en.wikipedia.org/wiki/Clinical_Document_Architecture\">Consolidated Clinical Document Architecture 탭에 있음<i class=\"fa fa-external-link\"></i></span><br>[^2]: 초안의 사본은 HL7  웹 사이트를 가면 쉽게 찾을 수 있습니다.</p>\n"},{"title":"스프링 프레임워크 모듈","author":{"nick":"TAEJIN","link":null},"date":"2019-01-31T10:08:32.000Z","subtitle":"스프링 프레임워크의 약 20개의 모듈들","cover":"https://spring.io/img/spring-by-pivotal.png","_content":"\n------\n\n## 스프링 프레임워크 모듈\n\n![framework modules](https://docs.spring.io/spring/docs/4.3.22.RELEASE/spring-framework-reference/htmlsingle/images/spring-overview.png)\n\n위 그림에 나와있듯이 스프링 프레임워크는 약 20개의 모듈들로 이루어져 있습니다.\n\n- Data Access/Integration; Web; AOP; Aspects; Instrumentation; Messaging; Core Container; and Test;\n\n|       모듈 그룹        |                             설명                             |\n| :--------------------: | :----------------------------------------------------------: |\n|     Core Container     |            * 스프링 프레임워크의 기본 모듈을 포함            |\n| AOP 및 Instrumentation | * 관점 지향 프로그래밍(AOP; Aspect-Oriented Programming) 및 Class Instrumentation을 지원하는 모듈을 포함 |\n|       Messaging        | * 프로그래밍 모듈을 기반으로한 스프링 MVC 어노테이션 처럼 메세지를 메소드에 맵핑 시키는 어노테이션의 세트를 포함 |\n| Data Access/Inegration | * DB 및 메시징 공급자와의 상호작용을 간소화하는 모듈을 포함  |\n|          Web           |  * 웹 및 포틀릿 애플리케이션 개발을 간소화하는 모듈을 포함   |\n|          Test          |   * 단위 및 통합 테스트 생성을 간소화하는 모듈 하나를 포함   |\n\n 이처럼 스프링은 **웹 애플리케이션 개발, 데이터베이스 접근, 트랜잭션 관리, 단위 및 통합 테스트 생성** 등등 엔터프라이즈 애플리케이션 개발의 모든 측면을 지원하고 이렇게 다양한 기능 중 우리는 필요한 것만 선택적으로 사용하면 됩니다.\n\n만약 개발하고 있는 애플리케이션에서 스프링의 DI 기능[^1]을 사용하려면 Core Container 모듈 그룹에 속한 Spring-Core나 Spring-Beans 모듈을 선택해 사용하면 됩니다.\n\n\n\n### 스프링 프레임워크 모듈 간 상호의존성\n\n![dependency](https://1.bp.blogspot.com/-8MEJX0VwvO8/Wi0I3qLwk7I/AAAAAAAAgo0/nu7QGP77ZjA8hgCHdwDmjdgKNMJYjf_EACLcBGAs/s1600/1.1.png)\n\n- **Core Container** 그룹이 스프링 프레임워크의 중심\n- **AOP 및 Instrumentation** 그룹에 포함된 모듈도 이를 의존하는 다른 모듈이 많기에 중요도가 높음\n\n\n\n지금은 이해가 잘 안되지만 앞으로 각각의 모듈들에 대해 자세히 알아볼 예정입니다.\n\n다음 포스팅에서는 각각의 모듈들을 알아가기 전에 꼭 알아둬야하는 개념들을 가볍게 집고 넘어가겠습니다.\n\n- 제어의 역적(IoC); 의존성 주입(DI); 관전 지향 프로그래밍(AOP); Model View Control(MVC);\n\n![modules todo](https://d2h0cx97tjks2p.cloudfront.net/blogs/wp-content/uploads/sites/2/2018/06/Spring-Framework-Modules-01.jpg)\n\n<br><br><br>\n\n\n\n[^1]: DI 기능에 대해서는 다음에 따로 포스트할 예정(포스팅 하면 수정!!)\n","source":"_posts/20190131-spring-module.md","raw":"---\ntitle: 스프링 프레임워크 모듈\nauthor:\n  nick: TAEJIN\n  link: null\ncategories:\n  - WEB\n  - SPRING\ntags:\n  - FRAMEWORK\n  - MODULES\ndate: 2019-01-31 19:08:32\nsubtitle: 스프링 프레임워크의 약 20개의 모듈들\ncover: https://spring.io/img/spring-by-pivotal.png\n\n---\n\n------\n\n## 스프링 프레임워크 모듈\n\n![framework modules](https://docs.spring.io/spring/docs/4.3.22.RELEASE/spring-framework-reference/htmlsingle/images/spring-overview.png)\n\n위 그림에 나와있듯이 스프링 프레임워크는 약 20개의 모듈들로 이루어져 있습니다.\n\n- Data Access/Integration; Web; AOP; Aspects; Instrumentation; Messaging; Core Container; and Test;\n\n|       모듈 그룹        |                             설명                             |\n| :--------------------: | :----------------------------------------------------------: |\n|     Core Container     |            * 스프링 프레임워크의 기본 모듈을 포함            |\n| AOP 및 Instrumentation | * 관점 지향 프로그래밍(AOP; Aspect-Oriented Programming) 및 Class Instrumentation을 지원하는 모듈을 포함 |\n|       Messaging        | * 프로그래밍 모듈을 기반으로한 스프링 MVC 어노테이션 처럼 메세지를 메소드에 맵핑 시키는 어노테이션의 세트를 포함 |\n| Data Access/Inegration | * DB 및 메시징 공급자와의 상호작용을 간소화하는 모듈을 포함  |\n|          Web           |  * 웹 및 포틀릿 애플리케이션 개발을 간소화하는 모듈을 포함   |\n|          Test          |   * 단위 및 통합 테스트 생성을 간소화하는 모듈 하나를 포함   |\n\n 이처럼 스프링은 **웹 애플리케이션 개발, 데이터베이스 접근, 트랜잭션 관리, 단위 및 통합 테스트 생성** 등등 엔터프라이즈 애플리케이션 개발의 모든 측면을 지원하고 이렇게 다양한 기능 중 우리는 필요한 것만 선택적으로 사용하면 됩니다.\n\n만약 개발하고 있는 애플리케이션에서 스프링의 DI 기능[^1]을 사용하려면 Core Container 모듈 그룹에 속한 Spring-Core나 Spring-Beans 모듈을 선택해 사용하면 됩니다.\n\n\n\n### 스프링 프레임워크 모듈 간 상호의존성\n\n![dependency](https://1.bp.blogspot.com/-8MEJX0VwvO8/Wi0I3qLwk7I/AAAAAAAAgo0/nu7QGP77ZjA8hgCHdwDmjdgKNMJYjf_EACLcBGAs/s1600/1.1.png)\n\n- **Core Container** 그룹이 스프링 프레임워크의 중심\n- **AOP 및 Instrumentation** 그룹에 포함된 모듈도 이를 의존하는 다른 모듈이 많기에 중요도가 높음\n\n\n\n지금은 이해가 잘 안되지만 앞으로 각각의 모듈들에 대해 자세히 알아볼 예정입니다.\n\n다음 포스팅에서는 각각의 모듈들을 알아가기 전에 꼭 알아둬야하는 개념들을 가볍게 집고 넘어가겠습니다.\n\n- 제어의 역적(IoC); 의존성 주입(DI); 관전 지향 프로그래밍(AOP); Model View Control(MVC);\n\n![modules todo](https://d2h0cx97tjks2p.cloudfront.net/blogs/wp-content/uploads/sites/2/2018/06/Spring-Framework-Modules-01.jpg)\n\n<br><br><br>\n\n\n\n[^1]: DI 기능에 대해서는 다음에 따로 포스트할 예정(포스팅 하면 수정!!)\n","slug":"spring-module","published":1,"updated":"2019-07-16T13:50:08.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt84d001n26462px9ybbz","content":"<hr>\n<h2 id=\"스프링-프레임워크-모듈\"><a href=\"#스프링-프레임워크-모듈\" class=\"headerlink\" title=\"스프링 프레임워크 모듈\"></a>스프링 프레임워크 모듈</h2><p><img alt=\"framework modules\" data-src=\"https://docs.spring.io/spring/docs/4.3.22.RELEASE/spring-framework-reference/htmlsingle/images/spring-overview.png\"></p>\n<p>위 그림에 나와있듯이 스프링 프레임워크는 약 20개의 모듈들로 이루어져 있습니다.</p>\n<ul>\n<li>Data Access/Integration; Web; AOP; Aspects; Instrumentation; Messaging; Core Container; and Test;</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">모듈 그룹</th>\n<th align=\"center\">설명</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Core Container</td>\n<td align=\"center\">* 스프링 프레임워크의 기본 모듈을 포함</td>\n</tr>\n<tr>\n<td align=\"center\">AOP 및 Instrumentation</td>\n<td align=\"center\">* 관점 지향 프로그래밍(AOP; Aspect-Oriented Programming) 및 Class Instrumentation을 지원하는 모듈을 포함</td>\n</tr>\n<tr>\n<td align=\"center\">Messaging</td>\n<td align=\"center\">* 프로그래밍 모듈을 기반으로한 스프링 MVC 어노테이션 처럼 메세지를 메소드에 맵핑 시키는 어노테이션의 세트를 포함</td>\n</tr>\n<tr>\n<td align=\"center\">Data Access/Inegration</td>\n<td align=\"center\">* DB 및 메시징 공급자와의 상호작용을 간소화하는 모듈을 포함</td>\n</tr>\n<tr>\n<td align=\"center\">Web</td>\n<td align=\"center\">* 웹 및 포틀릿 애플리케이션 개발을 간소화하는 모듈을 포함</td>\n</tr>\n<tr>\n<td align=\"center\">Test</td>\n<td align=\"center\">* 단위 및 통합 테스트 생성을 간소화하는 모듈 하나를 포함</td>\n</tr>\n</tbody></table>\n<p> 이처럼 스프링은 <strong>웹 애플리케이션 개발, 데이터베이스 접근, 트랜잭션 관리, 단위 및 통합 테스트 생성</strong> 등등 엔터프라이즈 애플리케이션 개발의 모든 측면을 지원하고 이렇게 다양한 기능 중 우리는 필요한 것만 선택적으로 사용하면 됩니다.</p>\n<p>만약 개발하고 있는 애플리케이션에서 스프링의 DI 기능[^1]을 사용하려면 Core Container 모듈 그룹에 속한 Spring-Core나 Spring-Beans 모듈을 선택해 사용하면 됩니다.</p>\n<h3 id=\"스프링-프레임워크-모듈-간-상호의존성\"><a href=\"#스프링-프레임워크-모듈-간-상호의존성\" class=\"headerlink\" title=\"스프링 프레임워크 모듈 간 상호의존성\"></a>스프링 프레임워크 모듈 간 상호의존성</h3><p><img alt=\"dependency\" data-src=\"https://1.bp.blogspot.com/-8MEJX0VwvO8/Wi0I3qLwk7I/AAAAAAAAgo0/nu7QGP77ZjA8hgCHdwDmjdgKNMJYjf_EACLcBGAs/s1600/1.1.png\"></p>\n<ul>\n<li><strong>Core Container</strong> 그룹이 스프링 프레임워크의 중심</li>\n<li><strong>AOP 및 Instrumentation</strong> 그룹에 포함된 모듈도 이를 의존하는 다른 모듈이 많기에 중요도가 높음</li>\n</ul>\n<p>지금은 이해가 잘 안되지만 앞으로 각각의 모듈들에 대해 자세히 알아볼 예정입니다.</p>\n<p>다음 포스팅에서는 각각의 모듈들을 알아가기 전에 꼭 알아둬야하는 개념들을 가볍게 집고 넘어가겠습니다.</p>\n<ul>\n<li>제어의 역적(IoC); 의존성 주입(DI); 관전 지향 프로그래밍(AOP); Model View Control(MVC);</li>\n</ul>\n<p><img alt=\"modules todo\" data-src=\"https://d2h0cx97tjks2p.cloudfront.net/blogs/wp-content/uploads/sites/2/2018/06/Spring-Framework-Modules-01.jpg\"></p>\n<p><br><br><br></p>\n<p>[^1]: DI 기능에 대해서는 다음에 따로 포스트할 예정(포스팅 하면 수정!!)</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"스프링-프레임워크-모듈\"><a href=\"#스프링-프레임워크-모듈\" class=\"headerlink\" title=\"스프링 프레임워크 모듈\"></a>스프링 프레임워크 모듈</h2><p><img alt=\"framework modules\" data-src=\"https://docs.spring.io/spring/docs/4.3.22.RELEASE/spring-framework-reference/htmlsingle/images/spring-overview.png\"></p>\n<p>위 그림에 나와있듯이 스프링 프레임워크는 약 20개의 모듈들로 이루어져 있습니다.</p>\n<ul>\n<li>Data Access/Integration; Web; AOP; Aspects; Instrumentation; Messaging; Core Container; and Test;</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">모듈 그룹</th>\n<th align=\"center\">설명</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Core Container</td>\n<td align=\"center\">* 스프링 프레임워크의 기본 모듈을 포함</td>\n</tr>\n<tr>\n<td align=\"center\">AOP 및 Instrumentation</td>\n<td align=\"center\">* 관점 지향 프로그래밍(AOP; Aspect-Oriented Programming) 및 Class Instrumentation을 지원하는 모듈을 포함</td>\n</tr>\n<tr>\n<td align=\"center\">Messaging</td>\n<td align=\"center\">* 프로그래밍 모듈을 기반으로한 스프링 MVC 어노테이션 처럼 메세지를 메소드에 맵핑 시키는 어노테이션의 세트를 포함</td>\n</tr>\n<tr>\n<td align=\"center\">Data Access/Inegration</td>\n<td align=\"center\">* DB 및 메시징 공급자와의 상호작용을 간소화하는 모듈을 포함</td>\n</tr>\n<tr>\n<td align=\"center\">Web</td>\n<td align=\"center\">* 웹 및 포틀릿 애플리케이션 개발을 간소화하는 모듈을 포함</td>\n</tr>\n<tr>\n<td align=\"center\">Test</td>\n<td align=\"center\">* 단위 및 통합 테스트 생성을 간소화하는 모듈 하나를 포함</td>\n</tr>\n</tbody></table>\n<p> 이처럼 스프링은 <strong>웹 애플리케이션 개발, 데이터베이스 접근, 트랜잭션 관리, 단위 및 통합 테스트 생성</strong> 등등 엔터프라이즈 애플리케이션 개발의 모든 측면을 지원하고 이렇게 다양한 기능 중 우리는 필요한 것만 선택적으로 사용하면 됩니다.</p>\n<p>만약 개발하고 있는 애플리케이션에서 스프링의 DI 기능[^1]을 사용하려면 Core Container 모듈 그룹에 속한 Spring-Core나 Spring-Beans 모듈을 선택해 사용하면 됩니다.</p>\n<h3 id=\"스프링-프레임워크-모듈-간-상호의존성\"><a href=\"#스프링-프레임워크-모듈-간-상호의존성\" class=\"headerlink\" title=\"스프링 프레임워크 모듈 간 상호의존성\"></a>스프링 프레임워크 모듈 간 상호의존성</h3><p><img alt=\"dependency\" data-src=\"https://1.bp.blogspot.com/-8MEJX0VwvO8/Wi0I3qLwk7I/AAAAAAAAgo0/nu7QGP77ZjA8hgCHdwDmjdgKNMJYjf_EACLcBGAs/s1600/1.1.png\"></p>\n<ul>\n<li><strong>Core Container</strong> 그룹이 스프링 프레임워크의 중심</li>\n<li><strong>AOP 및 Instrumentation</strong> 그룹에 포함된 모듈도 이를 의존하는 다른 모듈이 많기에 중요도가 높음</li>\n</ul>\n<p>지금은 이해가 잘 안되지만 앞으로 각각의 모듈들에 대해 자세히 알아볼 예정입니다.</p>\n<p>다음 포스팅에서는 각각의 모듈들을 알아가기 전에 꼭 알아둬야하는 개념들을 가볍게 집고 넘어가겠습니다.</p>\n<ul>\n<li>제어의 역적(IoC); 의존성 주입(DI); 관전 지향 프로그래밍(AOP); Model View Control(MVC);</li>\n</ul>\n<p><img alt=\"modules todo\" data-src=\"https://d2h0cx97tjks2p.cloudfront.net/blogs/wp-content/uploads/sites/2/2018/06/Spring-Framework-Modules-01.jpg\"></p>\n<p><br><br><br></p>\n<p>[^1]: DI 기능에 대해서는 다음에 따로 포스트할 예정(포스팅 하면 수정!!)</p>\n"},{"title":"스프링 - POJO","author":{"nick":"TAEJIN","link":null},"date":"2019-02-03T15:59:18.000Z","subtitle":"POJO에 대해서 알아보자","cover":"https://spring.io/img/spring-by-pivotal.png","_content":"\n### Reference\n\n[Plain Old Java Object-위키](https://ko.wikipedia.org/wiki/Plain_Old_Java_Object)\n[POJO(Plain Old Java Object)](https://itewbm.tistory.com/entry/POJOPlain-Old-Java-Object)\n\n------\n\n` 아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.`\n\n## POJO\n\n:heavy_check_mark: **Plain Old Java Object** : (직역) 평범한 옛날 자바 객체\n\n 처음에 단순히 정의를 검색하다보니 정말 단순한 자바 객체인 것 같은데 왜 굳이 POJO라는 단어를 사용하는지 혼란스러웠습니다. Stack Overflow 같은데서도 자바빈과 비교하는 토론이 있기도하고 솔직히 현재도 완전히 이해했다고는 할 수 없지만 제가 생각하는 내용을 적었습니다.\n\n\n\n##### POJO의 탄생\n\n> Any fool can write code that a computer an understand. Good programmers write code that humans can understand.\n> 컴퓨터가 이해하는 코드는 어느 바보나 짤 수 있다. 좋은 프로그래머는 사람이 이해하는 코드를 짠다.\n>\n> > Martin Fowler, <<리팩토링>>\n\n<img style=\"float:right; height:150px;\" src=\"https://martinfowler.com/img/mf-cologne.jpg\">\n\n POJO는 리팩토링과 애자일 소프트웨어 개발로 유명한 영국의 소프트웨어 개발자 **마틴 파울러** 가 2000년 가을에 열렸던 어느 컨퍼런스의 발표를 준비하면서 처음 사용한 단어입니다. 그는 당시 <u>EJB(Enterprise JavaBean) 보다는 단순한 자바 오브젝트에 도메인 로직을 넣어 사용하는 것이 여러가지 장점이 있는데 왜 사람들이 EJB가 아닌 '평범한 자바 오브젝트'를 사용하기를 꺼려하하는지에 대해 의문을 가졌습니다</u> 그래서 그의 생각을 널리 알리기 위해 그는 개발자들의 심리를 이용한 기발한 전략을 세웠습니다. POJO라는 용어를 만들고 이를 기반으로한 기술을 사용한다고 발표하여 다른 개발자들에게 마치 새로운 첨단 기술인 듯한 인상을 주었습니다.\n 정리하자면, 마틴 파울러는\n\n- 자바 개발자들에게 **단순하고 평범한 자바 오브젝트 사용을 권장** 하고\n- **자신의 생각을 효과적으로 전달** 하기 위해 POJO라는 단어를 사용 했습니다\n  Cf) 이를 계기로 다른 분야에서도 비슷한 용어들이 생긴 것을 보면 그의 전략이 성공적이 였다는 것을 쉽게 알 수 있습니다.\n  - Plain Old Data Structures(PODS) - C++ 언어에서 오직 C 언어의 특징만 사용하는 경우\n  - Plain Old Documentation(POD) - 펄(Perl) 언어에서 사용\n  - Plain Old PHP Object(POPO) - PHP 언어에서 사용\n\n\n\n이제 겨우 POJO의 형체가 희미하게 보이는 것 같습니다. 이 친구를 더 자세히 알기 위해선,\n\n- EJB(Enterprise JavaBean)는 무엇이며 어떤 문제점이 있는가\n- POJO란 그럼 그저 EJB 이전의 방식으로 돌아가는 것인가\n  를 알아야 겠다고 생각했습니다.\n\n\n\n##### Enterprise JavaBean의 등장\n\n기술이 발전하면서 자바의 기초적인 JDK만으로 복잡해져가는 기업의 비즈니스 로직을 구현하는 것은 개발자들에게 부담이 되었습니다. 이러한 문제를 해결하기 위해 EJB가 등장하였고,  **'EJB를 사용하면 개발자는 로우레벨의 기술들에 관심을 가질 필요 없이 애플리케이션 개발을 쉽게 만들 수 있다'** 라고 EJB 1.0의 스펙에서 제시 되었습니다.\n 하지만 현실은 불필요할 만큼 과도한 엔지니어링으로 <u>EJB는 실패한 케이스</u>라고 많은 개발자들이 이야기합니다.\n\n- 1% 미만의 애플리케이션에만 필요한 멀티 DB를 위한 분산 트랜잭션(무거운 JTA 기반의 글로번 트랜잭션 관리 기능)\n- 고가의 WAS(CPU 당 몇 백에서 몇 천만 원) 필요\n- EJB 컴포넌트는 컨테이너 밖에서는 정상적으로 동작하지 않음(많은 시간이 걸리는 수정-빌드-배표-테스트 과정 반복)\n- 간단한 기능에 대해서 조차 자동화 테스트를 만드는 것이 거의 불가능\n- **EJB 스텍을 따르는 비즈니스 오브젝트들은 객체지향적인 특징과 장점을 포기해야 함**\n\n 결국 마틴 파울러와 같은 많은 오피니언 리더들은 EJB와 같은 잘못 설계된 과도한 기술을 피하고, 객체지향 원리에 따라 만들어진 자바 언어의 기본에 충실하게 비즈니스 로직을 구현하는 일명 *POJO 방식* 으로 돌아서야 한다고 지적하였습니다.\n\n\n\n##### POJO 프레임워크\n\n이때까지 내용을 되짚어 보면 **POJO란 결국 단순하고 기본에 충실한 자바 오브젝트로 되돌아 가는 것**인데 그렇다면 또다시 로우레벨의 API를 이용해 복잡한 코드를 작성해야 하고, 많은 기술적인 문제들을 애플리케이션 코드에 그대로 노출시켜 개발해야 한다는 문제로 돌아간다는 것이 아닌가? 하는 의문이 생길 것 입니다.\n 개발자들이 비즈니스 로직에만 집중할 수 있는 애플리케이션 복잡도를 제거하는 장점은 그대로 가져가면서, 객체지향적인 설계와 자동화된 테스트의 편의성 등을 다시 회복시키기 위해 등장한 것이 바로 **POJO 기반의 프레임워크** 입니다! 가장 대표적인 프레임워크 제품으로는 *하이버네이트* 와 *스프링* 이 있습니다.\n\n<br><br><br>\n","source":"_posts/20190204-spring-pojo.md","raw":"---\ntitle: 스프링 - POJO\nauthor:\n  nick: TAEJIN\n  link: null\ncategories:\n  - WEB\n  - SPRING\ntags:\n  - SPRING\n  - POJO\ndate: 2019-02-04 00:59:18\nsubtitle: POJO에 대해서 알아보자\ncover: https://spring.io/img/spring-by-pivotal.png\n\n\n---\n\n### Reference\n\n[Plain Old Java Object-위키](https://ko.wikipedia.org/wiki/Plain_Old_Java_Object)\n[POJO(Plain Old Java Object)](https://itewbm.tistory.com/entry/POJOPlain-Old-Java-Object)\n\n------\n\n` 아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.`\n\n## POJO\n\n:heavy_check_mark: **Plain Old Java Object** : (직역) 평범한 옛날 자바 객체\n\n 처음에 단순히 정의를 검색하다보니 정말 단순한 자바 객체인 것 같은데 왜 굳이 POJO라는 단어를 사용하는지 혼란스러웠습니다. Stack Overflow 같은데서도 자바빈과 비교하는 토론이 있기도하고 솔직히 현재도 완전히 이해했다고는 할 수 없지만 제가 생각하는 내용을 적었습니다.\n\n\n\n##### POJO의 탄생\n\n> Any fool can write code that a computer an understand. Good programmers write code that humans can understand.\n> 컴퓨터가 이해하는 코드는 어느 바보나 짤 수 있다. 좋은 프로그래머는 사람이 이해하는 코드를 짠다.\n>\n> > Martin Fowler, <<리팩토링>>\n\n<img style=\"float:right; height:150px;\" src=\"https://martinfowler.com/img/mf-cologne.jpg\">\n\n POJO는 리팩토링과 애자일 소프트웨어 개발로 유명한 영국의 소프트웨어 개발자 **마틴 파울러** 가 2000년 가을에 열렸던 어느 컨퍼런스의 발표를 준비하면서 처음 사용한 단어입니다. 그는 당시 <u>EJB(Enterprise JavaBean) 보다는 단순한 자바 오브젝트에 도메인 로직을 넣어 사용하는 것이 여러가지 장점이 있는데 왜 사람들이 EJB가 아닌 '평범한 자바 오브젝트'를 사용하기를 꺼려하하는지에 대해 의문을 가졌습니다</u> 그래서 그의 생각을 널리 알리기 위해 그는 개발자들의 심리를 이용한 기발한 전략을 세웠습니다. POJO라는 용어를 만들고 이를 기반으로한 기술을 사용한다고 발표하여 다른 개발자들에게 마치 새로운 첨단 기술인 듯한 인상을 주었습니다.\n 정리하자면, 마틴 파울러는\n\n- 자바 개발자들에게 **단순하고 평범한 자바 오브젝트 사용을 권장** 하고\n- **자신의 생각을 효과적으로 전달** 하기 위해 POJO라는 단어를 사용 했습니다\n  Cf) 이를 계기로 다른 분야에서도 비슷한 용어들이 생긴 것을 보면 그의 전략이 성공적이 였다는 것을 쉽게 알 수 있습니다.\n  - Plain Old Data Structures(PODS) - C++ 언어에서 오직 C 언어의 특징만 사용하는 경우\n  - Plain Old Documentation(POD) - 펄(Perl) 언어에서 사용\n  - Plain Old PHP Object(POPO) - PHP 언어에서 사용\n\n\n\n이제 겨우 POJO의 형체가 희미하게 보이는 것 같습니다. 이 친구를 더 자세히 알기 위해선,\n\n- EJB(Enterprise JavaBean)는 무엇이며 어떤 문제점이 있는가\n- POJO란 그럼 그저 EJB 이전의 방식으로 돌아가는 것인가\n  를 알아야 겠다고 생각했습니다.\n\n\n\n##### Enterprise JavaBean의 등장\n\n기술이 발전하면서 자바의 기초적인 JDK만으로 복잡해져가는 기업의 비즈니스 로직을 구현하는 것은 개발자들에게 부담이 되었습니다. 이러한 문제를 해결하기 위해 EJB가 등장하였고,  **'EJB를 사용하면 개발자는 로우레벨의 기술들에 관심을 가질 필요 없이 애플리케이션 개발을 쉽게 만들 수 있다'** 라고 EJB 1.0의 스펙에서 제시 되었습니다.\n 하지만 현실은 불필요할 만큼 과도한 엔지니어링으로 <u>EJB는 실패한 케이스</u>라고 많은 개발자들이 이야기합니다.\n\n- 1% 미만의 애플리케이션에만 필요한 멀티 DB를 위한 분산 트랜잭션(무거운 JTA 기반의 글로번 트랜잭션 관리 기능)\n- 고가의 WAS(CPU 당 몇 백에서 몇 천만 원) 필요\n- EJB 컴포넌트는 컨테이너 밖에서는 정상적으로 동작하지 않음(많은 시간이 걸리는 수정-빌드-배표-테스트 과정 반복)\n- 간단한 기능에 대해서 조차 자동화 테스트를 만드는 것이 거의 불가능\n- **EJB 스텍을 따르는 비즈니스 오브젝트들은 객체지향적인 특징과 장점을 포기해야 함**\n\n 결국 마틴 파울러와 같은 많은 오피니언 리더들은 EJB와 같은 잘못 설계된 과도한 기술을 피하고, 객체지향 원리에 따라 만들어진 자바 언어의 기본에 충실하게 비즈니스 로직을 구현하는 일명 *POJO 방식* 으로 돌아서야 한다고 지적하였습니다.\n\n\n\n##### POJO 프레임워크\n\n이때까지 내용을 되짚어 보면 **POJO란 결국 단순하고 기본에 충실한 자바 오브젝트로 되돌아 가는 것**인데 그렇다면 또다시 로우레벨의 API를 이용해 복잡한 코드를 작성해야 하고, 많은 기술적인 문제들을 애플리케이션 코드에 그대로 노출시켜 개발해야 한다는 문제로 돌아간다는 것이 아닌가? 하는 의문이 생길 것 입니다.\n 개발자들이 비즈니스 로직에만 집중할 수 있는 애플리케이션 복잡도를 제거하는 장점은 그대로 가져가면서, 객체지향적인 설계와 자동화된 테스트의 편의성 등을 다시 회복시키기 위해 등장한 것이 바로 **POJO 기반의 프레임워크** 입니다! 가장 대표적인 프레임워크 제품으로는 *하이버네이트* 와 *스프링* 이 있습니다.\n\n<br><br><br>\n","slug":"spring-pojo","published":1,"updated":"2019-07-16T13:49:47.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt84h001p2646m2q1w6xu","content":"<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rby53aWtpcGVkaWEub3JnL3dpa2kvUGxhaW5fT2xkX0phdmFfT2JqZWN0\" title=\"https://ko.wikipedia.org/wiki/Plain_Old_Java_Object\">Plain Old Java Object-위키<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pdGV3Ym0udGlzdG9yeS5jb20vZW50cnkvUE9KT1BsYWluLU9sZC1KYXZhLU9iamVjdA==\" title=\"https://itewbm.tistory.com/entry/POJOPlain-Old-Java-Object\">POJO(Plain Old Java Object)<i class=\"fa fa-external-link\"></i></span></p>\n<hr>\n<p><code>아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.</code></p>\n<h2 id=\"POJO\"><a href=\"#POJO\" class=\"headerlink\" title=\"POJO\"></a>POJO</h2><p>:heavy_check_mark: <strong>Plain Old Java Object</strong> : (직역) 평범한 옛날 자바 객체</p>\n<p> 처음에 단순히 정의를 검색하다보니 정말 단순한 자바 객체인 것 같은데 왜 굳이 POJO라는 단어를 사용하는지 혼란스러웠습니다. Stack Overflow 같은데서도 자바빈과 비교하는 토론이 있기도하고 솔직히 현재도 완전히 이해했다고는 할 수 없지만 제가 생각하는 내용을 적었습니다.</p>\n<h5 id=\"POJO의-탄생\"><a href=\"#POJO의-탄생\" class=\"headerlink\" title=\"POJO의 탄생\"></a>POJO의 탄생</h5><blockquote>\n<p>Any fool can write code that a computer an understand. Good programmers write code that humans can understand.<br>컴퓨터가 이해하는 코드는 어느 바보나 짤 수 있다. 좋은 프로그래머는 사람이 이해하는 코드를 짠다.</p>\n<blockquote>\n<p>Martin Fowler, &lt;&lt;리팩토링&gt;&gt;</p>\n</blockquote>\n</blockquote>\n<img style=\"float:right; height:150px;\" data-src=\"https://martinfowler.com/img/mf-cologne.jpg\">\n\n<p> POJO는 리팩토링과 애자일 소프트웨어 개발로 유명한 영국의 소프트웨어 개발자 <strong>마틴 파울러</strong> 가 2000년 가을에 열렸던 어느 컨퍼런스의 발표를 준비하면서 처음 사용한 단어입니다. 그는 당시 <u>EJB(Enterprise JavaBean) 보다는 단순한 자바 오브젝트에 도메인 로직을 넣어 사용하는 것이 여러가지 장점이 있는데 왜 사람들이 EJB가 아닌 ‘평범한 자바 오브젝트’를 사용하기를 꺼려하하는지에 대해 의문을 가졌습니다</u> 그래서 그의 생각을 널리 알리기 위해 그는 개발자들의 심리를 이용한 기발한 전략을 세웠습니다. POJO라는 용어를 만들고 이를 기반으로한 기술을 사용한다고 발표하여 다른 개발자들에게 마치 새로운 첨단 기술인 듯한 인상을 주었습니다.<br> 정리하자면, 마틴 파울러는</p>\n<ul>\n<li>자바 개발자들에게 <strong>단순하고 평범한 자바 오브젝트 사용을 권장</strong> 하고</li>\n<li><strong>자신의 생각을 효과적으로 전달</strong> 하기 위해 POJO라는 단어를 사용 했습니다<br>Cf) 이를 계기로 다른 분야에서도 비슷한 용어들이 생긴 것을 보면 그의 전략이 성공적이 였다는 것을 쉽게 알 수 있습니다.<ul>\n<li>Plain Old Data Structures(PODS) - C++ 언어에서 오직 C 언어의 특징만 사용하는 경우</li>\n<li>Plain Old Documentation(POD) - 펄(Perl) 언어에서 사용</li>\n<li>Plain Old PHP Object(POPO) - PHP 언어에서 사용</li>\n</ul>\n</li>\n</ul>\n<p>이제 겨우 POJO의 형체가 희미하게 보이는 것 같습니다. 이 친구를 더 자세히 알기 위해선,</p>\n<ul>\n<li>EJB(Enterprise JavaBean)는 무엇이며 어떤 문제점이 있는가</li>\n<li>POJO란 그럼 그저 EJB 이전의 방식으로 돌아가는 것인가<br>를 알아야 겠다고 생각했습니다.</li>\n</ul>\n<h5 id=\"Enterprise-JavaBean의-등장\"><a href=\"#Enterprise-JavaBean의-등장\" class=\"headerlink\" title=\"Enterprise JavaBean의 등장\"></a>Enterprise JavaBean의 등장</h5><p>기술이 발전하면서 자바의 기초적인 JDK만으로 복잡해져가는 기업의 비즈니스 로직을 구현하는 것은 개발자들에게 부담이 되었습니다. 이러한 문제를 해결하기 위해 EJB가 등장하였고,  <strong>‘EJB를 사용하면 개발자는 로우레벨의 기술들에 관심을 가질 필요 없이 애플리케이션 개발을 쉽게 만들 수 있다’</strong> 라고 EJB 1.0의 스펙에서 제시 되었습니다.<br> 하지만 현실은 불필요할 만큼 과도한 엔지니어링으로 <u>EJB는 실패한 케이스</u>라고 많은 개발자들이 이야기합니다.</p>\n<ul>\n<li><p>1% 미만의 애플리케이션에만 필요한 멀티 DB를 위한 분산 트랜잭션(무거운 JTA 기반의 글로번 트랜잭션 관리 기능)</p>\n</li>\n<li><p>고가의 WAS(CPU 당 몇 백에서 몇 천만 원) 필요</p>\n</li>\n<li><p>EJB 컴포넌트는 컨테이너 밖에서는 정상적으로 동작하지 않음(많은 시간이 걸리는 수정-빌드-배표-테스트 과정 반복)</p>\n</li>\n<li><p>간단한 기능에 대해서 조차 자동화 테스트를 만드는 것이 거의 불가능</p>\n</li>\n<li><p><strong>EJB 스텍을 따르는 비즈니스 오브젝트들은 객체지향적인 특징과 장점을 포기해야 함</strong></p>\n<p>결국 마틴 파울러와 같은 많은 오피니언 리더들은 EJB와 같은 잘못 설계된 과도한 기술을 피하고, 객체지향 원리에 따라 만들어진 자바 언어의 기본에 충실하게 비즈니스 로직을 구현하는 일명 <em>POJO 방식</em> 으로 돌아서야 한다고 지적하였습니다.</p>\n</li>\n</ul>\n<h5 id=\"POJO-프레임워크\"><a href=\"#POJO-프레임워크\" class=\"headerlink\" title=\"POJO 프레임워크\"></a>POJO 프레임워크</h5><p>이때까지 내용을 되짚어 보면 <strong>POJO란 결국 단순하고 기본에 충실한 자바 오브젝트로 되돌아 가는 것</strong>인데 그렇다면 또다시 로우레벨의 API를 이용해 복잡한 코드를 작성해야 하고, 많은 기술적인 문제들을 애플리케이션 코드에 그대로 노출시켜 개발해야 한다는 문제로 돌아간다는 것이 아닌가? 하는 의문이 생길 것 입니다.<br> 개발자들이 비즈니스 로직에만 집중할 수 있는 애플리케이션 복잡도를 제거하는 장점은 그대로 가져가면서, 객체지향적인 설계와 자동화된 테스트의 편의성 등을 다시 회복시키기 위해 등장한 것이 바로 <strong>POJO 기반의 프레임워크</strong> 입니다! 가장 대표적인 프레임워크 제품으로는 <em>하이버네이트</em> 와 <em>스프링</em> 이 있습니다.</p>\n<p><br><br><br></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rby53aWtpcGVkaWEub3JnL3dpa2kvUGxhaW5fT2xkX0phdmFfT2JqZWN0\" title=\"https://ko.wikipedia.org/wiki/Plain_Old_Java_Object\">Plain Old Java Object-위키<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pdGV3Ym0udGlzdG9yeS5jb20vZW50cnkvUE9KT1BsYWluLU9sZC1KYXZhLU9iamVjdA==\" title=\"https://itewbm.tistory.com/entry/POJOPlain-Old-Java-Object\">POJO(Plain Old Java Object)<i class=\"fa fa-external-link\"></i></span></p>\n<hr>\n<p><code>아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.</code></p>\n<h2 id=\"POJO\"><a href=\"#POJO\" class=\"headerlink\" title=\"POJO\"></a>POJO</h2><p>:heavy_check_mark: <strong>Plain Old Java Object</strong> : (직역) 평범한 옛날 자바 객체</p>\n<p> 처음에 단순히 정의를 검색하다보니 정말 단순한 자바 객체인 것 같은데 왜 굳이 POJO라는 단어를 사용하는지 혼란스러웠습니다. Stack Overflow 같은데서도 자바빈과 비교하는 토론이 있기도하고 솔직히 현재도 완전히 이해했다고는 할 수 없지만 제가 생각하는 내용을 적었습니다.</p>\n<h5 id=\"POJO의-탄생\"><a href=\"#POJO의-탄생\" class=\"headerlink\" title=\"POJO의 탄생\"></a>POJO의 탄생</h5><blockquote>\n<p>Any fool can write code that a computer an understand. Good programmers write code that humans can understand.<br>컴퓨터가 이해하는 코드는 어느 바보나 짤 수 있다. 좋은 프로그래머는 사람이 이해하는 코드를 짠다.</p>\n<blockquote>\n<p>Martin Fowler, &lt;&lt;리팩토링&gt;&gt;</p>\n</blockquote>\n</blockquote>\n<img style=\"float:right; height:150px;\" data-src=\"https://martinfowler.com/img/mf-cologne.jpg\">\n\n<p> POJO는 리팩토링과 애자일 소프트웨어 개발로 유명한 영국의 소프트웨어 개발자 <strong>마틴 파울러</strong> 가 2000년 가을에 열렸던 어느 컨퍼런스의 발표를 준비하면서 처음 사용한 단어입니다. 그는 당시 <u>EJB(Enterprise JavaBean) 보다는 단순한 자바 오브젝트에 도메인 로직을 넣어 사용하는 것이 여러가지 장점이 있는데 왜 사람들이 EJB가 아닌 ‘평범한 자바 오브젝트’를 사용하기를 꺼려하하는지에 대해 의문을 가졌습니다</u> 그래서 그의 생각을 널리 알리기 위해 그는 개발자들의 심리를 이용한 기발한 전략을 세웠습니다. POJO라는 용어를 만들고 이를 기반으로한 기술을 사용한다고 발표하여 다른 개발자들에게 마치 새로운 첨단 기술인 듯한 인상을 주었습니다.<br> 정리하자면, 마틴 파울러는</p>\n<ul>\n<li>자바 개발자들에게 <strong>단순하고 평범한 자바 오브젝트 사용을 권장</strong> 하고</li>\n<li><strong>자신의 생각을 효과적으로 전달</strong> 하기 위해 POJO라는 단어를 사용 했습니다<br>Cf) 이를 계기로 다른 분야에서도 비슷한 용어들이 생긴 것을 보면 그의 전략이 성공적이 였다는 것을 쉽게 알 수 있습니다.<ul>\n<li>Plain Old Data Structures(PODS) - C++ 언어에서 오직 C 언어의 특징만 사용하는 경우</li>\n<li>Plain Old Documentation(POD) - 펄(Perl) 언어에서 사용</li>\n<li>Plain Old PHP Object(POPO) - PHP 언어에서 사용</li>\n</ul>\n</li>\n</ul>\n<p>이제 겨우 POJO의 형체가 희미하게 보이는 것 같습니다. 이 친구를 더 자세히 알기 위해선,</p>\n<ul>\n<li>EJB(Enterprise JavaBean)는 무엇이며 어떤 문제점이 있는가</li>\n<li>POJO란 그럼 그저 EJB 이전의 방식으로 돌아가는 것인가<br>를 알아야 겠다고 생각했습니다.</li>\n</ul>\n<h5 id=\"Enterprise-JavaBean의-등장\"><a href=\"#Enterprise-JavaBean의-등장\" class=\"headerlink\" title=\"Enterprise JavaBean의 등장\"></a>Enterprise JavaBean의 등장</h5><p>기술이 발전하면서 자바의 기초적인 JDK만으로 복잡해져가는 기업의 비즈니스 로직을 구현하는 것은 개발자들에게 부담이 되었습니다. 이러한 문제를 해결하기 위해 EJB가 등장하였고,  <strong>‘EJB를 사용하면 개발자는 로우레벨의 기술들에 관심을 가질 필요 없이 애플리케이션 개발을 쉽게 만들 수 있다’</strong> 라고 EJB 1.0의 스펙에서 제시 되었습니다.<br> 하지만 현실은 불필요할 만큼 과도한 엔지니어링으로 <u>EJB는 실패한 케이스</u>라고 많은 개발자들이 이야기합니다.</p>\n<ul>\n<li><p>1% 미만의 애플리케이션에만 필요한 멀티 DB를 위한 분산 트랜잭션(무거운 JTA 기반의 글로번 트랜잭션 관리 기능)</p>\n</li>\n<li><p>고가의 WAS(CPU 당 몇 백에서 몇 천만 원) 필요</p>\n</li>\n<li><p>EJB 컴포넌트는 컨테이너 밖에서는 정상적으로 동작하지 않음(많은 시간이 걸리는 수정-빌드-배표-테스트 과정 반복)</p>\n</li>\n<li><p>간단한 기능에 대해서 조차 자동화 테스트를 만드는 것이 거의 불가능</p>\n</li>\n<li><p><strong>EJB 스텍을 따르는 비즈니스 오브젝트들은 객체지향적인 특징과 장점을 포기해야 함</strong></p>\n<p>결국 마틴 파울러와 같은 많은 오피니언 리더들은 EJB와 같은 잘못 설계된 과도한 기술을 피하고, 객체지향 원리에 따라 만들어진 자바 언어의 기본에 충실하게 비즈니스 로직을 구현하는 일명 <em>POJO 방식</em> 으로 돌아서야 한다고 지적하였습니다.</p>\n</li>\n</ul>\n<h5 id=\"POJO-프레임워크\"><a href=\"#POJO-프레임워크\" class=\"headerlink\" title=\"POJO 프레임워크\"></a>POJO 프레임워크</h5><p>이때까지 내용을 되짚어 보면 <strong>POJO란 결국 단순하고 기본에 충실한 자바 오브젝트로 되돌아 가는 것</strong>인데 그렇다면 또다시 로우레벨의 API를 이용해 복잡한 코드를 작성해야 하고, 많은 기술적인 문제들을 애플리케이션 코드에 그대로 노출시켜 개발해야 한다는 문제로 돌아간다는 것이 아닌가? 하는 의문이 생길 것 입니다.<br> 개발자들이 비즈니스 로직에만 집중할 수 있는 애플리케이션 복잡도를 제거하는 장점은 그대로 가져가면서, 객체지향적인 설계와 자동화된 테스트의 편의성 등을 다시 회복시키기 위해 등장한 것이 바로 <strong>POJO 기반의 프레임워크</strong> 입니다! 가장 대표적인 프레임워크 제품으로는 <em>하이버네이트</em> 와 <em>스프링</em> 이 있습니다.</p>\n<p><br><br><br></p>\n"},{"title":"스프링 프레임워크 핵심 개념","author":{"nick":"TAEJIN","link":null},"date":"2019-02-02T06:16:10.000Z","subtitle":"스프링 프레임워크의 핵심 기술","cover":"https://spring.io/img/spring-by-pivotal.png","_content":"\n### Reference\n\n[Spring의 시작, 프레임워크의 구성요소와 동작원리](https://asfirstalways.tistory.com/334)\n[스프링 프레임워크 핵심](https://scroogy.atlassian.net/wiki/spaces/SPRING/pages/1114310)\n\n**POJO**\n[스프링 프레임워크 1 - POJO에 대하여](https://limmmee.tistory.com/8)\n[POJO vs JavaBeans](https://www.geeksforgeeks.org/pojo-vs-java-beans/)\n[Understanding : POJO](https://spring.io/understanding/POJO)\n\n**IoC/DI**\n[스프링 프레임워크 2 - 컨테이너와 IoC](https://limmmee.tistory.com/13?category=654011)\n[Spring 프레임워크 소개와 IoC 및 Spring IoC의 개념](http://wiki.javajigi.net/pages/viewpage.action?pageId=3664)\n[세 가지 DI 컨테이너로 향하는 저녁 산책](www.nextree.co.kr/p11247/)\n[스프링이 도대체 뭐란 말인가?](http://springmvc.egloos.com/487497)\n\n\n\n------\n\n\n## 핵심 개념들\n\n- 스프링 프레임워크를 공부하면서 자주 언급되고 매우 중요하다고 생각하는 용어들을 정리했습니다\n- 아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.\n\n![spring triangle](https://dhsim86.github.io/static/assets/img/blog/web/2017-11-18-toby_spring_08_what_is_spring//00.png)\n\n------\n\n\n\n### POJO\n\n이해가 어려우신 분들은 간략히,\n\n- 스프링 프레임워크를 사용하면 **POJO로 애플리케이션을 만들고 엔터프라이즈 서비스를 비침투적으로 POJO에 적용할 수 있다**\n- **모든 JavaBeans는 POJO 이지만, 모든 POJO는 JavaBeans가 아니다**\n\n![pojo&javabean](https://cdncontribute.geeksforgeeks.org/wp-content/uploads/pojo.jpg)\n\n이 정도만 숙지하고 넘어가셔도 상관 없을 것 같습니다.\n\n\n\n:heavy_check_mark: **Plain Old Java Object** : (직역) 평범한 옛날 자바 객체\n\n더 자세한 내용은 다른 포스트에서 다루겠지만, 간략히 스프링 공식 홈페이지에서는 POJO를 다음과 같이 소개합니다.\n\n> By using plain old Java objects, your code is much more simplified, which lends to better testing, flexibility, and ability to change technical decisions at future stages based on knowledge and shifting requirements.\n\nPOJO를 사용함으로써,\n\n- 코드가 간결해져서 테스트하기 편해지고 (비즈니스 로직과 특정 환결/로우 레벨 종속적인 코드를 분리함)\n  쉽게 말해 인터페이스, 상속이 없는 것\n- 유연해서 객체지향적 설계의 자유료운 사용이 가능\n\n\n\n**POJO 기반의 프레임워크 == 스프링 프레임워크**\n\n많은 POJO 프레임워크가 있고 하이버네이트와 스프링이 대표적이라고 할 수 있습니다. (이 둘의 차이점은 굳이 자세히 알아보지는 않겠습니다.) 스프링 프레임워크가 <u>많은 POJO 프레임워크 제품 중 하나</u>라는 정도로 알고 넘어가셔도 좋습니다.\n\n\n\n**진정한 POJO 프로그래밍**\n\n<u>자바의 객체지향적인 특징을 살려 비즈니스 로직에 충실한 개발이 가능하도록 하는 것이 진정한 POJO 프로그래밍</u>이라고 할 수 있습니다. 마치 자바를 처음 배울 때 흔히 하는 실수로, 개발은 자바로 하지만 실제로는 C 언어를 배우며 익숙해진 절차지향 방식으로 구현하는 것을 생각하시면 되겠습니다. 따라서 POJO 프레임워크 제품을 사용한다고 해서 자동으로 POJO 형식의 개발을 하고 있다고 할 수 없음을 인지하고 계셔야 합니다.\n\n- 객체지향적인 설계원칙에 충실하도록 개발되어 있는지\n- 테스트 코드 개발의 용이성이나 테스트 코드를 잘 작성했는지\n\n를 잘 확인하시면서 POJO 프로그래밍의 장점을 잘 살려 스프링 프레임워크의 활용도를 극대화하려고 노력해야 할 것 같습니다.\n\n\n\n------\n\n\n\n### IoC / DI\n\n개인적으로 재밌었던 표현이라 그대로 참조한 블로그[스프링이 도대체 뭐란 말인가?](http://springmvc.egloos.com/487497)(꼭 읽어보면 좋을 것 같습니다)의 표현을 그대로 인용하자면, 간략하게 이 둘을 **\"대신 해줌(IoC)\"** 과 **\"미리 찜해 놓음(DI)\"** 이라고 설명하였습니다.\n **정신 나간듯 언제 사용될 지도 모르는 코드를 쳐대면서(IoC) 동시에 사용하고 있는 코드가 뭔지도 모르면서 일단 갖다 쓰는(DI) 획기적이고 진보적인 프로그래밍 작성 방식** 으로 IoC/DI의 개념을 표현하였고 어려우시면 이 정도로 이해하고 일단 넘어가시는 것도 좋을 것 같습니다.\n\n\n\n![ioc](https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory&fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F252FCF3B5231689B17B553)\n\n:heavy_check_mark: **Inversion of Control** : 제어의 역전\n\n- **제어권(Control)**\n  : 자바 객체의 생성, 생명주기 관리, 객체간의 의존관계를 연결시키는 등의 행위에 대한 권한\n\n\n\n- 객체에 대한 제어 권한이 바뀌는 것 즉, 제어 권한을 다른 대상에게 위임하는 것이라는 의미 (개발자 -> 컨테이너)\n- 프레임워크에서 개발자는 필요한 부분을 개발해서 \"조립\"하는 방식을 취하는데, 이렇게 조립된 코드의 최종 호출은 <u>개발자에 의해서 제어되는 것이 아니라 프레임워크 내부 동작 원리에 따라 이루어짐</u>. 이를 **제어의 역전** 이라고 표현\n- 스프링 프레임워크에서 지원하는 IoC Container는 POJO의 생명주기를 관리, 생성된 인스턴트들에게 추가적인 기능들을 제공\n  cf) 라이브러리 vs 프레임워크 --> IoC의 개념이 적용되었나의 차이\n\n\n\n:heavy_check_mark: **Dependency Injection** : 의존성 주입\n\n- **의존성(Dependency)**\n  : 현재 객체가 다른 객체와 상호작용(참조)하고 있다면, 다른 객체들을 현재 객체의 의존 이라고 표현\n\n\n\n- **DI는 스프링 프레임워크에서 지원하는 IoC의 형태**\n\n- DI는 <u>클래스 사이의 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동적으로 연결</u>\n\n  예시)\n\n  ***Ioc/DI 가 적용되지 않은 경우***\n\n![instance](http://www.nextree.co.kr/content/images/2016/09/yrkim-140701-framework-02.png)\n\n```java\npackage kr.co.study;\n\npublic class Foo\n{\n    private Bar bar;\n\n    public Foo(){\n        bar = new SubBar();\t//Bar 인터페이스를 구현하는 구체적인 클래스 SubBar로 초기화\n    }\n}\n```\n\n\n\n​\t***Ioc/DI 가 적용되지 않은 경우***\n\n![inject](http://www.nextree.co.kr/content/images/2016/09/yrkim-140701-framework-03.png)\n\n```html\n//Container\n<beans>\n\t<bean id=\"bar\" class=\"kr.co.study.SubBar\">\n    <bean id=\"foo\" class=\"kr.co.study.Foo\">\n        <property name=\"bar\" ref=\"bar\"/>\t\t<!-- 사용할 객체들을 컨테이너에 등록 -->\n    </bean>\n</beans>\n```\n```java\n//application code\npackage kr.co.study;\n\npublic class Foo\n{\n    private Bar bar;\n\n    public void setBar(Bar bar){\t//사용할 객체를 매겨변수로 받아와 동적으로 의존관계를 설정\n        this.bar = bar;\t\t\t\t//Bar 인터페이스를 구현하는 구체적인 클래스 이름이 등장하지 않음\n    }\n}\n```\n\n\n\n- 마틴 파울러가 그의 저서인 'Inversion of Control Containers and the Dependency Injection pattern'에서 세가지 DI 패턴을 제시\n  - setter() 메소드를 이용한 의존성 삽입(Setter Injection)\n  - 생성자를 이용한 의존성 삽입 (Constructor Injection)\n  - 초기화 인터페이스를 이용한 의존성 삽입(Interface Injection)\n\n<br>\n- 스프링 프레임워크에서의 DI 패턴\n  1. XML을 통한 의존성 주입\n     - 생성자를 통한 의존성 주입 : <constructor-arg> 태그와 ref 속성 이용\n     - 속성을 통한 의존성 주입 : <property> 태그를 사용, name 속성값이 호출하고자 하는 메소드의 이름\n  2. Annotation을 통한 의존성 주입\n     **@Autowired** 라는 어노테이션을 통해 의존성 주입. 비슷한 역할로 **@Resource** 어노테이션도 존재.\n     둘의 차이점은 bean을 탐색하는 우선순위의 기준\n\n------\n\n\n\n### AOP\n\n- AOP의 핵심은 **관심 분리(Separation of Concerns)** 로써, <u>비즈니스 메소드를 개발할 때, 핵심 비즈니스 로직과 공통 로직을 분리함으로써 응집도가 높게 개발할 수 있도록 지원하는 것</u> 입니다.\n\n  ![aop](https://t1.daumcdn.net/cfile/tistory/185DF4334FA8A1FD01)\n\n\n\n:heavy_check_mark: **Aspect Oriented Programming** : 관점 지향 프로그래밍\n\n- 핵심적인 비즈니스 로직과 관련이 없으나 모듈성을 높일 목적으로 여러 곳에서 공통적으로 쓰이는 기능들을 분리( separating cross-cutting concerns)하여 개발하고 실행 시에 서로 조합\n- Logging, Security, Transaction 등을 aspect라는 특별한 객체로 모듈화, weaving이라는 작업을 통해 모듈화한 코드를 핵심 기능에 넣음\n\n\n\n\n\n------\n\n\n\n### PSA\n\n:heavy_check_mark: **Potable Service Abstraction** : (이식 가능한)일관성 있는 서비스 추상화\n\n- POJO로 개발된 코드는 특정 환경이나 구현 방식에 종속적이지 않아야 함\n  (특정 환경에 종속적이지 않다는 게 그런 기술을 사용하지 않는다는 뜻은 아님)\n- 스프링은 완성도가 높은 라이브러리와 연결할 수 있는 인터페이스를 제공\n\n\n------\n\n\n\n\n<br><br><br>\n","source":"_posts/20190202-spring-keywords.md","raw":"---\ntitle: 스프링 프레임워크 핵심 개념\nauthor:\n  nick: TAEJIN\n  link: null\ncategories:\n  - WEB\n  - SPRING\ntags:\n  - SPRING\ndate: 2019-02-02 15:16:10\nsubtitle: 스프링 프레임워크의 핵심 기술\ncover: https://spring.io/img/spring-by-pivotal.png\n\n\n---\n\n### Reference\n\n[Spring의 시작, 프레임워크의 구성요소와 동작원리](https://asfirstalways.tistory.com/334)\n[스프링 프레임워크 핵심](https://scroogy.atlassian.net/wiki/spaces/SPRING/pages/1114310)\n\n**POJO**\n[스프링 프레임워크 1 - POJO에 대하여](https://limmmee.tistory.com/8)\n[POJO vs JavaBeans](https://www.geeksforgeeks.org/pojo-vs-java-beans/)\n[Understanding : POJO](https://spring.io/understanding/POJO)\n\n**IoC/DI**\n[스프링 프레임워크 2 - 컨테이너와 IoC](https://limmmee.tistory.com/13?category=654011)\n[Spring 프레임워크 소개와 IoC 및 Spring IoC의 개념](http://wiki.javajigi.net/pages/viewpage.action?pageId=3664)\n[세 가지 DI 컨테이너로 향하는 저녁 산책](www.nextree.co.kr/p11247/)\n[스프링이 도대체 뭐란 말인가?](http://springmvc.egloos.com/487497)\n\n\n\n------\n\n\n## 핵심 개념들\n\n- 스프링 프레임워크를 공부하면서 자주 언급되고 매우 중요하다고 생각하는 용어들을 정리했습니다\n- 아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.\n\n![spring triangle](https://dhsim86.github.io/static/assets/img/blog/web/2017-11-18-toby_spring_08_what_is_spring//00.png)\n\n------\n\n\n\n### POJO\n\n이해가 어려우신 분들은 간략히,\n\n- 스프링 프레임워크를 사용하면 **POJO로 애플리케이션을 만들고 엔터프라이즈 서비스를 비침투적으로 POJO에 적용할 수 있다**\n- **모든 JavaBeans는 POJO 이지만, 모든 POJO는 JavaBeans가 아니다**\n\n![pojo&javabean](https://cdncontribute.geeksforgeeks.org/wp-content/uploads/pojo.jpg)\n\n이 정도만 숙지하고 넘어가셔도 상관 없을 것 같습니다.\n\n\n\n:heavy_check_mark: **Plain Old Java Object** : (직역) 평범한 옛날 자바 객체\n\n더 자세한 내용은 다른 포스트에서 다루겠지만, 간략히 스프링 공식 홈페이지에서는 POJO를 다음과 같이 소개합니다.\n\n> By using plain old Java objects, your code is much more simplified, which lends to better testing, flexibility, and ability to change technical decisions at future stages based on knowledge and shifting requirements.\n\nPOJO를 사용함으로써,\n\n- 코드가 간결해져서 테스트하기 편해지고 (비즈니스 로직과 특정 환결/로우 레벨 종속적인 코드를 분리함)\n  쉽게 말해 인터페이스, 상속이 없는 것\n- 유연해서 객체지향적 설계의 자유료운 사용이 가능\n\n\n\n**POJO 기반의 프레임워크 == 스프링 프레임워크**\n\n많은 POJO 프레임워크가 있고 하이버네이트와 스프링이 대표적이라고 할 수 있습니다. (이 둘의 차이점은 굳이 자세히 알아보지는 않겠습니다.) 스프링 프레임워크가 <u>많은 POJO 프레임워크 제품 중 하나</u>라는 정도로 알고 넘어가셔도 좋습니다.\n\n\n\n**진정한 POJO 프로그래밍**\n\n<u>자바의 객체지향적인 특징을 살려 비즈니스 로직에 충실한 개발이 가능하도록 하는 것이 진정한 POJO 프로그래밍</u>이라고 할 수 있습니다. 마치 자바를 처음 배울 때 흔히 하는 실수로, 개발은 자바로 하지만 실제로는 C 언어를 배우며 익숙해진 절차지향 방식으로 구현하는 것을 생각하시면 되겠습니다. 따라서 POJO 프레임워크 제품을 사용한다고 해서 자동으로 POJO 형식의 개발을 하고 있다고 할 수 없음을 인지하고 계셔야 합니다.\n\n- 객체지향적인 설계원칙에 충실하도록 개발되어 있는지\n- 테스트 코드 개발의 용이성이나 테스트 코드를 잘 작성했는지\n\n를 잘 확인하시면서 POJO 프로그래밍의 장점을 잘 살려 스프링 프레임워크의 활용도를 극대화하려고 노력해야 할 것 같습니다.\n\n\n\n------\n\n\n\n### IoC / DI\n\n개인적으로 재밌었던 표현이라 그대로 참조한 블로그[스프링이 도대체 뭐란 말인가?](http://springmvc.egloos.com/487497)(꼭 읽어보면 좋을 것 같습니다)의 표현을 그대로 인용하자면, 간략하게 이 둘을 **\"대신 해줌(IoC)\"** 과 **\"미리 찜해 놓음(DI)\"** 이라고 설명하였습니다.\n **정신 나간듯 언제 사용될 지도 모르는 코드를 쳐대면서(IoC) 동시에 사용하고 있는 코드가 뭔지도 모르면서 일단 갖다 쓰는(DI) 획기적이고 진보적인 프로그래밍 작성 방식** 으로 IoC/DI의 개념을 표현하였고 어려우시면 이 정도로 이해하고 일단 넘어가시는 것도 좋을 것 같습니다.\n\n\n\n![ioc](https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory&fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F252FCF3B5231689B17B553)\n\n:heavy_check_mark: **Inversion of Control** : 제어의 역전\n\n- **제어권(Control)**\n  : 자바 객체의 생성, 생명주기 관리, 객체간의 의존관계를 연결시키는 등의 행위에 대한 권한\n\n\n\n- 객체에 대한 제어 권한이 바뀌는 것 즉, 제어 권한을 다른 대상에게 위임하는 것이라는 의미 (개발자 -> 컨테이너)\n- 프레임워크에서 개발자는 필요한 부분을 개발해서 \"조립\"하는 방식을 취하는데, 이렇게 조립된 코드의 최종 호출은 <u>개발자에 의해서 제어되는 것이 아니라 프레임워크 내부 동작 원리에 따라 이루어짐</u>. 이를 **제어의 역전** 이라고 표현\n- 스프링 프레임워크에서 지원하는 IoC Container는 POJO의 생명주기를 관리, 생성된 인스턴트들에게 추가적인 기능들을 제공\n  cf) 라이브러리 vs 프레임워크 --> IoC의 개념이 적용되었나의 차이\n\n\n\n:heavy_check_mark: **Dependency Injection** : 의존성 주입\n\n- **의존성(Dependency)**\n  : 현재 객체가 다른 객체와 상호작용(참조)하고 있다면, 다른 객체들을 현재 객체의 의존 이라고 표현\n\n\n\n- **DI는 스프링 프레임워크에서 지원하는 IoC의 형태**\n\n- DI는 <u>클래스 사이의 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동적으로 연결</u>\n\n  예시)\n\n  ***Ioc/DI 가 적용되지 않은 경우***\n\n![instance](http://www.nextree.co.kr/content/images/2016/09/yrkim-140701-framework-02.png)\n\n```java\npackage kr.co.study;\n\npublic class Foo\n{\n    private Bar bar;\n\n    public Foo(){\n        bar = new SubBar();\t//Bar 인터페이스를 구현하는 구체적인 클래스 SubBar로 초기화\n    }\n}\n```\n\n\n\n​\t***Ioc/DI 가 적용되지 않은 경우***\n\n![inject](http://www.nextree.co.kr/content/images/2016/09/yrkim-140701-framework-03.png)\n\n```html\n//Container\n<beans>\n\t<bean id=\"bar\" class=\"kr.co.study.SubBar\">\n    <bean id=\"foo\" class=\"kr.co.study.Foo\">\n        <property name=\"bar\" ref=\"bar\"/>\t\t<!-- 사용할 객체들을 컨테이너에 등록 -->\n    </bean>\n</beans>\n```\n```java\n//application code\npackage kr.co.study;\n\npublic class Foo\n{\n    private Bar bar;\n\n    public void setBar(Bar bar){\t//사용할 객체를 매겨변수로 받아와 동적으로 의존관계를 설정\n        this.bar = bar;\t\t\t\t//Bar 인터페이스를 구현하는 구체적인 클래스 이름이 등장하지 않음\n    }\n}\n```\n\n\n\n- 마틴 파울러가 그의 저서인 'Inversion of Control Containers and the Dependency Injection pattern'에서 세가지 DI 패턴을 제시\n  - setter() 메소드를 이용한 의존성 삽입(Setter Injection)\n  - 생성자를 이용한 의존성 삽입 (Constructor Injection)\n  - 초기화 인터페이스를 이용한 의존성 삽입(Interface Injection)\n\n<br>\n- 스프링 프레임워크에서의 DI 패턴\n  1. XML을 통한 의존성 주입\n     - 생성자를 통한 의존성 주입 : <constructor-arg> 태그와 ref 속성 이용\n     - 속성을 통한 의존성 주입 : <property> 태그를 사용, name 속성값이 호출하고자 하는 메소드의 이름\n  2. Annotation을 통한 의존성 주입\n     **@Autowired** 라는 어노테이션을 통해 의존성 주입. 비슷한 역할로 **@Resource** 어노테이션도 존재.\n     둘의 차이점은 bean을 탐색하는 우선순위의 기준\n\n------\n\n\n\n### AOP\n\n- AOP의 핵심은 **관심 분리(Separation of Concerns)** 로써, <u>비즈니스 메소드를 개발할 때, 핵심 비즈니스 로직과 공통 로직을 분리함으로써 응집도가 높게 개발할 수 있도록 지원하는 것</u> 입니다.\n\n  ![aop](https://t1.daumcdn.net/cfile/tistory/185DF4334FA8A1FD01)\n\n\n\n:heavy_check_mark: **Aspect Oriented Programming** : 관점 지향 프로그래밍\n\n- 핵심적인 비즈니스 로직과 관련이 없으나 모듈성을 높일 목적으로 여러 곳에서 공통적으로 쓰이는 기능들을 분리( separating cross-cutting concerns)하여 개발하고 실행 시에 서로 조합\n- Logging, Security, Transaction 등을 aspect라는 특별한 객체로 모듈화, weaving이라는 작업을 통해 모듈화한 코드를 핵심 기능에 넣음\n\n\n\n\n\n------\n\n\n\n### PSA\n\n:heavy_check_mark: **Potable Service Abstraction** : (이식 가능한)일관성 있는 서비스 추상화\n\n- POJO로 개발된 코드는 특정 환경이나 구현 방식에 종속적이지 않아야 함\n  (특정 환경에 종속적이지 않다는 게 그런 기술을 사용하지 않는다는 뜻은 아님)\n- 스프링은 완성도가 높은 라이브러리와 연결할 수 있는 인터페이스를 제공\n\n\n------\n\n\n\n\n<br><br><br>\n","slug":"spring-keywords","published":1,"updated":"2019-07-16T13:50:01.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt84o001s2646ib6nqpzz","content":"<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2ZpcnN0YWx3YXlzLnRpc3RvcnkuY29tLzMzNA==\" title=\"https://asfirstalways.tistory.com/334\">Spring의 시작, 프레임워크의 구성요소와 동작원리<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zY3Jvb2d5LmF0bGFzc2lhbi5uZXQvd2lraS9zcGFjZXMvU1BSSU5HL3BhZ2VzLzExMTQzMTA=\" title=\"https://scroogy.atlassian.net/wiki/spaces/SPRING/pages/1114310\">스프링 프레임워크 핵심<i class=\"fa fa-external-link\"></i></span></p>\n<p><strong>POJO</strong><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW1tbWVlLnRpc3RvcnkuY29tLzg=\" title=\"https://limmmee.tistory.com/8\">스프링 프레임워크 1 - POJO에 대하여<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvcG9qby12cy1qYXZhLWJlYW5zLw==\" title=\"https://www.geeksforgeeks.org/pojo-vs-java-beans/\">POJO vs JavaBeans<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vdW5kZXJzdGFuZGluZy9QT0pP\" title=\"https://spring.io/understanding/POJO\">Understanding : POJO<i class=\"fa fa-external-link\"></i></span></p>\n<p><strong>IoC/DI</strong><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW1tbWVlLnRpc3RvcnkuY29tLzEzP2NhdGVnb3J5PTY1NDAxMQ==\" title=\"https://limmmee.tistory.com/13?category=654011\">스프링 프레임워크 2 - 컨테이너와 IoC<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuamF2YWppZ2kubmV0L3BhZ2VzL3ZpZXdwYWdlLmFjdGlvbj9wYWdlSWQ9MzY2NA==\" title=\"http://wiki.javajigi.net/pages/viewpage.action?pageId=3664\">Spring 프레임워크 소개와 IoC 및 Spring IoC의 개념<i class=\"fa fa-external-link\"></i></span><br><a href=\"www.nextree.co.kr/p11247/\">세 가지 DI 컨테이너로 향하는 저녁 산책</a><br><span class=\"exturl\" data-url=\"aHR0cDovL3NwcmluZ212Yy5lZ2xvb3MuY29tLzQ4NzQ5Nw==\" title=\"http://springmvc.egloos.com/487497\">스프링이 도대체 뭐란 말인가?<i class=\"fa fa-external-link\"></i></span></p>\n<hr>\n<h2 id=\"핵심-개념들\"><a href=\"#핵심-개념들\" class=\"headerlink\" title=\"핵심 개념들\"></a>핵심 개념들</h2><ul>\n<li>스프링 프레임워크를 공부하면서 자주 언급되고 매우 중요하다고 생각하는 용어들을 정리했습니다</li>\n<li>아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.</li>\n</ul>\n<p><img alt=\"spring triangle\" data-src=\"https://dhsim86.github.io/static/assets/img/blog/web/2017-11-18-toby_spring_08_what_is_spring//00.png\"></p>\n<hr>\n<h3 id=\"POJO\"><a href=\"#POJO\" class=\"headerlink\" title=\"POJO\"></a>POJO</h3><p>이해가 어려우신 분들은 간략히,</p>\n<ul>\n<li>스프링 프레임워크를 사용하면 <strong>POJO로 애플리케이션을 만들고 엔터프라이즈 서비스를 비침투적으로 POJO에 적용할 수 있다</strong></li>\n<li><strong>모든 JavaBeans는 POJO 이지만, 모든 POJO는 JavaBeans가 아니다</strong></li>\n</ul>\n<p><img alt=\"pojo&amp;javabean\" data-src=\"https://cdncontribute.geeksforgeeks.org/wp-content/uploads/pojo.jpg\"></p>\n<p>이 정도만 숙지하고 넘어가셔도 상관 없을 것 같습니다.</p>\n<p>:heavy_check_mark: <strong>Plain Old Java Object</strong> : (직역) 평범한 옛날 자바 객체</p>\n<p>더 자세한 내용은 다른 포스트에서 다루겠지만, 간략히 스프링 공식 홈페이지에서는 POJO를 다음과 같이 소개합니다.</p>\n<blockquote>\n<p>By using plain old Java objects, your code is much more simplified, which lends to better testing, flexibility, and ability to change technical decisions at future stages based on knowledge and shifting requirements.</p>\n</blockquote>\n<p>POJO를 사용함으로써,</p>\n<ul>\n<li>코드가 간결해져서 테스트하기 편해지고 (비즈니스 로직과 특정 환결/로우 레벨 종속적인 코드를 분리함)<br>쉽게 말해 인터페이스, 상속이 없는 것</li>\n<li>유연해서 객체지향적 설계의 자유료운 사용이 가능</li>\n</ul>\n<p><strong>POJO 기반의 프레임워크 == 스프링 프레임워크</strong></p>\n<p>많은 POJO 프레임워크가 있고 하이버네이트와 스프링이 대표적이라고 할 수 있습니다. (이 둘의 차이점은 굳이 자세히 알아보지는 않겠습니다.) 스프링 프레임워크가 <u>많은 POJO 프레임워크 제품 중 하나</u>라는 정도로 알고 넘어가셔도 좋습니다.</p>\n<p><strong>진정한 POJO 프로그래밍</strong></p>\n<p><u>자바의 객체지향적인 특징을 살려 비즈니스 로직에 충실한 개발이 가능하도록 하는 것이 진정한 POJO 프로그래밍</u>이라고 할 수 있습니다. 마치 자바를 처음 배울 때 흔히 하는 실수로, 개발은 자바로 하지만 실제로는 C 언어를 배우며 익숙해진 절차지향 방식으로 구현하는 것을 생각하시면 되겠습니다. 따라서 POJO 프레임워크 제품을 사용한다고 해서 자동으로 POJO 형식의 개발을 하고 있다고 할 수 없음을 인지하고 계셔야 합니다.</p>\n<ul>\n<li>객체지향적인 설계원칙에 충실하도록 개발되어 있는지</li>\n<li>테스트 코드 개발의 용이성이나 테스트 코드를 잘 작성했는지</li>\n</ul>\n<p>를 잘 확인하시면서 POJO 프로그래밍의 장점을 잘 살려 스프링 프레임워크의 활용도를 극대화하려고 노력해야 할 것 같습니다.</p>\n<hr>\n<h3 id=\"IoC-DI\"><a href=\"#IoC-DI\" class=\"headerlink\" title=\"IoC / DI\"></a>IoC / DI</h3><p>개인적으로 재밌었던 표현이라 그대로 참조한 블로그<span class=\"exturl\" data-url=\"aHR0cDovL3NwcmluZ212Yy5lZ2xvb3MuY29tLzQ4NzQ5Nw==\" title=\"http://springmvc.egloos.com/487497\">스프링이 도대체 뭐란 말인가?<i class=\"fa fa-external-link\"></i></span>(꼭 읽어보면 좋을 것 같습니다)의 표현을 그대로 인용하자면, 간략하게 이 둘을 <strong>“대신 해줌(IoC)”</strong> 과 <strong>“미리 찜해 놓음(DI)”</strong> 이라고 설명하였습니다.<br> <strong>정신 나간듯 언제 사용될 지도 모르는 코드를 쳐대면서(IoC) 동시에 사용하고 있는 코드가 뭔지도 모르면서 일단 갖다 쓰는(DI) 획기적이고 진보적인 프로그래밍 작성 방식</strong> 으로 IoC/DI의 개념을 표현하였고 어려우시면 이 정도로 이해하고 일단 넘어가시는 것도 좋을 것 같습니다.</p>\n<p><img alt=\"ioc\" data-src=\"https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory&fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F252FCF3B5231689B17B553\"></p>\n<p>:heavy_check_mark: <strong>Inversion of Control</strong> : 제어의 역전</p>\n<ul>\n<li><strong>제어권(Control)</strong><br>: 자바 객체의 생성, 생명주기 관리, 객체간의 의존관계를 연결시키는 등의 행위에 대한 권한</li>\n</ul>\n<ul>\n<li>객체에 대한 제어 권한이 바뀌는 것 즉, 제어 권한을 다른 대상에게 위임하는 것이라는 의미 (개발자 -&gt; 컨테이너)</li>\n<li>프레임워크에서 개발자는 필요한 부분을 개발해서 “조립”하는 방식을 취하는데, 이렇게 조립된 코드의 최종 호출은 <u>개발자에 의해서 제어되는 것이 아니라 프레임워크 내부 동작 원리에 따라 이루어짐</u>. 이를 <strong>제어의 역전</strong> 이라고 표현</li>\n<li>스프링 프레임워크에서 지원하는 IoC Container는 POJO의 생명주기를 관리, 생성된 인스턴트들에게 추가적인 기능들을 제공<br>cf) 라이브러리 vs 프레임워크 –&gt; IoC의 개념이 적용되었나의 차이</li>\n</ul>\n<p>:heavy_check_mark: <strong>Dependency Injection</strong> : 의존성 주입</p>\n<ul>\n<li><strong>의존성(Dependency)</strong><br>: 현재 객체가 다른 객체와 상호작용(참조)하고 있다면, 다른 객체들을 현재 객체의 의존 이라고 표현</li>\n</ul>\n<ul>\n<li><p><strong>DI는 스프링 프레임워크에서 지원하는 IoC의 형태</strong></p>\n</li>\n<li><p>DI는 <u>클래스 사이의 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동적으로 연결</u></p>\n<p>예시)</p>\n<p><strong><em>Ioc/DI 가 적용되지 않은 경우</em></strong></p>\n</li>\n</ul>\n<p><img alt=\"instance\" data-src=\"http://www.nextree.co.kr/content/images/2016/09/yrkim-140701-framework-02.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> kr.co.study;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Bar bar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        bar = <span class=\"keyword\">new</span> SubBar();\t<span class=\"comment\">//Bar 인터페이스를 구현하는 구체적인 클래스 SubBar로 초기화</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    <strong><em>Ioc/DI 가 적용되지 않은 경우</em></strong></p>\n<p><img alt=\"inject\" data-src=\"http://www.nextree.co.kr/content/images/2016/09/yrkim-140701-framework-03.png\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">//Container</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bar\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"kr.co.study.SubBar\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"kr.co.study.Foo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bar\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bar\"</span>/&gt;</span>\t\t<span class=\"comment\">&lt;!-- 사용할 객체들을 컨테이너에 등록 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//application code</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> kr.co.study;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Bar bar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBar</span><span class=\"params\">(Bar bar)</span></span>&#123;\t<span class=\"comment\">//사용할 객체를 매겨변수로 받아와 동적으로 의존관계를 설정</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bar = bar;\t\t\t\t<span class=\"comment\">//Bar 인터페이스를 구현하는 구체적인 클래스 이름이 등장하지 않음</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>마틴 파울러가 그의 저서인 ‘Inversion of Control Containers and the Dependency Injection pattern’에서 세가지 DI 패턴을 제시<ul>\n<li>setter() 메소드를 이용한 의존성 삽입(Setter Injection)</li>\n<li>생성자를 이용한 의존성 삽입 (Constructor Injection)</li>\n<li>초기화 인터페이스를 이용한 의존성 삽입(Interface Injection)</li>\n</ul>\n</li>\n</ul>\n<br>\n- 스프링 프레임워크에서의 DI 패턴\n  1. XML을 통한 의존성 주입\n     - 생성자를 통한 의존성 주입 : <constructor-arg> 태그와 ref 속성 이용\n     - 속성을 통한 의존성 주입 : <property> 태그를 사용, name 속성값이 호출하고자 하는 메소드의 이름\n  2. Annotation을 통한 의존성 주입\n     **@Autowired** 라는 어노테이션을 통해 의존성 주입. 비슷한 역할로 **@Resource** 어노테이션도 존재.\n     둘의 차이점은 bean을 탐색하는 우선순위의 기준\n\n<hr>\n<h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><ul>\n<li><p>AOP의 핵심은 <strong>관심 분리(Separation of Concerns)</strong> 로써, <u>비즈니스 메소드를 개발할 때, 핵심 비즈니스 로직과 공통 로직을 분리함으로써 응집도가 높게 개발할 수 있도록 지원하는 것</u> 입니다.</p>\n<p><img alt=\"aop\" data-src=\"https://t1.daumcdn.net/cfile/tistory/185DF4334FA8A1FD01\"></p>\n</li>\n</ul>\n<p>:heavy_check_mark: <strong>Aspect Oriented Programming</strong> : 관점 지향 프로그래밍</p>\n<ul>\n<li>핵심적인 비즈니스 로직과 관련이 없으나 모듈성을 높일 목적으로 여러 곳에서 공통적으로 쓰이는 기능들을 분리( separating cross-cutting concerns)하여 개발하고 실행 시에 서로 조합</li>\n<li>Logging, Security, Transaction 등을 aspect라는 특별한 객체로 모듈화, weaving이라는 작업을 통해 모듈화한 코드를 핵심 기능에 넣음</li>\n</ul>\n<hr>\n<h3 id=\"PSA\"><a href=\"#PSA\" class=\"headerlink\" title=\"PSA\"></a>PSA</h3><p>:heavy_check_mark: <strong>Potable Service Abstraction</strong> : (이식 가능한)일관성 있는 서비스 추상화</p>\n<ul>\n<li>POJO로 개발된 코드는 특정 환경이나 구현 방식에 종속적이지 않아야 함<br>(특정 환경에 종속적이지 않다는 게 그런 기술을 사용하지 않는다는 뜻은 아님)</li>\n<li>스프링은 완성도가 높은 라이브러리와 연결할 수 있는 인터페이스를 제공</li>\n</ul>\n<hr>\n<p><br><br><br></p>\n</property></constructor-arg><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2ZpcnN0YWx3YXlzLnRpc3RvcnkuY29tLzMzNA==\" title=\"https://asfirstalways.tistory.com/334\">Spring의 시작, 프레임워크의 구성요소와 동작원리<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zY3Jvb2d5LmF0bGFzc2lhbi5uZXQvd2lraS9zcGFjZXMvU1BSSU5HL3BhZ2VzLzExMTQzMTA=\" title=\"https://scroogy.atlassian.net/wiki/spaces/SPRING/pages/1114310\">스프링 프레임워크 핵심<i class=\"fa fa-external-link\"></i></span></p>\n<p><strong>POJO</strong><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW1tbWVlLnRpc3RvcnkuY29tLzg=\" title=\"https://limmmee.tistory.com/8\">스프링 프레임워크 1 - POJO에 대하여<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvcG9qby12cy1qYXZhLWJlYW5zLw==\" title=\"https://www.geeksforgeeks.org/pojo-vs-java-beans/\">POJO vs JavaBeans<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vdW5kZXJzdGFuZGluZy9QT0pP\" title=\"https://spring.io/understanding/POJO\">Understanding : POJO<i class=\"fa fa-external-link\"></i></span></p>\n<p><strong>IoC/DI</strong><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW1tbWVlLnRpc3RvcnkuY29tLzEzP2NhdGVnb3J5PTY1NDAxMQ==\" title=\"https://limmmee.tistory.com/13?category=654011\">스프링 프레임워크 2 - 컨테이너와 IoC<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuamF2YWppZ2kubmV0L3BhZ2VzL3ZpZXdwYWdlLmFjdGlvbj9wYWdlSWQ9MzY2NA==\" title=\"http://wiki.javajigi.net/pages/viewpage.action?pageId=3664\">Spring 프레임워크 소개와 IoC 및 Spring IoC의 개념<i class=\"fa fa-external-link\"></i></span><br><a href=\"www.nextree.co.kr/p11247/\">세 가지 DI 컨테이너로 향하는 저녁 산책</a><br><span class=\"exturl\" data-url=\"aHR0cDovL3NwcmluZ212Yy5lZ2xvb3MuY29tLzQ4NzQ5Nw==\" title=\"http://springmvc.egloos.com/487497\">스프링이 도대체 뭐란 말인가?<i class=\"fa fa-external-link\"></i></span></p>\n<hr>\n<h2 id=\"핵심-개념들\"><a href=\"#핵심-개념들\" class=\"headerlink\" title=\"핵심 개념들\"></a>핵심 개념들</h2><ul>\n<li>스프링 프레임워크를 공부하면서 자주 언급되고 매우 중요하다고 생각하는 용어들을 정리했습니다</li>\n<li>아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.</li>\n</ul>\n<p><img alt=\"spring triangle\" data-src=\"https://dhsim86.github.io/static/assets/img/blog/web/2017-11-18-toby_spring_08_what_is_spring//00.png\"></p>\n<hr>\n<h3 id=\"POJO\"><a href=\"#POJO\" class=\"headerlink\" title=\"POJO\"></a>POJO</h3><p>이해가 어려우신 분들은 간략히,</p>\n<ul>\n<li>스프링 프레임워크를 사용하면 <strong>POJO로 애플리케이션을 만들고 엔터프라이즈 서비스를 비침투적으로 POJO에 적용할 수 있다</strong></li>\n<li><strong>모든 JavaBeans는 POJO 이지만, 모든 POJO는 JavaBeans가 아니다</strong></li>\n</ul>\n<p><img alt=\"pojo&amp;javabean\" data-src=\"https://cdncontribute.geeksforgeeks.org/wp-content/uploads/pojo.jpg\"></p>\n<p>이 정도만 숙지하고 넘어가셔도 상관 없을 것 같습니다.</p>\n<p>:heavy_check_mark: <strong>Plain Old Java Object</strong> : (직역) 평범한 옛날 자바 객체</p>\n<p>더 자세한 내용은 다른 포스트에서 다루겠지만, 간략히 스프링 공식 홈페이지에서는 POJO를 다음과 같이 소개합니다.</p>\n<blockquote>\n<p>By using plain old Java objects, your code is much more simplified, which lends to better testing, flexibility, and ability to change technical decisions at future stages based on knowledge and shifting requirements.</p>\n</blockquote>\n<p>POJO를 사용함으로써,</p>\n<ul>\n<li>코드가 간결해져서 테스트하기 편해지고 (비즈니스 로직과 특정 환결/로우 레벨 종속적인 코드를 분리함)<br>쉽게 말해 인터페이스, 상속이 없는 것</li>\n<li>유연해서 객체지향적 설계의 자유료운 사용이 가능</li>\n</ul>\n<p><strong>POJO 기반의 프레임워크 == 스프링 프레임워크</strong></p>\n<p>많은 POJO 프레임워크가 있고 하이버네이트와 스프링이 대표적이라고 할 수 있습니다. (이 둘의 차이점은 굳이 자세히 알아보지는 않겠습니다.) 스프링 프레임워크가 <u>많은 POJO 프레임워크 제품 중 하나</u>라는 정도로 알고 넘어가셔도 좋습니다.</p>\n<p><strong>진정한 POJO 프로그래밍</strong></p>\n<p><u>자바의 객체지향적인 특징을 살려 비즈니스 로직에 충실한 개발이 가능하도록 하는 것이 진정한 POJO 프로그래밍</u>이라고 할 수 있습니다. 마치 자바를 처음 배울 때 흔히 하는 실수로, 개발은 자바로 하지만 실제로는 C 언어를 배우며 익숙해진 절차지향 방식으로 구현하는 것을 생각하시면 되겠습니다. 따라서 POJO 프레임워크 제품을 사용한다고 해서 자동으로 POJO 형식의 개발을 하고 있다고 할 수 없음을 인지하고 계셔야 합니다.</p>\n<ul>\n<li>객체지향적인 설계원칙에 충실하도록 개발되어 있는지</li>\n<li>테스트 코드 개발의 용이성이나 테스트 코드를 잘 작성했는지</li>\n</ul>\n<p>를 잘 확인하시면서 POJO 프로그래밍의 장점을 잘 살려 스프링 프레임워크의 활용도를 극대화하려고 노력해야 할 것 같습니다.</p>\n<hr>\n<h3 id=\"IoC-DI\"><a href=\"#IoC-DI\" class=\"headerlink\" title=\"IoC / DI\"></a>IoC / DI</h3><p>개인적으로 재밌었던 표현이라 그대로 참조한 블로그<span class=\"exturl\" data-url=\"aHR0cDovL3NwcmluZ212Yy5lZ2xvb3MuY29tLzQ4NzQ5Nw==\" title=\"http://springmvc.egloos.com/487497\">스프링이 도대체 뭐란 말인가?<i class=\"fa fa-external-link\"></i></span>(꼭 읽어보면 좋을 것 같습니다)의 표현을 그대로 인용하자면, 간략하게 이 둘을 <strong>“대신 해줌(IoC)”</strong> 과 <strong>“미리 찜해 놓음(DI)”</strong> 이라고 설명하였습니다.<br> <strong>정신 나간듯 언제 사용될 지도 모르는 코드를 쳐대면서(IoC) 동시에 사용하고 있는 코드가 뭔지도 모르면서 일단 갖다 쓰는(DI) 획기적이고 진보적인 프로그래밍 작성 방식</strong> 으로 IoC/DI의 개념을 표현하였고 어려우시면 이 정도로 이해하고 일단 넘어가시는 것도 좋을 것 같습니다.</p>\n<p><img alt=\"ioc\" data-src=\"https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory&fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F252FCF3B5231689B17B553\"></p>\n<p>:heavy_check_mark: <strong>Inversion of Control</strong> : 제어의 역전</p>\n<ul>\n<li><strong>제어권(Control)</strong><br>: 자바 객체의 생성, 생명주기 관리, 객체간의 의존관계를 연결시키는 등의 행위에 대한 권한</li>\n</ul>\n<ul>\n<li>객체에 대한 제어 권한이 바뀌는 것 즉, 제어 권한을 다른 대상에게 위임하는 것이라는 의미 (개발자 -&gt; 컨테이너)</li>\n<li>프레임워크에서 개발자는 필요한 부분을 개발해서 “조립”하는 방식을 취하는데, 이렇게 조립된 코드의 최종 호출은 <u>개발자에 의해서 제어되는 것이 아니라 프레임워크 내부 동작 원리에 따라 이루어짐</u>. 이를 <strong>제어의 역전</strong> 이라고 표현</li>\n<li>스프링 프레임워크에서 지원하는 IoC Container는 POJO의 생명주기를 관리, 생성된 인스턴트들에게 추가적인 기능들을 제공<br>cf) 라이브러리 vs 프레임워크 –&gt; IoC의 개념이 적용되었나의 차이</li>\n</ul>\n<p>:heavy_check_mark: <strong>Dependency Injection</strong> : 의존성 주입</p>\n<ul>\n<li><strong>의존성(Dependency)</strong><br>: 현재 객체가 다른 객체와 상호작용(참조)하고 있다면, 다른 객체들을 현재 객체의 의존 이라고 표현</li>\n</ul>\n<ul>\n<li><p><strong>DI는 스프링 프레임워크에서 지원하는 IoC의 형태</strong></p>\n</li>\n<li><p>DI는 <u>클래스 사이의 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동적으로 연결</u></p>\n<p>예시)</p>\n<p><strong><em>Ioc/DI 가 적용되지 않은 경우</em></strong></p>\n</li>\n</ul>\n<p><img alt=\"instance\" data-src=\"http://www.nextree.co.kr/content/images/2016/09/yrkim-140701-framework-02.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> kr.co.study;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Bar bar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        bar = <span class=\"keyword\">new</span> SubBar();\t<span class=\"comment\">//Bar 인터페이스를 구현하는 구체적인 클래스 SubBar로 초기화</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    <strong><em>Ioc/DI 가 적용되지 않은 경우</em></strong></p>\n<p><img alt=\"inject\" data-src=\"http://www.nextree.co.kr/content/images/2016/09/yrkim-140701-framework-03.png\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">//Container</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bar\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"kr.co.study.SubBar\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"kr.co.study.Foo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bar\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bar\"</span>/&gt;</span>\t\t<span class=\"comment\">&lt;!-- 사용할 객체들을 컨테이너에 등록 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//application code</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> kr.co.study;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Bar bar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBar</span><span class=\"params\">(Bar bar)</span></span>&#123;\t<span class=\"comment\">//사용할 객체를 매겨변수로 받아와 동적으로 의존관계를 설정</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bar = bar;\t\t\t\t<span class=\"comment\">//Bar 인터페이스를 구현하는 구체적인 클래스 이름이 등장하지 않음</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>마틴 파울러가 그의 저서인 ‘Inversion of Control Containers and the Dependency Injection pattern’에서 세가지 DI 패턴을 제시<ul>\n<li>setter() 메소드를 이용한 의존성 삽입(Setter Injection)</li>\n<li>생성자를 이용한 의존성 삽입 (Constructor Injection)</li>\n<li>초기화 인터페이스를 이용한 의존성 삽입(Interface Injection)</li>\n</ul>\n</li>\n</ul>\n<br>\n- 스프링 프레임워크에서의 DI 패턴\n  1. XML을 통한 의존성 주입\n     - 생성자를 통한 의존성 주입 : <constructor-arg> 태그와 ref 속성 이용\n     - 속성을 통한 의존성 주입 : <property> 태그를 사용, name 속성값이 호출하고자 하는 메소드의 이름\n  2. Annotation을 통한 의존성 주입\n     **@Autowired** 라는 어노테이션을 통해 의존성 주입. 비슷한 역할로 **@Resource** 어노테이션도 존재.\n     둘의 차이점은 bean을 탐색하는 우선순위의 기준\n\n<hr>\n<h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><ul>\n<li><p>AOP의 핵심은 <strong>관심 분리(Separation of Concerns)</strong> 로써, <u>비즈니스 메소드를 개발할 때, 핵심 비즈니스 로직과 공통 로직을 분리함으로써 응집도가 높게 개발할 수 있도록 지원하는 것</u> 입니다.</p>\n<p><img alt=\"aop\" data-src=\"https://t1.daumcdn.net/cfile/tistory/185DF4334FA8A1FD01\"></p>\n</li>\n</ul>\n<p>:heavy_check_mark: <strong>Aspect Oriented Programming</strong> : 관점 지향 프로그래밍</p>\n<ul>\n<li>핵심적인 비즈니스 로직과 관련이 없으나 모듈성을 높일 목적으로 여러 곳에서 공통적으로 쓰이는 기능들을 분리( separating cross-cutting concerns)하여 개발하고 실행 시에 서로 조합</li>\n<li>Logging, Security, Transaction 등을 aspect라는 특별한 객체로 모듈화, weaving이라는 작업을 통해 모듈화한 코드를 핵심 기능에 넣음</li>\n</ul>\n<hr>\n<h3 id=\"PSA\"><a href=\"#PSA\" class=\"headerlink\" title=\"PSA\"></a>PSA</h3><p>:heavy_check_mark: <strong>Potable Service Abstraction</strong> : (이식 가능한)일관성 있는 서비스 추상화</p>\n<ul>\n<li>POJO로 개발된 코드는 특정 환경이나 구현 방식에 종속적이지 않아야 함<br>(특정 환경에 종속적이지 않다는 게 그런 기술을 사용하지 않는다는 뜻은 아님)</li>\n<li>스프링은 완성도가 높은 라이브러리와 연결할 수 있는 인터페이스를 제공</li>\n</ul>\n<hr>\n<p><br><br><br></p>\n</property></constructor-arg>"},{"title":"운영체제 - Overview_1","author":{"nick":"TAEJIN","link":null},"date":"2019-02-05T10:29:30.000Z","subtitle":"운영체제 복습(소개)","cover":"https://safebytes.com/wp-content/uploads/2016/10/OperatingSystem-min.jpg","_content":"\n------\n\n# 1. 소개\n\n## 1.1 운영체제\n\n<img src=\"https://www.tutorialspoint.com/operating_system/images/conceptual_view.jpg\">\n\n<img style=\"float:right;\" src=\"https://upload.wikimedia.org/wikipedia/ko/thumb/a/a3/Operating_system_placement_kor.png/200px-Operating_system_placement_kor.png\">\n\n- 운영체제(Operating System)란?\n\n  -- 컴퓨터 하드웨어를 관리하는 프로그램\n  -- 응용 프로그램의 토대를 제공해주는 프로그램\n  -- **<span style=\"color:orange;\">사용자</span>와 <span style=\"color:red;\">하드웨어</span> 사이에 중간 매개체 역할** 을 해주는 프로그램\n\n- 운영체제 범위에 대한 정의\n  하드웨어의 종류와 용도가 다양해서 OS의 범위는 모호하게 정의됩니다​\n  정의 1) 운영체제를 구입하였을 때 포함되어 있는 모든 것\n  <u>정의 2) 항상 수행되고 있는 유일한 프로그램(보통 **Kernel** 이라고 한다)</u>\n  **대체로 2번 째 정의를 사용함**\n\n\n\n그림에서 처럼 운영체제는 컴퓨터의 사용자와 컴퓨터 하드웨어 사이에 있기 때문에 운영체제를 바라보는 관점도 두 가지로 분류할 수 있습니다.\n\n### 1.1.1 <span style=\"color:orange;\">사용자 관점</span>\n\n- **컴퓨터의 용도** 에 따라 OS의 설계 방향이 결정 됩니다.\n\n  -- 개인용 컴퓨터(Home PC user)\n  -- 메인프레임, 미니컴퓨터(Mainframe, minicomputer)\n  -- 워크스테이션(Workstation)\n  -- 휴대용 컴퓨터(Mobile devices)\n\n### 1.1.2 <span style=\"color:red;\">시스템 관점</span>\n\n- **자원 할당자(resource allocator)**\n  컴퓨터 자원(CPU 시간, 메모리 공간, 파일 저장 공간, 입출력 장치)의 할당은 공정해야 하며 효율적으로 이루어져야 합니다.\n- **제어 프로그램(control program)**\n  사용자 프로그램의 실행을 감독하여 오류와 컴퓨터 오용을 방지하고 입출력 장치의 제어와 동작을 관리 합니다.\n\n\n\n### 1.1.3 운영체제의 목표\n\n- <span style=\"color:orange;\">사용자</span>에게 편리성 제공\n- <span style=\"color:red;\">컴퓨터 시스템</span>의 효율적 운영\n\n**사용자에게 컴퓨터에서 프로그램을 효율적이고 편리하게 실행할 수 있는 환경을 제공** 하는 것 입니다!!\n\n\n\n## 1.2 메인프레임 시스템\n\n### 1.2.1 일괄처리 시스템(1950)\n\n**Batch processing system이란 처리속도를 향상 시키기 위해 유사한 요구를 필요로 하는 여러개의 작업을 함께 모아 단일 작업으로 일괄 처리하는 시스템입니다**\n\n- 운영체제는 항상 **메모리** 에 상주하고, 주 임무는 **하나의 작업에서 다음 작업으로 제어를 자동적으로 옮기는 것**\n\n- 작업을 실행하면 끝날 때까지 다른 작업을 못함\n\n- <span style=\"color:red\">기계적 입출력 장치가 전자적 장치의 속도보다 상대적으로 느려 CPU가 종종 쉬는 경우가 발생</span>\n\n\n\n<span style=\"color:blue\">직접 접근(direct access)이 가능한 디스크의 도입 : Job scheduling과 multi-programming이 가능하게 됨</span>\n\n### 1.2.2 다중 프로그램 시스템(1960)\n\n**Multi-program system 이란 여러 개의 프로그램을 동시에 메모리에 적재하여 하나의 프로그램이 대기 상태가 되면 그 동안 다른 프로그램을 실행하는 시스템입니다**\n\n- 입출력과 프로그램의 실행을 병행으로 수행할 수 있어 CPU의 사용 효율(utilization)이 증가\n- 다중 프로그래밍에서 운영체제는 사용자를 대신하여 의사결정을 수행해야 함\n  -- **Job scheduling** : 디스크에 있는 작업 저장소(Job pool)에서 작업을 선택하여 메모리로 옮기는 것\n  -- **CPU scheduling** : 실행 중인 작업이 대기 상태가 되었을 때 메모리에 있는 작업 중 하나를 선택하여 CPU에 할당하는 것\n- <span style=\"color:red\">여러 프로그램이 동시에 메모리에 상주하므로 메모리 관리가 복잡</span>\n- Multi programming을 제공하는 일괄처리 시스템은 <span style=\"color:red\">CPU의 사용 효율은 높였지만 사용자와 컴퓨터 간에 상호작용은 제공하지 못함</span>\n\n\n\n### 1.2.3 시분할 시스템(1960)\n\n**시분할(Time sharing) 또는 멀티태스킹(multi-tasking)은 다중 프로그래밍과 달리 정해진 시간이 되면 무조건 다음 순서의 작업을 실행하는 방식** 으로 교대하는 시간이 매우 짧아 프로그램이 실행되는 동안 사용자는 컴퓨터와 상호작용이 가능한 시스템입니다\n\n- 사용자와 시스템 간에 직접 상호작용이 가능한 시스템을 **대화식 컴퓨터 시스템(inter-active computer system)** 이라 하고 이런 시스템은 응답시간(response time)이 짧아야 함\n- 여러 사용자가 동시에 컴퓨터를 사용할 수 있음\n- 메모리에 적재되어 실행 중인 프로그램을 **프로세스(process)** 라고 함\n- 많은 사용자의 프로그램을 동시에 수행하기 위해서는 *주기억장치* 의 용량으로는 부족\n  <span style=\"color:blue\">디스크를 주기억장치의 보조 저장 장치로 활용으로 문제를 해결하며 가장 널리 사용되는 기법으로 가상 메모리(virtual memory)</span> 가 있습니다\n\n\n\n## 1.3 실시간 처리 시스템\n\n**Real time processing system 이란** 프로세서 작동이나 데이터 흐름에 엄격한 시간 제약이 있을 때 사용되는 방식으로 **데이터 처리 요구가 있는 즉시 수행하여 결과를 산출하는 시스템입니다**\n\n- 보통 특수 목적용(우주선 운행, 레이더 추적기, 핵물리학 실험, 은행의 온라인 업무)\n  주의) <u>실시간과 빠르다는 것은 다른 개념!!</u>\n- 엄격한 실시간 시스템(hard real-time system) : 중요한 작업이 정해진 시간 내에 완료됨을 보장\n- 완화된 실시간 시스템(soft real-time system) : 중요한 작업이 우선순위를 가지지만 엄격하게 정해진 시간 내에 완료됨을 보장하지는 않음\n\n\n\n## 1.4 분산 처리 시스템\n\n**Distributed processing system 이란** 다중처리 시스템과 마찬가지로 **여러 프로세서(컴퓨터)를 사용**하지만 밀결합 형태가 아닌 소결합(loosely coupled) 형태로 컴퓨터 버스나 클럭을 공유하지 않고, **네트워크를 통해 통신하여 하나의 작업을 처리하는 시스템입니다**\n\n- 네트워크는 사용하는 프로토콜, 망의 크기, 전송 매체에 따라 분류\n  Ex) 망의 크기 : LAN, MAN, WAN\n\n\n\n### 1.4.1 클라이언트-서버 시스템\n\n- 서버 시스템은 크게 두 가지로 분류\n  - 계산 서버 시스템(compute-server system)\n    : 클라이언트로 부터 요청을 받아 그것을 대신 수행해 준 다음에 클라이언트에게 결과를 되돌려 줌\n  - 파일 서버 시스템(file-server system)\n    : 클라이언트에게 파일 시스템 인터페이스를 제공, 클라이언트는 이 인터페이스를 통해 파일을 생성, 갱신, 삭제\n\n\n\n## 1.5 다중처리 시스템\n\n**Multi-processing system 이란 여러 개의 CPU와 하나의 주기억장치를 이용하여 여러 개의 프로그램을 동시에 처리하는 방식을 취하는 시스템입니다**\n\n- 병렬 시스템(parallel system) 또는 밀결합 시스템(tightly coupled system) 이라고도 함\n- **처리율(throughput)** : <u>N개의 프로세서를 사용한다고 처리율이 N배 증가하지는 않음 </u>\n- **경제성** : 여러 개의 단일 프로세서 시스템을 사용하는 것 보다 저렴\n- **신뢰성** : 하나의 CPU가 고장나더라도 다른 CPU를 이용하여 업무를 처리할 수 있음\n  수행되는 하드웨어의 수에 비례하여 서비스를 계속 제공할 수 있는 능력(graceful degradation)\n\n\n\n## 1.6 집단 시스템\n\n**Clustered system 이란 병렬 시스템, 분산 시스템과 마찬가지로 다중 CPU를 사용하지만 여러 개의 시스템을 밀결합하여 사용한다는 측면에서 다른 시스템입니다**\n\n- 집단화(clustering)의 목적은 높은 가용성\n- 대칭형 방식 : 각 컴퓨터는 모두 응용 프로그램을 수행하는 동시에 다른 컴퓨터의 상태를 감시\n- 비대칭형 방식: 하나의 컴퓨터는 대기상태로 있고 나머지는 활성화되어 응용 프로그램을 수행\n\n\n\n## 1.7 컴퓨팅 환경\n\n- 초창기 컴퓨팅 환경은 중앙집중 --> 유선통신 기술의 발달로 분산 컴퓨팅 환경 등장 --> 무선통신 기술의 발달로 이동컴퓨팅(mobile computing) 환경 등장\n\n- 인터넷의 발달로 현재의 컴퓨팅 환경을 웹 기반 컴퓨팅이라고 함\n- 실시간 운영체제를 각종 기계와 장치에 내장하여 사용하는 컴퓨팅 환경을 **임베디드 컴퓨팅(embedded computing)** 환경이라고 함\n\n\n\n<div style=\"border:3px; border-style:dashed; border-color:grey; text-color:black\">\n  <b> * 정리 * </b><br>\n  1세대 : 일괄처리 시스템 <br>\n  2세대 : 다중프로그래밍, 다중 처리, 시분할, 실시간 처리 시스템<br>\n  3세대 : 다중모드 <br>\n  4세대 : 분산 처리 시스템\n  <br>\n</div>\n\n<br><br><br>\n","source":"_posts/20190205-os-overview.md","raw":"---\ntitle: 운영체제 - Overview_1\nauthor:\n  nick: TAEJIN\n  link: null\ncategories:\n  - OS\ntags:\n  - 운영체제\n  - OS\ndate: 2019-02-05 19:29:30\nsubtitle: 운영체제 복습(소개)\ncover: https://safebytes.com/wp-content/uploads/2016/10/OperatingSystem-min.jpg\n\n---\n\n------\n\n# 1. 소개\n\n## 1.1 운영체제\n\n<img src=\"https://www.tutorialspoint.com/operating_system/images/conceptual_view.jpg\">\n\n<img style=\"float:right;\" src=\"https://upload.wikimedia.org/wikipedia/ko/thumb/a/a3/Operating_system_placement_kor.png/200px-Operating_system_placement_kor.png\">\n\n- 운영체제(Operating System)란?\n\n  -- 컴퓨터 하드웨어를 관리하는 프로그램\n  -- 응용 프로그램의 토대를 제공해주는 프로그램\n  -- **<span style=\"color:orange;\">사용자</span>와 <span style=\"color:red;\">하드웨어</span> 사이에 중간 매개체 역할** 을 해주는 프로그램\n\n- 운영체제 범위에 대한 정의\n  하드웨어의 종류와 용도가 다양해서 OS의 범위는 모호하게 정의됩니다​\n  정의 1) 운영체제를 구입하였을 때 포함되어 있는 모든 것\n  <u>정의 2) 항상 수행되고 있는 유일한 프로그램(보통 **Kernel** 이라고 한다)</u>\n  **대체로 2번 째 정의를 사용함**\n\n\n\n그림에서 처럼 운영체제는 컴퓨터의 사용자와 컴퓨터 하드웨어 사이에 있기 때문에 운영체제를 바라보는 관점도 두 가지로 분류할 수 있습니다.\n\n### 1.1.1 <span style=\"color:orange;\">사용자 관점</span>\n\n- **컴퓨터의 용도** 에 따라 OS의 설계 방향이 결정 됩니다.\n\n  -- 개인용 컴퓨터(Home PC user)\n  -- 메인프레임, 미니컴퓨터(Mainframe, minicomputer)\n  -- 워크스테이션(Workstation)\n  -- 휴대용 컴퓨터(Mobile devices)\n\n### 1.1.2 <span style=\"color:red;\">시스템 관점</span>\n\n- **자원 할당자(resource allocator)**\n  컴퓨터 자원(CPU 시간, 메모리 공간, 파일 저장 공간, 입출력 장치)의 할당은 공정해야 하며 효율적으로 이루어져야 합니다.\n- **제어 프로그램(control program)**\n  사용자 프로그램의 실행을 감독하여 오류와 컴퓨터 오용을 방지하고 입출력 장치의 제어와 동작을 관리 합니다.\n\n\n\n### 1.1.3 운영체제의 목표\n\n- <span style=\"color:orange;\">사용자</span>에게 편리성 제공\n- <span style=\"color:red;\">컴퓨터 시스템</span>의 효율적 운영\n\n**사용자에게 컴퓨터에서 프로그램을 효율적이고 편리하게 실행할 수 있는 환경을 제공** 하는 것 입니다!!\n\n\n\n## 1.2 메인프레임 시스템\n\n### 1.2.1 일괄처리 시스템(1950)\n\n**Batch processing system이란 처리속도를 향상 시키기 위해 유사한 요구를 필요로 하는 여러개의 작업을 함께 모아 단일 작업으로 일괄 처리하는 시스템입니다**\n\n- 운영체제는 항상 **메모리** 에 상주하고, 주 임무는 **하나의 작업에서 다음 작업으로 제어를 자동적으로 옮기는 것**\n\n- 작업을 실행하면 끝날 때까지 다른 작업을 못함\n\n- <span style=\"color:red\">기계적 입출력 장치가 전자적 장치의 속도보다 상대적으로 느려 CPU가 종종 쉬는 경우가 발생</span>\n\n\n\n<span style=\"color:blue\">직접 접근(direct access)이 가능한 디스크의 도입 : Job scheduling과 multi-programming이 가능하게 됨</span>\n\n### 1.2.2 다중 프로그램 시스템(1960)\n\n**Multi-program system 이란 여러 개의 프로그램을 동시에 메모리에 적재하여 하나의 프로그램이 대기 상태가 되면 그 동안 다른 프로그램을 실행하는 시스템입니다**\n\n- 입출력과 프로그램의 실행을 병행으로 수행할 수 있어 CPU의 사용 효율(utilization)이 증가\n- 다중 프로그래밍에서 운영체제는 사용자를 대신하여 의사결정을 수행해야 함\n  -- **Job scheduling** : 디스크에 있는 작업 저장소(Job pool)에서 작업을 선택하여 메모리로 옮기는 것\n  -- **CPU scheduling** : 실행 중인 작업이 대기 상태가 되었을 때 메모리에 있는 작업 중 하나를 선택하여 CPU에 할당하는 것\n- <span style=\"color:red\">여러 프로그램이 동시에 메모리에 상주하므로 메모리 관리가 복잡</span>\n- Multi programming을 제공하는 일괄처리 시스템은 <span style=\"color:red\">CPU의 사용 효율은 높였지만 사용자와 컴퓨터 간에 상호작용은 제공하지 못함</span>\n\n\n\n### 1.2.3 시분할 시스템(1960)\n\n**시분할(Time sharing) 또는 멀티태스킹(multi-tasking)은 다중 프로그래밍과 달리 정해진 시간이 되면 무조건 다음 순서의 작업을 실행하는 방식** 으로 교대하는 시간이 매우 짧아 프로그램이 실행되는 동안 사용자는 컴퓨터와 상호작용이 가능한 시스템입니다\n\n- 사용자와 시스템 간에 직접 상호작용이 가능한 시스템을 **대화식 컴퓨터 시스템(inter-active computer system)** 이라 하고 이런 시스템은 응답시간(response time)이 짧아야 함\n- 여러 사용자가 동시에 컴퓨터를 사용할 수 있음\n- 메모리에 적재되어 실행 중인 프로그램을 **프로세스(process)** 라고 함\n- 많은 사용자의 프로그램을 동시에 수행하기 위해서는 *주기억장치* 의 용량으로는 부족\n  <span style=\"color:blue\">디스크를 주기억장치의 보조 저장 장치로 활용으로 문제를 해결하며 가장 널리 사용되는 기법으로 가상 메모리(virtual memory)</span> 가 있습니다\n\n\n\n## 1.3 실시간 처리 시스템\n\n**Real time processing system 이란** 프로세서 작동이나 데이터 흐름에 엄격한 시간 제약이 있을 때 사용되는 방식으로 **데이터 처리 요구가 있는 즉시 수행하여 결과를 산출하는 시스템입니다**\n\n- 보통 특수 목적용(우주선 운행, 레이더 추적기, 핵물리학 실험, 은행의 온라인 업무)\n  주의) <u>실시간과 빠르다는 것은 다른 개념!!</u>\n- 엄격한 실시간 시스템(hard real-time system) : 중요한 작업이 정해진 시간 내에 완료됨을 보장\n- 완화된 실시간 시스템(soft real-time system) : 중요한 작업이 우선순위를 가지지만 엄격하게 정해진 시간 내에 완료됨을 보장하지는 않음\n\n\n\n## 1.4 분산 처리 시스템\n\n**Distributed processing system 이란** 다중처리 시스템과 마찬가지로 **여러 프로세서(컴퓨터)를 사용**하지만 밀결합 형태가 아닌 소결합(loosely coupled) 형태로 컴퓨터 버스나 클럭을 공유하지 않고, **네트워크를 통해 통신하여 하나의 작업을 처리하는 시스템입니다**\n\n- 네트워크는 사용하는 프로토콜, 망의 크기, 전송 매체에 따라 분류\n  Ex) 망의 크기 : LAN, MAN, WAN\n\n\n\n### 1.4.1 클라이언트-서버 시스템\n\n- 서버 시스템은 크게 두 가지로 분류\n  - 계산 서버 시스템(compute-server system)\n    : 클라이언트로 부터 요청을 받아 그것을 대신 수행해 준 다음에 클라이언트에게 결과를 되돌려 줌\n  - 파일 서버 시스템(file-server system)\n    : 클라이언트에게 파일 시스템 인터페이스를 제공, 클라이언트는 이 인터페이스를 통해 파일을 생성, 갱신, 삭제\n\n\n\n## 1.5 다중처리 시스템\n\n**Multi-processing system 이란 여러 개의 CPU와 하나의 주기억장치를 이용하여 여러 개의 프로그램을 동시에 처리하는 방식을 취하는 시스템입니다**\n\n- 병렬 시스템(parallel system) 또는 밀결합 시스템(tightly coupled system) 이라고도 함\n- **처리율(throughput)** : <u>N개의 프로세서를 사용한다고 처리율이 N배 증가하지는 않음 </u>\n- **경제성** : 여러 개의 단일 프로세서 시스템을 사용하는 것 보다 저렴\n- **신뢰성** : 하나의 CPU가 고장나더라도 다른 CPU를 이용하여 업무를 처리할 수 있음\n  수행되는 하드웨어의 수에 비례하여 서비스를 계속 제공할 수 있는 능력(graceful degradation)\n\n\n\n## 1.6 집단 시스템\n\n**Clustered system 이란 병렬 시스템, 분산 시스템과 마찬가지로 다중 CPU를 사용하지만 여러 개의 시스템을 밀결합하여 사용한다는 측면에서 다른 시스템입니다**\n\n- 집단화(clustering)의 목적은 높은 가용성\n- 대칭형 방식 : 각 컴퓨터는 모두 응용 프로그램을 수행하는 동시에 다른 컴퓨터의 상태를 감시\n- 비대칭형 방식: 하나의 컴퓨터는 대기상태로 있고 나머지는 활성화되어 응용 프로그램을 수행\n\n\n\n## 1.7 컴퓨팅 환경\n\n- 초창기 컴퓨팅 환경은 중앙집중 --> 유선통신 기술의 발달로 분산 컴퓨팅 환경 등장 --> 무선통신 기술의 발달로 이동컴퓨팅(mobile computing) 환경 등장\n\n- 인터넷의 발달로 현재의 컴퓨팅 환경을 웹 기반 컴퓨팅이라고 함\n- 실시간 운영체제를 각종 기계와 장치에 내장하여 사용하는 컴퓨팅 환경을 **임베디드 컴퓨팅(embedded computing)** 환경이라고 함\n\n\n\n<div style=\"border:3px; border-style:dashed; border-color:grey; text-color:black\">\n  <b> * 정리 * </b><br>\n  1세대 : 일괄처리 시스템 <br>\n  2세대 : 다중프로그래밍, 다중 처리, 시분할, 실시간 처리 시스템<br>\n  3세대 : 다중모드 <br>\n  4세대 : 분산 처리 시스템\n  <br>\n</div>\n\n<br><br><br>\n","slug":"os-overview","published":1,"updated":"2019-07-16T13:44:52.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt84v001u2646l9wdbyzp","content":"<hr>\n<h1 id=\"1-소개\"><a href=\"#1-소개\" class=\"headerlink\" title=\"1. 소개\"></a>1. 소개</h1><h2 id=\"1-1-운영체제\"><a href=\"#1-1-운영체제\" class=\"headerlink\" title=\"1.1 운영체제\"></a>1.1 운영체제</h2><img data-src=\"https://www.tutorialspoint.com/operating_system/images/conceptual_view.jpg\">\n\n<img style=\"float:right;\" data-src=\"https://upload.wikimedia.org/wikipedia/ko/thumb/a/a3/Operating_system_placement_kor.png/200px-Operating_system_placement_kor.png\">\n\n<ul>\n<li><p>운영체제(Operating System)란?</p>\n<p>– 컴퓨터 하드웨어를 관리하는 프로그램<br>– 응용 프로그램의 토대를 제공해주는 프로그램<br>– <strong><span style=\"color:orange;\">사용자</span>와 <span style=\"color:red;\">하드웨어</span> 사이에 중간 매개체 역할</strong> 을 해주는 프로그램</p>\n</li>\n<li><p>운영체제 범위에 대한 정의<br>하드웨어의 종류와 용도가 다양해서 OS의 범위는 모호하게 정의됩니다​<br>정의 1) 운영체제를 구입하였을 때 포함되어 있는 모든 것<br><u>정의 2) 항상 수행되고 있는 유일한 프로그램(보통 <strong>Kernel</strong> 이라고 한다)</u><br><strong>대체로 2번 째 정의를 사용함</strong></p>\n</li>\n</ul>\n<p>그림에서 처럼 운영체제는 컴퓨터의 사용자와 컴퓨터 하드웨어 사이에 있기 때문에 운영체제를 바라보는 관점도 두 가지로 분류할 수 있습니다.</p>\n<h3 id=\"1-1-1-사용자-관점\"><a href=\"#1-1-1-사용자-관점\" class=\"headerlink\" title=\"1.1.1 사용자 관점\"></a>1.1.1 <span style=\"color:orange;\">사용자 관점</span></h3><ul>\n<li><p><strong>컴퓨터의 용도</strong> 에 따라 OS의 설계 방향이 결정 됩니다.</p>\n<p>– 개인용 컴퓨터(Home PC user)<br>– 메인프레임, 미니컴퓨터(Mainframe, minicomputer)<br>– 워크스테이션(Workstation)<br>– 휴대용 컴퓨터(Mobile devices)</p>\n</li>\n</ul>\n<h3 id=\"1-1-2-시스템-관점\"><a href=\"#1-1-2-시스템-관점\" class=\"headerlink\" title=\"1.1.2 시스템 관점\"></a>1.1.2 <span style=\"color:red;\">시스템 관점</span></h3><ul>\n<li><strong>자원 할당자(resource allocator)</strong><br>컴퓨터 자원(CPU 시간, 메모리 공간, 파일 저장 공간, 입출력 장치)의 할당은 공정해야 하며 효율적으로 이루어져야 합니다.</li>\n<li><strong>제어 프로그램(control program)</strong><br>사용자 프로그램의 실행을 감독하여 오류와 컴퓨터 오용을 방지하고 입출력 장치의 제어와 동작을 관리 합니다.</li>\n</ul>\n<h3 id=\"1-1-3-운영체제의-목표\"><a href=\"#1-1-3-운영체제의-목표\" class=\"headerlink\" title=\"1.1.3 운영체제의 목표\"></a>1.1.3 운영체제의 목표</h3><ul>\n<li><span style=\"color:orange;\">사용자</span>에게 편리성 제공</li>\n<li><span style=\"color:red;\">컴퓨터 시스템</span>의 효율적 운영</li>\n</ul>\n<p><strong>사용자에게 컴퓨터에서 프로그램을 효율적이고 편리하게 실행할 수 있는 환경을 제공</strong> 하는 것 입니다!!</p>\n<h2 id=\"1-2-메인프레임-시스템\"><a href=\"#1-2-메인프레임-시스템\" class=\"headerlink\" title=\"1.2 메인프레임 시스템\"></a>1.2 메인프레임 시스템</h2><h3 id=\"1-2-1-일괄처리-시스템-1950\"><a href=\"#1-2-1-일괄처리-시스템-1950\" class=\"headerlink\" title=\"1.2.1 일괄처리 시스템(1950)\"></a>1.2.1 일괄처리 시스템(1950)</h3><p><strong>Batch processing system이란 처리속도를 향상 시키기 위해 유사한 요구를 필요로 하는 여러개의 작업을 함께 모아 단일 작업으로 일괄 처리하는 시스템입니다</strong></p>\n<ul>\n<li><p>운영체제는 항상 <strong>메모리</strong> 에 상주하고, 주 임무는 <strong>하나의 작업에서 다음 작업으로 제어를 자동적으로 옮기는 것</strong></p>\n</li>\n<li><p>작업을 실행하면 끝날 때까지 다른 작업을 못함</p>\n</li>\n<li><p><span style=\"color:red\">기계적 입출력 장치가 전자적 장치의 속도보다 상대적으로 느려 CPU가 종종 쉬는 경우가 발생</span></p>\n</li>\n</ul>\n<p><span style=\"color:blue\">직접 접근(direct access)이 가능한 디스크의 도입 : Job scheduling과 multi-programming이 가능하게 됨</span></p>\n<h3 id=\"1-2-2-다중-프로그램-시스템-1960\"><a href=\"#1-2-2-다중-프로그램-시스템-1960\" class=\"headerlink\" title=\"1.2.2 다중 프로그램 시스템(1960)\"></a>1.2.2 다중 프로그램 시스템(1960)</h3><p><strong>Multi-program system 이란 여러 개의 프로그램을 동시에 메모리에 적재하여 하나의 프로그램이 대기 상태가 되면 그 동안 다른 프로그램을 실행하는 시스템입니다</strong></p>\n<ul>\n<li>입출력과 프로그램의 실행을 병행으로 수행할 수 있어 CPU의 사용 효율(utilization)이 증가</li>\n<li>다중 프로그래밍에서 운영체제는 사용자를 대신하여 의사결정을 수행해야 함<br>– <strong>Job scheduling</strong> : 디스크에 있는 작업 저장소(Job pool)에서 작업을 선택하여 메모리로 옮기는 것<br>– <strong>CPU scheduling</strong> : 실행 중인 작업이 대기 상태가 되었을 때 메모리에 있는 작업 중 하나를 선택하여 CPU에 할당하는 것</li>\n<li><span style=\"color:red\">여러 프로그램이 동시에 메모리에 상주하므로 메모리 관리가 복잡</span></li>\n<li>Multi programming을 제공하는 일괄처리 시스템은 <span style=\"color:red\">CPU의 사용 효율은 높였지만 사용자와 컴퓨터 간에 상호작용은 제공하지 못함</span></li>\n</ul>\n<h3 id=\"1-2-3-시분할-시스템-1960\"><a href=\"#1-2-3-시분할-시스템-1960\" class=\"headerlink\" title=\"1.2.3 시분할 시스템(1960)\"></a>1.2.3 시분할 시스템(1960)</h3><p><strong>시분할(Time sharing) 또는 멀티태스킹(multi-tasking)은 다중 프로그래밍과 달리 정해진 시간이 되면 무조건 다음 순서의 작업을 실행하는 방식</strong> 으로 교대하는 시간이 매우 짧아 프로그램이 실행되는 동안 사용자는 컴퓨터와 상호작용이 가능한 시스템입니다</p>\n<ul>\n<li>사용자와 시스템 간에 직접 상호작용이 가능한 시스템을 <strong>대화식 컴퓨터 시스템(inter-active computer system)</strong> 이라 하고 이런 시스템은 응답시간(response time)이 짧아야 함</li>\n<li>여러 사용자가 동시에 컴퓨터를 사용할 수 있음</li>\n<li>메모리에 적재되어 실행 중인 프로그램을 <strong>프로세스(process)</strong> 라고 함</li>\n<li>많은 사용자의 프로그램을 동시에 수행하기 위해서는 <em>주기억장치</em> 의 용량으로는 부족<br><span style=\"color:blue\">디스크를 주기억장치의 보조 저장 장치로 활용으로 문제를 해결하며 가장 널리 사용되는 기법으로 가상 메모리(virtual memory)</span> 가 있습니다</li>\n</ul>\n<h2 id=\"1-3-실시간-처리-시스템\"><a href=\"#1-3-실시간-처리-시스템\" class=\"headerlink\" title=\"1.3 실시간 처리 시스템\"></a>1.3 실시간 처리 시스템</h2><p><strong>Real time processing system 이란</strong> 프로세서 작동이나 데이터 흐름에 엄격한 시간 제약이 있을 때 사용되는 방식으로 <strong>데이터 처리 요구가 있는 즉시 수행하여 결과를 산출하는 시스템입니다</strong></p>\n<ul>\n<li>보통 특수 목적용(우주선 운행, 레이더 추적기, 핵물리학 실험, 은행의 온라인 업무)<br>주의) <u>실시간과 빠르다는 것은 다른 개념!!</u></li>\n<li>엄격한 실시간 시스템(hard real-time system) : 중요한 작업이 정해진 시간 내에 완료됨을 보장</li>\n<li>완화된 실시간 시스템(soft real-time system) : 중요한 작업이 우선순위를 가지지만 엄격하게 정해진 시간 내에 완료됨을 보장하지는 않음</li>\n</ul>\n<h2 id=\"1-4-분산-처리-시스템\"><a href=\"#1-4-분산-처리-시스템\" class=\"headerlink\" title=\"1.4 분산 처리 시스템\"></a>1.4 분산 처리 시스템</h2><p><strong>Distributed processing system 이란</strong> 다중처리 시스템과 마찬가지로 <strong>여러 프로세서(컴퓨터)를 사용</strong>하지만 밀결합 형태가 아닌 소결합(loosely coupled) 형태로 컴퓨터 버스나 클럭을 공유하지 않고, <strong>네트워크를 통해 통신하여 하나의 작업을 처리하는 시스템입니다</strong></p>\n<ul>\n<li>네트워크는 사용하는 프로토콜, 망의 크기, 전송 매체에 따라 분류<br>Ex) 망의 크기 : LAN, MAN, WAN</li>\n</ul>\n<h3 id=\"1-4-1-클라이언트-서버-시스템\"><a href=\"#1-4-1-클라이언트-서버-시스템\" class=\"headerlink\" title=\"1.4.1 클라이언트-서버 시스템\"></a>1.4.1 클라이언트-서버 시스템</h3><ul>\n<li>서버 시스템은 크게 두 가지로 분류<ul>\n<li>계산 서버 시스템(compute-server system)<br>: 클라이언트로 부터 요청을 받아 그것을 대신 수행해 준 다음에 클라이언트에게 결과를 되돌려 줌</li>\n<li>파일 서버 시스템(file-server system)<br>: 클라이언트에게 파일 시스템 인터페이스를 제공, 클라이언트는 이 인터페이스를 통해 파일을 생성, 갱신, 삭제</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-5-다중처리-시스템\"><a href=\"#1-5-다중처리-시스템\" class=\"headerlink\" title=\"1.5 다중처리 시스템\"></a>1.5 다중처리 시스템</h2><p><strong>Multi-processing system 이란 여러 개의 CPU와 하나의 주기억장치를 이용하여 여러 개의 프로그램을 동시에 처리하는 방식을 취하는 시스템입니다</strong></p>\n<ul>\n<li>병렬 시스템(parallel system) 또는 밀결합 시스템(tightly coupled system) 이라고도 함</li>\n<li><strong>처리율(throughput)</strong> : <u>N개의 프로세서를 사용한다고 처리율이 N배 증가하지는 않음 </u></li>\n<li><strong>경제성</strong> : 여러 개의 단일 프로세서 시스템을 사용하는 것 보다 저렴</li>\n<li><strong>신뢰성</strong> : 하나의 CPU가 고장나더라도 다른 CPU를 이용하여 업무를 처리할 수 있음<br>수행되는 하드웨어의 수에 비례하여 서비스를 계속 제공할 수 있는 능력(graceful degradation)</li>\n</ul>\n<h2 id=\"1-6-집단-시스템\"><a href=\"#1-6-집단-시스템\" class=\"headerlink\" title=\"1.6 집단 시스템\"></a>1.6 집단 시스템</h2><p><strong>Clustered system 이란 병렬 시스템, 분산 시스템과 마찬가지로 다중 CPU를 사용하지만 여러 개의 시스템을 밀결합하여 사용한다는 측면에서 다른 시스템입니다</strong></p>\n<ul>\n<li>집단화(clustering)의 목적은 높은 가용성</li>\n<li>대칭형 방식 : 각 컴퓨터는 모두 응용 프로그램을 수행하는 동시에 다른 컴퓨터의 상태를 감시</li>\n<li>비대칭형 방식: 하나의 컴퓨터는 대기상태로 있고 나머지는 활성화되어 응용 프로그램을 수행</li>\n</ul>\n<h2 id=\"1-7-컴퓨팅-환경\"><a href=\"#1-7-컴퓨팅-환경\" class=\"headerlink\" title=\"1.7 컴퓨팅 환경\"></a>1.7 컴퓨팅 환경</h2><ul>\n<li><p>초창기 컴퓨팅 환경은 중앙집중 –&gt; 유선통신 기술의 발달로 분산 컴퓨팅 환경 등장 –&gt; 무선통신 기술의 발달로 이동컴퓨팅(mobile computing) 환경 등장</p>\n</li>\n<li><p>인터넷의 발달로 현재의 컴퓨팅 환경을 웹 기반 컴퓨팅이라고 함</p>\n</li>\n<li><p>실시간 운영체제를 각종 기계와 장치에 내장하여 사용하는 컴퓨팅 환경을 <strong>임베디드 컴퓨팅(embedded computing)</strong> 환경이라고 함</p>\n</li>\n</ul>\n<div style=\"border:3px; border-style:dashed; border-color:grey; text-color:black\">\n  <b> * 정리 * </b><br>\n  1세대 : 일괄처리 시스템 <br>\n  2세대 : 다중프로그래밍, 다중 처리, 시분할, 실시간 처리 시스템<br>\n  3세대 : 다중모드 <br>\n  4세대 : 분산 처리 시스템\n  <br>\n</div>\n\n<p><br><br><br></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"1-소개\"><a href=\"#1-소개\" class=\"headerlink\" title=\"1. 소개\"></a>1. 소개</h1><h2 id=\"1-1-운영체제\"><a href=\"#1-1-운영체제\" class=\"headerlink\" title=\"1.1 운영체제\"></a>1.1 운영체제</h2><img data-src=\"https://www.tutorialspoint.com/operating_system/images/conceptual_view.jpg\">\n\n<img style=\"float:right;\" data-src=\"https://upload.wikimedia.org/wikipedia/ko/thumb/a/a3/Operating_system_placement_kor.png/200px-Operating_system_placement_kor.png\">\n\n<ul>\n<li><p>운영체제(Operating System)란?</p>\n<p>– 컴퓨터 하드웨어를 관리하는 프로그램<br>– 응용 프로그램의 토대를 제공해주는 프로그램<br>– <strong><span style=\"color:orange;\">사용자</span>와 <span style=\"color:red;\">하드웨어</span> 사이에 중간 매개체 역할</strong> 을 해주는 프로그램</p>\n</li>\n<li><p>운영체제 범위에 대한 정의<br>하드웨어의 종류와 용도가 다양해서 OS의 범위는 모호하게 정의됩니다​<br>정의 1) 운영체제를 구입하였을 때 포함되어 있는 모든 것<br><u>정의 2) 항상 수행되고 있는 유일한 프로그램(보통 <strong>Kernel</strong> 이라고 한다)</u><br><strong>대체로 2번 째 정의를 사용함</strong></p>\n</li>\n</ul>\n<p>그림에서 처럼 운영체제는 컴퓨터의 사용자와 컴퓨터 하드웨어 사이에 있기 때문에 운영체제를 바라보는 관점도 두 가지로 분류할 수 있습니다.</p>\n<h3 id=\"1-1-1-사용자-관점\"><a href=\"#1-1-1-사용자-관점\" class=\"headerlink\" title=\"1.1.1 사용자 관점\"></a>1.1.1 <span style=\"color:orange;\">사용자 관점</span></h3><ul>\n<li><p><strong>컴퓨터의 용도</strong> 에 따라 OS의 설계 방향이 결정 됩니다.</p>\n<p>– 개인용 컴퓨터(Home PC user)<br>– 메인프레임, 미니컴퓨터(Mainframe, minicomputer)<br>– 워크스테이션(Workstation)<br>– 휴대용 컴퓨터(Mobile devices)</p>\n</li>\n</ul>\n<h3 id=\"1-1-2-시스템-관점\"><a href=\"#1-1-2-시스템-관점\" class=\"headerlink\" title=\"1.1.2 시스템 관점\"></a>1.1.2 <span style=\"color:red;\">시스템 관점</span></h3><ul>\n<li><strong>자원 할당자(resource allocator)</strong><br>컴퓨터 자원(CPU 시간, 메모리 공간, 파일 저장 공간, 입출력 장치)의 할당은 공정해야 하며 효율적으로 이루어져야 합니다.</li>\n<li><strong>제어 프로그램(control program)</strong><br>사용자 프로그램의 실행을 감독하여 오류와 컴퓨터 오용을 방지하고 입출력 장치의 제어와 동작을 관리 합니다.</li>\n</ul>\n<h3 id=\"1-1-3-운영체제의-목표\"><a href=\"#1-1-3-운영체제의-목표\" class=\"headerlink\" title=\"1.1.3 운영체제의 목표\"></a>1.1.3 운영체제의 목표</h3><ul>\n<li><span style=\"color:orange;\">사용자</span>에게 편리성 제공</li>\n<li><span style=\"color:red;\">컴퓨터 시스템</span>의 효율적 운영</li>\n</ul>\n<p><strong>사용자에게 컴퓨터에서 프로그램을 효율적이고 편리하게 실행할 수 있는 환경을 제공</strong> 하는 것 입니다!!</p>\n<h2 id=\"1-2-메인프레임-시스템\"><a href=\"#1-2-메인프레임-시스템\" class=\"headerlink\" title=\"1.2 메인프레임 시스템\"></a>1.2 메인프레임 시스템</h2><h3 id=\"1-2-1-일괄처리-시스템-1950\"><a href=\"#1-2-1-일괄처리-시스템-1950\" class=\"headerlink\" title=\"1.2.1 일괄처리 시스템(1950)\"></a>1.2.1 일괄처리 시스템(1950)</h3><p><strong>Batch processing system이란 처리속도를 향상 시키기 위해 유사한 요구를 필요로 하는 여러개의 작업을 함께 모아 단일 작업으로 일괄 처리하는 시스템입니다</strong></p>\n<ul>\n<li><p>운영체제는 항상 <strong>메모리</strong> 에 상주하고, 주 임무는 <strong>하나의 작업에서 다음 작업으로 제어를 자동적으로 옮기는 것</strong></p>\n</li>\n<li><p>작업을 실행하면 끝날 때까지 다른 작업을 못함</p>\n</li>\n<li><p><span style=\"color:red\">기계적 입출력 장치가 전자적 장치의 속도보다 상대적으로 느려 CPU가 종종 쉬는 경우가 발생</span></p>\n</li>\n</ul>\n<p><span style=\"color:blue\">직접 접근(direct access)이 가능한 디스크의 도입 : Job scheduling과 multi-programming이 가능하게 됨</span></p>\n<h3 id=\"1-2-2-다중-프로그램-시스템-1960\"><a href=\"#1-2-2-다중-프로그램-시스템-1960\" class=\"headerlink\" title=\"1.2.2 다중 프로그램 시스템(1960)\"></a>1.2.2 다중 프로그램 시스템(1960)</h3><p><strong>Multi-program system 이란 여러 개의 프로그램을 동시에 메모리에 적재하여 하나의 프로그램이 대기 상태가 되면 그 동안 다른 프로그램을 실행하는 시스템입니다</strong></p>\n<ul>\n<li>입출력과 프로그램의 실행을 병행으로 수행할 수 있어 CPU의 사용 효율(utilization)이 증가</li>\n<li>다중 프로그래밍에서 운영체제는 사용자를 대신하여 의사결정을 수행해야 함<br>– <strong>Job scheduling</strong> : 디스크에 있는 작업 저장소(Job pool)에서 작업을 선택하여 메모리로 옮기는 것<br>– <strong>CPU scheduling</strong> : 실행 중인 작업이 대기 상태가 되었을 때 메모리에 있는 작업 중 하나를 선택하여 CPU에 할당하는 것</li>\n<li><span style=\"color:red\">여러 프로그램이 동시에 메모리에 상주하므로 메모리 관리가 복잡</span></li>\n<li>Multi programming을 제공하는 일괄처리 시스템은 <span style=\"color:red\">CPU의 사용 효율은 높였지만 사용자와 컴퓨터 간에 상호작용은 제공하지 못함</span></li>\n</ul>\n<h3 id=\"1-2-3-시분할-시스템-1960\"><a href=\"#1-2-3-시분할-시스템-1960\" class=\"headerlink\" title=\"1.2.3 시분할 시스템(1960)\"></a>1.2.3 시분할 시스템(1960)</h3><p><strong>시분할(Time sharing) 또는 멀티태스킹(multi-tasking)은 다중 프로그래밍과 달리 정해진 시간이 되면 무조건 다음 순서의 작업을 실행하는 방식</strong> 으로 교대하는 시간이 매우 짧아 프로그램이 실행되는 동안 사용자는 컴퓨터와 상호작용이 가능한 시스템입니다</p>\n<ul>\n<li>사용자와 시스템 간에 직접 상호작용이 가능한 시스템을 <strong>대화식 컴퓨터 시스템(inter-active computer system)</strong> 이라 하고 이런 시스템은 응답시간(response time)이 짧아야 함</li>\n<li>여러 사용자가 동시에 컴퓨터를 사용할 수 있음</li>\n<li>메모리에 적재되어 실행 중인 프로그램을 <strong>프로세스(process)</strong> 라고 함</li>\n<li>많은 사용자의 프로그램을 동시에 수행하기 위해서는 <em>주기억장치</em> 의 용량으로는 부족<br><span style=\"color:blue\">디스크를 주기억장치의 보조 저장 장치로 활용으로 문제를 해결하며 가장 널리 사용되는 기법으로 가상 메모리(virtual memory)</span> 가 있습니다</li>\n</ul>\n<h2 id=\"1-3-실시간-처리-시스템\"><a href=\"#1-3-실시간-처리-시스템\" class=\"headerlink\" title=\"1.3 실시간 처리 시스템\"></a>1.3 실시간 처리 시스템</h2><p><strong>Real time processing system 이란</strong> 프로세서 작동이나 데이터 흐름에 엄격한 시간 제약이 있을 때 사용되는 방식으로 <strong>데이터 처리 요구가 있는 즉시 수행하여 결과를 산출하는 시스템입니다</strong></p>\n<ul>\n<li>보통 특수 목적용(우주선 운행, 레이더 추적기, 핵물리학 실험, 은행의 온라인 업무)<br>주의) <u>실시간과 빠르다는 것은 다른 개념!!</u></li>\n<li>엄격한 실시간 시스템(hard real-time system) : 중요한 작업이 정해진 시간 내에 완료됨을 보장</li>\n<li>완화된 실시간 시스템(soft real-time system) : 중요한 작업이 우선순위를 가지지만 엄격하게 정해진 시간 내에 완료됨을 보장하지는 않음</li>\n</ul>\n<h2 id=\"1-4-분산-처리-시스템\"><a href=\"#1-4-분산-처리-시스템\" class=\"headerlink\" title=\"1.4 분산 처리 시스템\"></a>1.4 분산 처리 시스템</h2><p><strong>Distributed processing system 이란</strong> 다중처리 시스템과 마찬가지로 <strong>여러 프로세서(컴퓨터)를 사용</strong>하지만 밀결합 형태가 아닌 소결합(loosely coupled) 형태로 컴퓨터 버스나 클럭을 공유하지 않고, <strong>네트워크를 통해 통신하여 하나의 작업을 처리하는 시스템입니다</strong></p>\n<ul>\n<li>네트워크는 사용하는 프로토콜, 망의 크기, 전송 매체에 따라 분류<br>Ex) 망의 크기 : LAN, MAN, WAN</li>\n</ul>\n<h3 id=\"1-4-1-클라이언트-서버-시스템\"><a href=\"#1-4-1-클라이언트-서버-시스템\" class=\"headerlink\" title=\"1.4.1 클라이언트-서버 시스템\"></a>1.4.1 클라이언트-서버 시스템</h3><ul>\n<li>서버 시스템은 크게 두 가지로 분류<ul>\n<li>계산 서버 시스템(compute-server system)<br>: 클라이언트로 부터 요청을 받아 그것을 대신 수행해 준 다음에 클라이언트에게 결과를 되돌려 줌</li>\n<li>파일 서버 시스템(file-server system)<br>: 클라이언트에게 파일 시스템 인터페이스를 제공, 클라이언트는 이 인터페이스를 통해 파일을 생성, 갱신, 삭제</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-5-다중처리-시스템\"><a href=\"#1-5-다중처리-시스템\" class=\"headerlink\" title=\"1.5 다중처리 시스템\"></a>1.5 다중처리 시스템</h2><p><strong>Multi-processing system 이란 여러 개의 CPU와 하나의 주기억장치를 이용하여 여러 개의 프로그램을 동시에 처리하는 방식을 취하는 시스템입니다</strong></p>\n<ul>\n<li>병렬 시스템(parallel system) 또는 밀결합 시스템(tightly coupled system) 이라고도 함</li>\n<li><strong>처리율(throughput)</strong> : <u>N개의 프로세서를 사용한다고 처리율이 N배 증가하지는 않음 </u></li>\n<li><strong>경제성</strong> : 여러 개의 단일 프로세서 시스템을 사용하는 것 보다 저렴</li>\n<li><strong>신뢰성</strong> : 하나의 CPU가 고장나더라도 다른 CPU를 이용하여 업무를 처리할 수 있음<br>수행되는 하드웨어의 수에 비례하여 서비스를 계속 제공할 수 있는 능력(graceful degradation)</li>\n</ul>\n<h2 id=\"1-6-집단-시스템\"><a href=\"#1-6-집단-시스템\" class=\"headerlink\" title=\"1.6 집단 시스템\"></a>1.6 집단 시스템</h2><p><strong>Clustered system 이란 병렬 시스템, 분산 시스템과 마찬가지로 다중 CPU를 사용하지만 여러 개의 시스템을 밀결합하여 사용한다는 측면에서 다른 시스템입니다</strong></p>\n<ul>\n<li>집단화(clustering)의 목적은 높은 가용성</li>\n<li>대칭형 방식 : 각 컴퓨터는 모두 응용 프로그램을 수행하는 동시에 다른 컴퓨터의 상태를 감시</li>\n<li>비대칭형 방식: 하나의 컴퓨터는 대기상태로 있고 나머지는 활성화되어 응용 프로그램을 수행</li>\n</ul>\n<h2 id=\"1-7-컴퓨팅-환경\"><a href=\"#1-7-컴퓨팅-환경\" class=\"headerlink\" title=\"1.7 컴퓨팅 환경\"></a>1.7 컴퓨팅 환경</h2><ul>\n<li><p>초창기 컴퓨팅 환경은 중앙집중 –&gt; 유선통신 기술의 발달로 분산 컴퓨팅 환경 등장 –&gt; 무선통신 기술의 발달로 이동컴퓨팅(mobile computing) 환경 등장</p>\n</li>\n<li><p>인터넷의 발달로 현재의 컴퓨팅 환경을 웹 기반 컴퓨팅이라고 함</p>\n</li>\n<li><p>실시간 운영체제를 각종 기계와 장치에 내장하여 사용하는 컴퓨팅 환경을 <strong>임베디드 컴퓨팅(embedded computing)</strong> 환경이라고 함</p>\n</li>\n</ul>\n<div style=\"border:3px; border-style:dashed; border-color:grey; text-color:black\">\n  <b> * 정리 * </b><br>\n  1세대 : 일괄처리 시스템 <br>\n  2세대 : 다중프로그래밍, 다중 처리, 시분할, 실시간 처리 시스템<br>\n  3세대 : 다중모드 <br>\n  4세대 : 분산 처리 시스템\n  <br>\n</div>\n\n<p><br><br><br></p>\n"},{"title":"스프링 - IoC Containers","author":{"nick":"TAEJIN","link":null},"date":"2019-02-11T07:15:05.000Z","subtitle":"스프링 IoC 컨테이너에 대해 알아보자","cover":"https://spring.io/img/spring-by-pivotal.png","_content":"\n### Reference\n\n- [Spring IoC Containers – Types of Spring Container](https://data-flair.training/blogs/spring-ioc-containers/)\n- [Spring 공식 문서](https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/core.html#spring-core)\n- [Spring - IoC & DI](https://isstory83.tistory.com/91)\n\n------\n\n\n` 아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.`\n\n\n\n## 용어정리\n\n<span style=\"color:green\">Bean</span> - **빌더 형식의 개발도구에서 가시적으로 조작이 가능하고 또한 재사용이 가능한 소프트웨어 컴포넌트**\n: 썬 마이크로시스템즈에서 정의한 자바빈. 명칭의 유래는 자바(java)를 개발할 때 개발자들이 커피를 너무 많이 소비하여 커피가 그들의 상징으로 사용하였고, 커피콩(beans)은 작은 커피콩처럼 코딩의 작은 부분들을 나타냅니다.\n\n\n\n<span style=\"color:green\">Spring Bean</span> - **스프링 IoC 컨테이너로 DI(의존성 주입)을 통해 구성 요소를 관리하는 객체**\n: 자바빈, EJB의 빈과 비슷한 오브젝트 단위의 애플리케이션 컴포넌트를 말합니다. 하지만 스프링을 사용하는 애플리케이션에서 만들어지는 모든 오브젝트가 빈은 아닙니다. **스프링의 빈은 컨테이너가 생성과 관계 설정, 사용 등을 제어해주는 오브젝트를 가리킵니다.**\n\n\n\n<span style=\"color:green\">Container(IoC container)</span> - **개발자가 작성한 코드의 처리과정을 위임받은 독립적인 존재**\n: 적절한 설정만 되어 있다면 누구의 도움 없이도 개발자가 작성한 코드를 스스로 참조한 뒤 알아서 객체의 생성과 소멸을 컨트롤 해줍니다. 스프링에서는 IoC 방식으로 bean을 관리한다는 의미에서 bean factory나 application context를 가리킵니다.\n\n\n\n## IoC(Inversion of Control - 제어의 역전)\n\nInversion of Control(**IoC**)은 Dependency Injection(**DI**)라고 알려져 있기도 합니다. 엄밀하게는 DI는 아래의 그림과 같이 IoC 패턴 중 하나이지만 IoC의 개념을 잡는데 흔히 마틴 파울러의 *'Dependency Injection Pattern'* 글( [번역](http://wiki.javajigi.net/pages/viewpage.action?pageId=68) )을 참고하다 보니 그런 것 같습니다.\n\n![ioc](https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory&fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F252FCF3B5231689B17B553)\n\n <span style=\"color:red;\">DL (Dependency Lookup) - 의존성 검색</span>\n\n- 저장소에 저장되어 있는 빈(Bean)에 접근하기 위하여 개발자들이 컨테이너에서 제공하는 API를 이용하여 사용하고자 하는 빈을 검색(Lookup)하는 것\n\n <span style=\"color:red;\">DI (Dependency Injection) - 의존성 주입</span>\n\n- 각 계층 사이, 각 클래스 사이에 필요로 하는 의존 관계를 컨테이너가 자동으로 연결해 주는 것\n- 각 클래스 사이의 의존 관계를 빈 설정(Bean Definition) 정보를 바탕으로 컨테이너가 자동으로 연결해 주는 것\n- **DL 사용시 컨테이너 종속성이 증가하여, 이를 줄이기 위해 DI를 사용**\n\n<span style=\"color:blue;\">Setter Injection</span>\n\n- 객체를 생성 후 의존성 삽입 방식이기에 구현시에 좀 더 유연하게 사용\n- setter()를 통하여 필요한 값이 할당되기 전까지 객체를 사용할 수 없음\n- 스프링 프레임워크의 빈 설정 파일에서 property를 사용\n\n```xml\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n\t<property name=\"beanOne\"><ref bean=\"anotherExampleBean\"/></property>\n    <!--setter injection using the neater 'ref' attribute -->\n    <property name=\"beanTwo\" ref=\"yetAnotherBean\"/>\n    <property name=\"integerProperty\" value=\"1\"/>\n</bean>\n\n<bean id=\"anotherExampleBean\" class=\"examples.AnotherBean\"/>\n<bean id=\"yetAnotherBean\" class=\"examples.YetAnotherBean\"/>\n```\n\n```java\npublic class ExampleBean\n{\n    private AnotherBean beanOne;\n    private YetAnotherBean beanTwo;\n    private int i;\n\n    public void setBeanOne(AnotherBean beanOne)\n        this.beanOne=beanOne;\n\n    public void setBeanTwo(YetAnotherBean beanTwo)\n        this.beanTwo=beanTwo;\n\n    public void setIntegerProperty(int i)\n        this.i=i;\n}\n```\n\n\n\n\n\n<span style=\"color:blue;\">Constructor Injection</span>\n\n- 생성자에 파라미터를 지정함으로 생성하고자하는 객체가 필요로 하는 것을 명확하게 알 수 있음\n- 생성의 순서를 지켜야 하기 때문에 불편\n- 스프링 프레임워크의 빈 설정 파일에서 constructor-arg 사용\n\n```xml\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n\t<constructor-arg><ref bean=\"anotherExampleBean\"/></constructor-arg>\n    <constructor-arg ref=\"yetAnotherBean\"/>\t<!-- 위 아래 동일한 방법 -->\n    <constructor-arg type=\"int\" value=\"1\"/>\n</bean>\n\n<bean id=\"anotherExampleBean\" class=\"examples.AnotherBean\"/>\n<bean id=\"yetAnotherBean\" class=\"examples.YetAnotherBean\"/>\n```\n\n```java\npublic class ExampleBean\n{\n    private AnotherBean beanOne;\n    private YetAnotherBean beanTwo;\n    private int i;\n\n    public ExampleBean(AnotherBean anotherBean, YetAnotherBean yetAnotherBean, int i)\n    {\n        this.beanOne=anotherBean;\n        this.beanTwo=yetAnotherBean;\n        this.i=i;\n    }\n}\n```\n\n\n\n<span style=\"color:blue;\">Method Injection</span>\n\n- Singleton 인스턴스와 Non-Singleton 인스턴스의 의존 관계를 연결 시킬 필요가 있을 경우 사용하지만, 많이 사용되지는 않습니다.\n\n\n\n\n\n## Spring IoC Container\n\n<img src=\"http://www.javachain.com/wp-content/uploads/2014/07/Beanfactory1.png\">\n\n스프링 프레임워크의 IoC 컨테이너에는 크게\n\n- **Bean Factory** (org.springframework.beans)\n- **Application Context** (org.springframework.context)\n\n두 종류가 있습니다.\n\n\n\n#### 1. Bean Factory\n\n\n\n<br><br><br>\n","source":"_posts/20190211-spring-IoC.md","raw":"---\ntitle: 스프링 - IoC Containers\nauthor:\n  nick: TAEJIN\n  link: null\ncategories:\n  - WEB\n  - SPRING\ntags:\n  - null\ndate: 2019-02-11 16:15:05\nsubtitle: 스프링 IoC 컨테이너에 대해 알아보자\ncover: https://spring.io/img/spring-by-pivotal.png\n\n---\n\n### Reference\n\n- [Spring IoC Containers – Types of Spring Container](https://data-flair.training/blogs/spring-ioc-containers/)\n- [Spring 공식 문서](https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/core.html#spring-core)\n- [Spring - IoC & DI](https://isstory83.tistory.com/91)\n\n------\n\n\n` 아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.`\n\n\n\n## 용어정리\n\n<span style=\"color:green\">Bean</span> - **빌더 형식의 개발도구에서 가시적으로 조작이 가능하고 또한 재사용이 가능한 소프트웨어 컴포넌트**\n: 썬 마이크로시스템즈에서 정의한 자바빈. 명칭의 유래는 자바(java)를 개발할 때 개발자들이 커피를 너무 많이 소비하여 커피가 그들의 상징으로 사용하였고, 커피콩(beans)은 작은 커피콩처럼 코딩의 작은 부분들을 나타냅니다.\n\n\n\n<span style=\"color:green\">Spring Bean</span> - **스프링 IoC 컨테이너로 DI(의존성 주입)을 통해 구성 요소를 관리하는 객체**\n: 자바빈, EJB의 빈과 비슷한 오브젝트 단위의 애플리케이션 컴포넌트를 말합니다. 하지만 스프링을 사용하는 애플리케이션에서 만들어지는 모든 오브젝트가 빈은 아닙니다. **스프링의 빈은 컨테이너가 생성과 관계 설정, 사용 등을 제어해주는 오브젝트를 가리킵니다.**\n\n\n\n<span style=\"color:green\">Container(IoC container)</span> - **개발자가 작성한 코드의 처리과정을 위임받은 독립적인 존재**\n: 적절한 설정만 되어 있다면 누구의 도움 없이도 개발자가 작성한 코드를 스스로 참조한 뒤 알아서 객체의 생성과 소멸을 컨트롤 해줍니다. 스프링에서는 IoC 방식으로 bean을 관리한다는 의미에서 bean factory나 application context를 가리킵니다.\n\n\n\n## IoC(Inversion of Control - 제어의 역전)\n\nInversion of Control(**IoC**)은 Dependency Injection(**DI**)라고 알려져 있기도 합니다. 엄밀하게는 DI는 아래의 그림과 같이 IoC 패턴 중 하나이지만 IoC의 개념을 잡는데 흔히 마틴 파울러의 *'Dependency Injection Pattern'* 글( [번역](http://wiki.javajigi.net/pages/viewpage.action?pageId=68) )을 참고하다 보니 그런 것 같습니다.\n\n![ioc](https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory&fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F252FCF3B5231689B17B553)\n\n <span style=\"color:red;\">DL (Dependency Lookup) - 의존성 검색</span>\n\n- 저장소에 저장되어 있는 빈(Bean)에 접근하기 위하여 개발자들이 컨테이너에서 제공하는 API를 이용하여 사용하고자 하는 빈을 검색(Lookup)하는 것\n\n <span style=\"color:red;\">DI (Dependency Injection) - 의존성 주입</span>\n\n- 각 계층 사이, 각 클래스 사이에 필요로 하는 의존 관계를 컨테이너가 자동으로 연결해 주는 것\n- 각 클래스 사이의 의존 관계를 빈 설정(Bean Definition) 정보를 바탕으로 컨테이너가 자동으로 연결해 주는 것\n- **DL 사용시 컨테이너 종속성이 증가하여, 이를 줄이기 위해 DI를 사용**\n\n<span style=\"color:blue;\">Setter Injection</span>\n\n- 객체를 생성 후 의존성 삽입 방식이기에 구현시에 좀 더 유연하게 사용\n- setter()를 통하여 필요한 값이 할당되기 전까지 객체를 사용할 수 없음\n- 스프링 프레임워크의 빈 설정 파일에서 property를 사용\n\n```xml\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n\t<property name=\"beanOne\"><ref bean=\"anotherExampleBean\"/></property>\n    <!--setter injection using the neater 'ref' attribute -->\n    <property name=\"beanTwo\" ref=\"yetAnotherBean\"/>\n    <property name=\"integerProperty\" value=\"1\"/>\n</bean>\n\n<bean id=\"anotherExampleBean\" class=\"examples.AnotherBean\"/>\n<bean id=\"yetAnotherBean\" class=\"examples.YetAnotherBean\"/>\n```\n\n```java\npublic class ExampleBean\n{\n    private AnotherBean beanOne;\n    private YetAnotherBean beanTwo;\n    private int i;\n\n    public void setBeanOne(AnotherBean beanOne)\n        this.beanOne=beanOne;\n\n    public void setBeanTwo(YetAnotherBean beanTwo)\n        this.beanTwo=beanTwo;\n\n    public void setIntegerProperty(int i)\n        this.i=i;\n}\n```\n\n\n\n\n\n<span style=\"color:blue;\">Constructor Injection</span>\n\n- 생성자에 파라미터를 지정함으로 생성하고자하는 객체가 필요로 하는 것을 명확하게 알 수 있음\n- 생성의 순서를 지켜야 하기 때문에 불편\n- 스프링 프레임워크의 빈 설정 파일에서 constructor-arg 사용\n\n```xml\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n\t<constructor-arg><ref bean=\"anotherExampleBean\"/></constructor-arg>\n    <constructor-arg ref=\"yetAnotherBean\"/>\t<!-- 위 아래 동일한 방법 -->\n    <constructor-arg type=\"int\" value=\"1\"/>\n</bean>\n\n<bean id=\"anotherExampleBean\" class=\"examples.AnotherBean\"/>\n<bean id=\"yetAnotherBean\" class=\"examples.YetAnotherBean\"/>\n```\n\n```java\npublic class ExampleBean\n{\n    private AnotherBean beanOne;\n    private YetAnotherBean beanTwo;\n    private int i;\n\n    public ExampleBean(AnotherBean anotherBean, YetAnotherBean yetAnotherBean, int i)\n    {\n        this.beanOne=anotherBean;\n        this.beanTwo=yetAnotherBean;\n        this.i=i;\n    }\n}\n```\n\n\n\n<span style=\"color:blue;\">Method Injection</span>\n\n- Singleton 인스턴스와 Non-Singleton 인스턴스의 의존 관계를 연결 시킬 필요가 있을 경우 사용하지만, 많이 사용되지는 않습니다.\n\n\n\n\n\n## Spring IoC Container\n\n<img src=\"http://www.javachain.com/wp-content/uploads/2014/07/Beanfactory1.png\">\n\n스프링 프레임워크의 IoC 컨테이너에는 크게\n\n- **Bean Factory** (org.springframework.beans)\n- **Application Context** (org.springframework.context)\n\n두 종류가 있습니다.\n\n\n\n#### 1. Bean Factory\n\n\n\n<br><br><br>\n","slug":"spring-IoC","published":1,"updated":"2019-07-16T13:49:37.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt85a001w2646sgq7xau5","content":"<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXRhLWZsYWlyLnRyYWluaW5nL2Jsb2dzL3NwcmluZy1pb2MtY29udGFpbmVycy8=\" title=\"https://data-flair.training/blogs/spring-ioc-containers/\">Spring IoC Containers – Types of Spring Container<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjEuNC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNzcHJpbmctY29yZQ==\" title=\"https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/core.html#spring-core\">Spring 공식 문서<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc3N0b3J5ODMudGlzdG9yeS5jb20vOTE=\" title=\"https://isstory83.tistory.com/91\">Spring - IoC &amp; DI<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<hr>\n<p><code>아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.</code></p>\n<h2 id=\"용어정리\"><a href=\"#용어정리\" class=\"headerlink\" title=\"용어정리\"></a>용어정리</h2><dl><dt><span style=\"color:green\">Bean</span> - <strong>빌더 형식의 개발도구에서 가시적으로 조작이 가능하고 또한 재사용이 가능한 소프트웨어 컴포넌트</strong></dt><dd>썬 마이크로시스템즈에서 정의한 자바빈. 명칭의 유래는 자바(java)를 개발할 때 개발자들이 커피를 너무 많이 소비하여 커피가 그들의 상징으로 사용하였고, 커피콩(beans)은 작은 커피콩처럼 코딩의 작은 부분들을 나타냅니다.</dd></dl><dl><dt><span style=\"color:green\">Spring Bean</span> - <strong>스프링 IoC 컨테이너로 DI(의존성 주입)을 통해 구성 요소를 관리하는 객체</strong></dt><dd>자바빈, EJB의 빈과 비슷한 오브젝트 단위의 애플리케이션 컴포넌트를 말합니다. 하지만 스프링을 사용하는 애플리케이션에서 만들어지는 모든 오브젝트가 빈은 아닙니다. <strong>스프링의 빈은 컨테이너가 생성과 관계 설정, 사용 등을 제어해주는 오브젝트를 가리킵니다.</strong></dd></dl><dl><dt><span style=\"color:green\">Container(IoC container)</span> - <strong>개발자가 작성한 코드의 처리과정을 위임받은 독립적인 존재</strong></dt><dd>적절한 설정만 되어 있다면 누구의 도움 없이도 개발자가 작성한 코드를 스스로 참조한 뒤 알아서 객체의 생성과 소멸을 컨트롤 해줍니다. 스프링에서는 IoC 방식으로 bean을 관리한다는 의미에서 bean factory나 application context를 가리킵니다.</dd></dl><h2 id=\"IoC-Inversion-of-Control-제어의-역전\"><a href=\"#IoC-Inversion-of-Control-제어의-역전\" class=\"headerlink\" title=\"IoC(Inversion of Control - 제어의 역전)\"></a>IoC(Inversion of Control - 제어의 역전)</h2><p>Inversion of Control(<strong>IoC</strong>)은 Dependency Injection(<strong>DI</strong>)라고 알려져 있기도 합니다. 엄밀하게는 DI는 아래의 그림과 같이 IoC 패턴 중 하나이지만 IoC의 개념을 잡는데 흔히 마틴 파울러의 <em>‘Dependency Injection Pattern’</em> 글( <span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuamF2YWppZ2kubmV0L3BhZ2VzL3ZpZXdwYWdlLmFjdGlvbj9wYWdlSWQ9Njg=\" title=\"http://wiki.javajigi.net/pages/viewpage.action?pageId=68\">번역<i class=\"fa fa-external-link\"></i></span> )을 참고하다 보니 그런 것 같습니다.</p>\n<p><img alt=\"ioc\" data-src=\"https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory&fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F252FCF3B5231689B17B553\"></p>\n<p> <span style=\"color:red;\">DL (Dependency Lookup) - 의존성 검색</span></p>\n<ul>\n<li><p>저장소에 저장되어 있는 빈(Bean)에 접근하기 위하여 개발자들이 컨테이너에서 제공하는 API를 이용하여 사용하고자 하는 빈을 검색(Lookup)하는 것</p>\n<p><span style=\"color:red;\">DI (Dependency Injection) - 의존성 주입</span></p>\n</li>\n<li><p>각 계층 사이, 각 클래스 사이에 필요로 하는 의존 관계를 컨테이너가 자동으로 연결해 주는 것</p>\n</li>\n<li><p>각 클래스 사이의 의존 관계를 빈 설정(Bean Definition) 정보를 바탕으로 컨테이너가 자동으로 연결해 주는 것</p>\n</li>\n<li><p><strong>DL 사용시 컨테이너 종속성이 증가하여, 이를 줄이기 위해 DI를 사용</strong></p>\n</li>\n</ul>\n<p><span style=\"color:blue;\">Setter Injection</span></p>\n<ul>\n<li>객체를 생성 후 의존성 삽입 방식이기에 구현시에 좀 더 유연하게 사용</li>\n<li>setter()를 통하여 필요한 값이 할당되기 전까지 객체를 사용할 수 없음</li>\n<li>스프링 프레임워크의 빈 설정 파일에서 property를 사용</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"exampleBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"examples.ExampleBean\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"beanOne\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"anotherExampleBean\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--setter injection using the neater 'ref' attribute --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"beanTwo\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"yetAnotherBean\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"integerProperty\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"anotherExampleBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"examples.AnotherBean\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"yetAnotherBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"examples.YetAnotherBean\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleBean</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AnotherBean beanOne;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> YetAnotherBean beanTwo;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBeanOne</span><span class=\"params\">(AnotherBean beanOne)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">this</span>.beanOne</span>=beanOne;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBeanTwo</span><span class=\"params\">(YetAnotherBean beanTwo)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">this</span>.beanTwo</span>=beanTwo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIntegerProperty</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">this</span>.i</span>=i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color:blue;\">Constructor Injection</span></p>\n<ul>\n<li>생성자에 파라미터를 지정함으로 생성하고자하는 객체가 필요로 하는 것을 명확하게 알 수 있음</li>\n<li>생성의 순서를 지켜야 하기 때문에 불편</li>\n<li>스프링 프레임워크의 빈 설정 파일에서 constructor-arg 사용</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"exampleBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"examples.ExampleBean\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"anotherExampleBean\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"yetAnotherBean\"</span>/&gt;</span>\t<span class=\"comment\">&lt;!-- 위 아래 동일한 방법 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"anotherExampleBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"examples.AnotherBean\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"yetAnotherBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"examples.YetAnotherBean\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleBean</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AnotherBean beanOne;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> YetAnotherBean beanTwo;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExampleBean</span><span class=\"params\">(AnotherBean anotherBean, YetAnotherBean yetAnotherBean, <span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beanOne=anotherBean;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beanTwo=yetAnotherBean;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.i=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color:blue;\">Method Injection</span></p>\n<ul>\n<li>Singleton 인스턴스와 Non-Singleton 인스턴스의 의존 관계를 연결 시킬 필요가 있을 경우 사용하지만, 많이 사용되지는 않습니다.</li>\n</ul>\n<h2 id=\"Spring-IoC-Container\"><a href=\"#Spring-IoC-Container\" class=\"headerlink\" title=\"Spring IoC Container\"></a>Spring IoC Container</h2><img data-src=\"http://www.javachain.com/wp-content/uploads/2014/07/Beanfactory1.png\">\n\n<p>스프링 프레임워크의 IoC 컨테이너에는 크게</p>\n<ul>\n<li><strong>Bean Factory</strong> (org.springframework.beans)</li>\n<li><strong>Application Context</strong> (org.springframework.context)</li>\n</ul>\n<p>두 종류가 있습니다.</p>\n<h4 id=\"1-Bean-Factory\"><a href=\"#1-Bean-Factory\" class=\"headerlink\" title=\"1. Bean Factory\"></a>1. Bean Factory</h4><p><br><br><br></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXRhLWZsYWlyLnRyYWluaW5nL2Jsb2dzL3NwcmluZy1pb2MtY29udGFpbmVycy8=\" title=\"https://data-flair.training/blogs/spring-ioc-containers/\">Spring IoC Containers – Types of Spring Container<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjEuNC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNzcHJpbmctY29yZQ==\" title=\"https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/core.html#spring-core\">Spring 공식 문서<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc3N0b3J5ODMudGlzdG9yeS5jb20vOTE=\" title=\"https://isstory83.tistory.com/91\">Spring - IoC &amp; DI<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<hr>\n<p><code>아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.</code></p>\n<h2 id=\"용어정리\"><a href=\"#용어정리\" class=\"headerlink\" title=\"용어정리\"></a>용어정리</h2><dl><dt><span style=\"color:green\">Bean</span> - <strong>빌더 형식의 개발도구에서 가시적으로 조작이 가능하고 또한 재사용이 가능한 소프트웨어 컴포넌트</strong></dt><dd>썬 마이크로시스템즈에서 정의한 자바빈. 명칭의 유래는 자바(java)를 개발할 때 개발자들이 커피를 너무 많이 소비하여 커피가 그들의 상징으로 사용하였고, 커피콩(beans)은 작은 커피콩처럼 코딩의 작은 부분들을 나타냅니다.</dd></dl><dl><dt><span style=\"color:green\">Spring Bean</span> - <strong>스프링 IoC 컨테이너로 DI(의존성 주입)을 통해 구성 요소를 관리하는 객체</strong></dt><dd>자바빈, EJB의 빈과 비슷한 오브젝트 단위의 애플리케이션 컴포넌트를 말합니다. 하지만 스프링을 사용하는 애플리케이션에서 만들어지는 모든 오브젝트가 빈은 아닙니다. <strong>스프링의 빈은 컨테이너가 생성과 관계 설정, 사용 등을 제어해주는 오브젝트를 가리킵니다.</strong></dd></dl><dl><dt><span style=\"color:green\">Container(IoC container)</span> - <strong>개발자가 작성한 코드의 처리과정을 위임받은 독립적인 존재</strong></dt><dd>적절한 설정만 되어 있다면 누구의 도움 없이도 개발자가 작성한 코드를 스스로 참조한 뒤 알아서 객체의 생성과 소멸을 컨트롤 해줍니다. 스프링에서는 IoC 방식으로 bean을 관리한다는 의미에서 bean factory나 application context를 가리킵니다.</dd></dl><h2 id=\"IoC-Inversion-of-Control-제어의-역전\"><a href=\"#IoC-Inversion-of-Control-제어의-역전\" class=\"headerlink\" title=\"IoC(Inversion of Control - 제어의 역전)\"></a>IoC(Inversion of Control - 제어의 역전)</h2><p>Inversion of Control(<strong>IoC</strong>)은 Dependency Injection(<strong>DI</strong>)라고 알려져 있기도 합니다. 엄밀하게는 DI는 아래의 그림과 같이 IoC 패턴 중 하나이지만 IoC의 개념을 잡는데 흔히 마틴 파울러의 <em>‘Dependency Injection Pattern’</em> 글( <span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuamF2YWppZ2kubmV0L3BhZ2VzL3ZpZXdwYWdlLmFjdGlvbj9wYWdlSWQ9Njg=\" title=\"http://wiki.javajigi.net/pages/viewpage.action?pageId=68\">번역<i class=\"fa fa-external-link\"></i></span> )을 참고하다 보니 그런 것 같습니다.</p>\n<p><img alt=\"ioc\" data-src=\"https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory&fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F252FCF3B5231689B17B553\"></p>\n<p> <span style=\"color:red;\">DL (Dependency Lookup) - 의존성 검색</span></p>\n<ul>\n<li><p>저장소에 저장되어 있는 빈(Bean)에 접근하기 위하여 개발자들이 컨테이너에서 제공하는 API를 이용하여 사용하고자 하는 빈을 검색(Lookup)하는 것</p>\n<p><span style=\"color:red;\">DI (Dependency Injection) - 의존성 주입</span></p>\n</li>\n<li><p>각 계층 사이, 각 클래스 사이에 필요로 하는 의존 관계를 컨테이너가 자동으로 연결해 주는 것</p>\n</li>\n<li><p>각 클래스 사이의 의존 관계를 빈 설정(Bean Definition) 정보를 바탕으로 컨테이너가 자동으로 연결해 주는 것</p>\n</li>\n<li><p><strong>DL 사용시 컨테이너 종속성이 증가하여, 이를 줄이기 위해 DI를 사용</strong></p>\n</li>\n</ul>\n<p><span style=\"color:blue;\">Setter Injection</span></p>\n<ul>\n<li>객체를 생성 후 의존성 삽입 방식이기에 구현시에 좀 더 유연하게 사용</li>\n<li>setter()를 통하여 필요한 값이 할당되기 전까지 객체를 사용할 수 없음</li>\n<li>스프링 프레임워크의 빈 설정 파일에서 property를 사용</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"exampleBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"examples.ExampleBean\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"beanOne\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"anotherExampleBean\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--setter injection using the neater 'ref' attribute --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"beanTwo\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"yetAnotherBean\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"integerProperty\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"anotherExampleBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"examples.AnotherBean\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"yetAnotherBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"examples.YetAnotherBean\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleBean</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AnotherBean beanOne;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> YetAnotherBean beanTwo;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBeanOne</span><span class=\"params\">(AnotherBean beanOne)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">this</span>.beanOne</span>=beanOne;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBeanTwo</span><span class=\"params\">(YetAnotherBean beanTwo)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">this</span>.beanTwo</span>=beanTwo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIntegerProperty</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">this</span>.i</span>=i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color:blue;\">Constructor Injection</span></p>\n<ul>\n<li>생성자에 파라미터를 지정함으로 생성하고자하는 객체가 필요로 하는 것을 명확하게 알 수 있음</li>\n<li>생성의 순서를 지켜야 하기 때문에 불편</li>\n<li>스프링 프레임워크의 빈 설정 파일에서 constructor-arg 사용</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"exampleBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"examples.ExampleBean\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"anotherExampleBean\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"yetAnotherBean\"</span>/&gt;</span>\t<span class=\"comment\">&lt;!-- 위 아래 동일한 방법 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"anotherExampleBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"examples.AnotherBean\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"yetAnotherBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"examples.YetAnotherBean\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleBean</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AnotherBean beanOne;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> YetAnotherBean beanTwo;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExampleBean</span><span class=\"params\">(AnotherBean anotherBean, YetAnotherBean yetAnotherBean, <span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beanOne=anotherBean;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beanTwo=yetAnotherBean;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.i=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color:blue;\">Method Injection</span></p>\n<ul>\n<li>Singleton 인스턴스와 Non-Singleton 인스턴스의 의존 관계를 연결 시킬 필요가 있을 경우 사용하지만, 많이 사용되지는 않습니다.</li>\n</ul>\n<h2 id=\"Spring-IoC-Container\"><a href=\"#Spring-IoC-Container\" class=\"headerlink\" title=\"Spring IoC Container\"></a>Spring IoC Container</h2><img data-src=\"http://www.javachain.com/wp-content/uploads/2014/07/Beanfactory1.png\">\n\n<p>스프링 프레임워크의 IoC 컨테이너에는 크게</p>\n<ul>\n<li><strong>Bean Factory</strong> (org.springframework.beans)</li>\n<li><strong>Application Context</strong> (org.springframework.context)</li>\n</ul>\n<p>두 종류가 있습니다.</p>\n<h4 id=\"1-Bean-Factory\"><a href=\"#1-Bean-Factory\" class=\"headerlink\" title=\"1. Bean Factory\"></a>1. Bean Factory</h4><p><br><br><br></p>\n"},{"title":"운영체제 - Overview_2","author":{"nick":"TAEJIN","link":null},"date":"2019-02-12T09:51:53.000Z","subtitle":"컴퓨터 시스템 구조","cover":"https://safebytes.com/wp-content/uploads/2016/10/OperatingSystem-min.jpg","_content":"\n# 컴퓨터 시스템 구조\n\n## 2.1 컴퓨터 시스템의 동작\n\n<img style=\"height:450px; align:center;\" src=\"https://i.imgur.com/8JAIHTg.png\">\n\n- 컴퓨터는 <u>공유된 주기억장치에 접근을 제공하는 공통 버스에 의해 연결된 CPU와 여러 개의 장치 제어기(Device controller)로 구성</u>되어 있습니다.\n  - 장치 제어기(Device Controller)\n    각 장치(디스크, 오디오 장치, 비디오 디스플레이)를 관리\n  - 장치 제어기와 CPU는 병행으로 수행되므로 이들은 주기억장치 접근에 대해 경쟁합니다. 주기억장치 제어기(Memory Controller)는 이들의 접근을 동기화해줍니다.\n- 컴퓨터가 처음 구동되면 초기에 실행될 프로그램이 필요합니다. 이 프로그램을 **부트스트랩 프로그램(Bootstrap program)** 이라고 합니다. 이 프로그램은 보통 컴퓨터 하드웨어 내에 ROM(Read-Only-Memory)에 저장되어 있습니다.\n  - 부트스트랩 프로그램(Bootstrap program)\n    모든 하드웨어를 초기화하고 운영체제 커널을 주기억장치에 적재한 후에 커널을 실행\n\n<br>\n\n- 컴퓨터에서 사건(Event)의 발생은 **인트럽트(interrupt)** 신호, **트랩(trap)** 혹은 **예외(Exception)** 를 통해 운영체제에 통보됩니다. 사건이 발생되면 CPU는 현재 수행중인 작업을 멈추고, 운영체제 내에 있는 특정 코드를 실행합니다. 이 실행이 끝나면 다시 멈춘 작업을 재개합니다.\n\n<img height=\"250px\" src=\"http://pediaa.com/wp-content/uploads/2018/08/Difference-Between-Trap-and-Interrupt_Figure-1.png\">\n\n<span style=\"color:red\">Interrupt</span>\n\n- **Hardware Interrupt** : 하드웨어는 CPU에 특정 신호를 보내어 인트럽트의 발생을 알림\n  -- 예) 키보드 입력, I/O interrupt, timer ticks\n- 하드웨어가 시스템의 수행 흐름을 바꾸기 위해 발생하는 것\n- 비동기식(Asynchronus Interrupt)\n\n\n\n<span style=\"color:red\">Trap</span>\n\n- **Software Interrupt** : 시스템호출(System call)이라는 특정 연산을 실행하여 일부로 발생시키거나 오류 때문에 자발적으로 발생\n  -- 오류의 예) 0 나누기, 부적합한 주기억장치 접근(page fault)\n- 동기식(Synchronus Interrupt)\n\n\n\n<span style=\"color:red\">Exception</span>\n\n- 프로세서에 의해 자동으로 처리\n- **Faults** 와 **Aborts** 로 세분화 가능\n  -- Faults : 복구 가능한 오류 (recoverable error)\n  -- Aborts : 처리하기 어려운 오류 (an error that is difficult to handle)\n\n<br>\n\n## 2.2 I/O 구조\n\n- 장치 제어기(Device controller)에 따라 하나 이상의 장치가 제이거에 연결될 수 있습니다\n- 장치 제어기는 지역 버퍼와 몇 개의 특수 목적 레지스터를 유지합니다\n- 장치 제어기는 연결된 주변장치와 지역 버퍼 간에 데이터 이동을 책임집니다. 이 버퍼의 크기는 주변장치에 따라 다릅니다.\n\n\n\n### 2.2.1 I/O Interrupt\n\n- 입출력의 두 가지 형태\n  -- 동기식 입출력(Synchronous I/O) : 입출력이 시작되면 요청한 프로세서는 입출력이 완료될 때까지 기다림\n  -- 비동기식 입출력(Asynchronous I/O) : 요청한 프로세서는 입출력이 완료될 때까지 기다리지 않고 계속 다른 작업을 수행\n- 입출력의 완료를 기다리는 방법\n  -- 특수한 명령어 사용\n  -- 대기 루프 사용\n- <u>만약 CPU가 입출력 완료를 항상 기다리면</u> 한번에 한 입출력만 가능\n  하지만 시스템의 효율을 높이기 위해 입출력과 계산을 병행할 수 있어야함으로 이 방법은 비효율적\n- 운영체제는 여러 개의 입출력 요청을 관리하기 위해 **장치 상태 테이블(device-status table)** 을 유지합니다. 각 장치마다 대기큐를 유지합니다.\n\n<img height=\"350px\" src=\"https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/images/Chapter13/13_09_DeviceStatusTable.jpg\">\n\n\n\n### 2.2.2 DMA 구조\n\n- 속도가 느린 입출력 장치는 하나의 입력을 받은 후에 다음 입력까지 CPU는 다른 유용한 작업을 할 수 있습니다.\n  반대로 속도가 빠른 입출력 장치는 인트럽트가 너무 빈번하게 발생하여 CPU가 다른 유용한 작업을 할 시간이 없습니다.\n- 이것을 해결하기 위해 사용하는 기법이 **DMA(Direct Memory Access)** 입니다.\n- DMA 방식에서 장치 제어기는 데이터 블록을 CPU의 관여없이 직접 주기억장치로 이동하며, 인터럽트는 바이트 단위가 아닌 블록 단위로 발생합니다.\n\n<img style=\"align:center;\" src=\"http://pds17.egloos.com/pds/200910/26/90/c0098890_4ae5a423a7cef.jpg\">\n\n<br>\n\n## 2.3 저장 구조\n\n<img src=\"https://i.imgur.com/ofvb8E7.png\">\n\n- 컴퓨터 프로그래밍이 실행되기 위해서는 **주기억장치(main memory / primary storage / internal memory)** 에 적재되어야 합니다\n- 주기억장치는 보통 <u>동적 임의접근 메모리(dynamic Random-Access Memory, RAM)</u>라고 하는 반도체 메모리를 사용\n- <u>CPU가 직접 접근할 수 있는 기억장치</u>는 주기억장치뿐입니다\n\n\n\n- 주기억장치의 한 구성 단위를 **워드(word)** 라 하며, 각 워드는 독특한 주소를 가집니다\n\n\n\n- <span style=\"color:red\">주기억장치의 크기 / 주기억장치의 휘발성</span> 때문에 모든 프로그램과 데이터를 주기억장치에 영구적으로 저장할 수 없습니다\n- 이 문제를 해결하기 위해 많은 양의 데이터를 영구 보관할 수 있는  **보조 기억장치(auxiliary memory / secondary storage / external memory)** 를 사용합니다\n\n\n\n### 2.3.1 주기억장치\n\n- **Memory-mapped I/O**\n   주기억장치의 일부 주소가 입출력을 위해 예약되어 있으며, 이 주소에서 읽거나 쓰면 장치 레지스터로부터 데이터를 읽거나 쓰는 결과가 되는 것\n- CPU가 I/O 포트를 통해 연결된 장치와 데이터를 교환하는 2가지 방식\n  -- **Programmed I/O** : CPU가 계속 장치의 상태를 검사(polling)하는 방식\n  -- **Interrupt** : 다음 데이터를 처리할 준비가 되면 장치 제어기는 인터럽트를 통해 그 사실을 CPU에 알리는 방식\n- 주기억장치와 CPU의 속도 차이를 극복하기 위해 주기억장치와 CPU 사이에 **캐시(cache)** 라고 하는 고속 메모리 버퍼를 사용\n\n<img src=\"https://teachcomputerscience.com/wp-content/uploads/2016/12/cache_animation.gif\">\n\n\n\n### 2.3.2 보조기억장치(자기 디스크)\n\n<img style=\"height:120px; float:right;\" src=\"https://www.applexsoft.com/glossary/harddisk.jpg\">\n\n- 자기 디스크는 **플래터(platter)** 라고 하는 여러 개의 원형 판으로 구성이 플래터는 다시 원형 모양의 **트랙(track)** 으로 구성\n  트랙은 다시 여러 개의 **섹터(sector)** 로 나뉘어짐\n<br>\n<img style=\"height:150px; float:right;\" src=\"http://mblogthumb1.phinf.naver.net/20141226_132/capemay_1419579186649T86jM_PNG/010edsector.png?type=w2\">\n\n- 단순하게 섹터를 여러 개를 하나로 묶은 것을 **클러스터(cluster)** 라 하고, 같은 위치에 있는 트랙의 모음을 **실린더(cylinder)** 라고 합니다\n  -- 클러스터는 <u>운영체제에서 사용하는 데이터 저장의 최소 단위</u>\n<br>\n<br>\n- **디스크의 속도** = 컴퓨터로 데이터를 전송하는 비율인 전송률(transfer rate) + 임의접근 시간(random-access time)이라고 하는 위치결정 시간(positioning time)에 의해 결정됩니다\n\n- 데이터의 교환은 특수한 제어기를 통해 이루어집니다\n  컴퓨터 연결 끝에는 호스트 제어기\n  디스크 자체 내에는 디스크 제어기 가 있습니다\n- 디스크 제어기는 자체적으로 캐시를 가지고 있습니다\n- 실제 데이터는 디스크 제어기에 의해 디스크에서 캐시로 옮겨지고, 호스트 제어기는 캐시에 있는 데이터를 주기억장치로 옮깁니다\n\n\n\n## 2.4 저장장치의 계층구조\n\n<img src=\"https://eunhyejung.github.io/assets/contents/content03.PNG\">\n\n- 계층구조에서 위에 위치할 수록 속도는 빠르지만 고가이며 휘발성의 성질을 가집니다\n- 두 저장장치의 속도 차이는 중간에 빠른 캐시를 설치하여 극복할 수 있습니다\n- 시스템을 구성할 때 저장장치의 계층구조를 균형있게 잘 구성하면 저렴한 가격에 높은 성능을 얻을 수 있습니다\n\n\n\n### 2.4.1 캐싱\n\n- CPU가 데이터를 필요하면 먼저 캐시에 그 데이터가 있는지 검사합니다\n  만약 있으면 캐시에서 바로 사용하고 없으면 주기억장치에 있는 데이터를 사용하지만 이 데이터의 복사본을 캐시에 보관합니다. 이는 데이터를 곧 다시 사용할 확률이 높기 때문입니다\n- **캐시의 크기는 제한** 되어 있으므로 이것을 잘 관리하여야 시스템의 성능을 높일 수 있습니다. 캐시의 크기와 교체 정책(replacement policy)을 잘 선택하면 원하는 데이터가 캐시에 있을 확률을 80%에서 99%까지 높일 수 있습니다\n- 주기억장치는 CPU와 보조기억장치 사이에 있는 캐시로 사용될 수 있습니다\n\n\n\n### 2.4.2 일관성\n\n- 저장장치의 계층구조를 사용하면 같은 데이터가 여러 레벨에 존재할 수 있습니다\n- 한번에 하나의 프로세스만 동작하면 아무 문제가 되지 않지만!\n  여러 프로세스가 같은 데이터를 접근하고자 하면 모든 프로세스가 최신의 데이터를 얻을 수 있도록 해야 합니다\n  <u>이 문제는 다중프로세서 시스템에서 더욱 심각합니다</u>\n- 분산 환경에서는 여러 파일의 복사본이 여러 컴퓨터에 분산되어 있을 수 있습니다. 따라서 하나의 복사본에 대한 갱신이 이루어지면 다른 복사본도 갱신되도록 하여야 합니다\n\n\n\n\n\n## Reference\n\n[Difference between Trap and Interrupt](http://pediaa.com/difference-between-trap-and-interrupt/)\n\n[DMA-CPU몰래 영차영차](http://recipes.egloos.com/5152867)\n\n\n\n<br><br><br>\n","source":"_posts/20190212-os-overview-2.md","raw":"---\ntitle: 운영체제 - Overview_2\nauthor:\n  nick: TAEJIN\n  link: null\ncategories:\n  - OS\ntags:\n  - OS\n  - 운영체\ndate: 2019-02-12 18:51:53\nsubtitle: 컴퓨터 시스템 구조\ncover: https://safebytes.com/wp-content/uploads/2016/10/OperatingSystem-min.jpg\n---\n\n# 컴퓨터 시스템 구조\n\n## 2.1 컴퓨터 시스템의 동작\n\n<img style=\"height:450px; align:center;\" src=\"https://i.imgur.com/8JAIHTg.png\">\n\n- 컴퓨터는 <u>공유된 주기억장치에 접근을 제공하는 공통 버스에 의해 연결된 CPU와 여러 개의 장치 제어기(Device controller)로 구성</u>되어 있습니다.\n  - 장치 제어기(Device Controller)\n    각 장치(디스크, 오디오 장치, 비디오 디스플레이)를 관리\n  - 장치 제어기와 CPU는 병행으로 수행되므로 이들은 주기억장치 접근에 대해 경쟁합니다. 주기억장치 제어기(Memory Controller)는 이들의 접근을 동기화해줍니다.\n- 컴퓨터가 처음 구동되면 초기에 실행될 프로그램이 필요합니다. 이 프로그램을 **부트스트랩 프로그램(Bootstrap program)** 이라고 합니다. 이 프로그램은 보통 컴퓨터 하드웨어 내에 ROM(Read-Only-Memory)에 저장되어 있습니다.\n  - 부트스트랩 프로그램(Bootstrap program)\n    모든 하드웨어를 초기화하고 운영체제 커널을 주기억장치에 적재한 후에 커널을 실행\n\n<br>\n\n- 컴퓨터에서 사건(Event)의 발생은 **인트럽트(interrupt)** 신호, **트랩(trap)** 혹은 **예외(Exception)** 를 통해 운영체제에 통보됩니다. 사건이 발생되면 CPU는 현재 수행중인 작업을 멈추고, 운영체제 내에 있는 특정 코드를 실행합니다. 이 실행이 끝나면 다시 멈춘 작업을 재개합니다.\n\n<img height=\"250px\" src=\"http://pediaa.com/wp-content/uploads/2018/08/Difference-Between-Trap-and-Interrupt_Figure-1.png\">\n\n<span style=\"color:red\">Interrupt</span>\n\n- **Hardware Interrupt** : 하드웨어는 CPU에 특정 신호를 보내어 인트럽트의 발생을 알림\n  -- 예) 키보드 입력, I/O interrupt, timer ticks\n- 하드웨어가 시스템의 수행 흐름을 바꾸기 위해 발생하는 것\n- 비동기식(Asynchronus Interrupt)\n\n\n\n<span style=\"color:red\">Trap</span>\n\n- **Software Interrupt** : 시스템호출(System call)이라는 특정 연산을 실행하여 일부로 발생시키거나 오류 때문에 자발적으로 발생\n  -- 오류의 예) 0 나누기, 부적합한 주기억장치 접근(page fault)\n- 동기식(Synchronus Interrupt)\n\n\n\n<span style=\"color:red\">Exception</span>\n\n- 프로세서에 의해 자동으로 처리\n- **Faults** 와 **Aborts** 로 세분화 가능\n  -- Faults : 복구 가능한 오류 (recoverable error)\n  -- Aborts : 처리하기 어려운 오류 (an error that is difficult to handle)\n\n<br>\n\n## 2.2 I/O 구조\n\n- 장치 제어기(Device controller)에 따라 하나 이상의 장치가 제이거에 연결될 수 있습니다\n- 장치 제어기는 지역 버퍼와 몇 개의 특수 목적 레지스터를 유지합니다\n- 장치 제어기는 연결된 주변장치와 지역 버퍼 간에 데이터 이동을 책임집니다. 이 버퍼의 크기는 주변장치에 따라 다릅니다.\n\n\n\n### 2.2.1 I/O Interrupt\n\n- 입출력의 두 가지 형태\n  -- 동기식 입출력(Synchronous I/O) : 입출력이 시작되면 요청한 프로세서는 입출력이 완료될 때까지 기다림\n  -- 비동기식 입출력(Asynchronous I/O) : 요청한 프로세서는 입출력이 완료될 때까지 기다리지 않고 계속 다른 작업을 수행\n- 입출력의 완료를 기다리는 방법\n  -- 특수한 명령어 사용\n  -- 대기 루프 사용\n- <u>만약 CPU가 입출력 완료를 항상 기다리면</u> 한번에 한 입출력만 가능\n  하지만 시스템의 효율을 높이기 위해 입출력과 계산을 병행할 수 있어야함으로 이 방법은 비효율적\n- 운영체제는 여러 개의 입출력 요청을 관리하기 위해 **장치 상태 테이블(device-status table)** 을 유지합니다. 각 장치마다 대기큐를 유지합니다.\n\n<img height=\"350px\" src=\"https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/images/Chapter13/13_09_DeviceStatusTable.jpg\">\n\n\n\n### 2.2.2 DMA 구조\n\n- 속도가 느린 입출력 장치는 하나의 입력을 받은 후에 다음 입력까지 CPU는 다른 유용한 작업을 할 수 있습니다.\n  반대로 속도가 빠른 입출력 장치는 인트럽트가 너무 빈번하게 발생하여 CPU가 다른 유용한 작업을 할 시간이 없습니다.\n- 이것을 해결하기 위해 사용하는 기법이 **DMA(Direct Memory Access)** 입니다.\n- DMA 방식에서 장치 제어기는 데이터 블록을 CPU의 관여없이 직접 주기억장치로 이동하며, 인터럽트는 바이트 단위가 아닌 블록 단위로 발생합니다.\n\n<img style=\"align:center;\" src=\"http://pds17.egloos.com/pds/200910/26/90/c0098890_4ae5a423a7cef.jpg\">\n\n<br>\n\n## 2.3 저장 구조\n\n<img src=\"https://i.imgur.com/ofvb8E7.png\">\n\n- 컴퓨터 프로그래밍이 실행되기 위해서는 **주기억장치(main memory / primary storage / internal memory)** 에 적재되어야 합니다\n- 주기억장치는 보통 <u>동적 임의접근 메모리(dynamic Random-Access Memory, RAM)</u>라고 하는 반도체 메모리를 사용\n- <u>CPU가 직접 접근할 수 있는 기억장치</u>는 주기억장치뿐입니다\n\n\n\n- 주기억장치의 한 구성 단위를 **워드(word)** 라 하며, 각 워드는 독특한 주소를 가집니다\n\n\n\n- <span style=\"color:red\">주기억장치의 크기 / 주기억장치의 휘발성</span> 때문에 모든 프로그램과 데이터를 주기억장치에 영구적으로 저장할 수 없습니다\n- 이 문제를 해결하기 위해 많은 양의 데이터를 영구 보관할 수 있는  **보조 기억장치(auxiliary memory / secondary storage / external memory)** 를 사용합니다\n\n\n\n### 2.3.1 주기억장치\n\n- **Memory-mapped I/O**\n   주기억장치의 일부 주소가 입출력을 위해 예약되어 있으며, 이 주소에서 읽거나 쓰면 장치 레지스터로부터 데이터를 읽거나 쓰는 결과가 되는 것\n- CPU가 I/O 포트를 통해 연결된 장치와 데이터를 교환하는 2가지 방식\n  -- **Programmed I/O** : CPU가 계속 장치의 상태를 검사(polling)하는 방식\n  -- **Interrupt** : 다음 데이터를 처리할 준비가 되면 장치 제어기는 인터럽트를 통해 그 사실을 CPU에 알리는 방식\n- 주기억장치와 CPU의 속도 차이를 극복하기 위해 주기억장치와 CPU 사이에 **캐시(cache)** 라고 하는 고속 메모리 버퍼를 사용\n\n<img src=\"https://teachcomputerscience.com/wp-content/uploads/2016/12/cache_animation.gif\">\n\n\n\n### 2.3.2 보조기억장치(자기 디스크)\n\n<img style=\"height:120px; float:right;\" src=\"https://www.applexsoft.com/glossary/harddisk.jpg\">\n\n- 자기 디스크는 **플래터(platter)** 라고 하는 여러 개의 원형 판으로 구성이 플래터는 다시 원형 모양의 **트랙(track)** 으로 구성\n  트랙은 다시 여러 개의 **섹터(sector)** 로 나뉘어짐\n<br>\n<img style=\"height:150px; float:right;\" src=\"http://mblogthumb1.phinf.naver.net/20141226_132/capemay_1419579186649T86jM_PNG/010edsector.png?type=w2\">\n\n- 단순하게 섹터를 여러 개를 하나로 묶은 것을 **클러스터(cluster)** 라 하고, 같은 위치에 있는 트랙의 모음을 **실린더(cylinder)** 라고 합니다\n  -- 클러스터는 <u>운영체제에서 사용하는 데이터 저장의 최소 단위</u>\n<br>\n<br>\n- **디스크의 속도** = 컴퓨터로 데이터를 전송하는 비율인 전송률(transfer rate) + 임의접근 시간(random-access time)이라고 하는 위치결정 시간(positioning time)에 의해 결정됩니다\n\n- 데이터의 교환은 특수한 제어기를 통해 이루어집니다\n  컴퓨터 연결 끝에는 호스트 제어기\n  디스크 자체 내에는 디스크 제어기 가 있습니다\n- 디스크 제어기는 자체적으로 캐시를 가지고 있습니다\n- 실제 데이터는 디스크 제어기에 의해 디스크에서 캐시로 옮겨지고, 호스트 제어기는 캐시에 있는 데이터를 주기억장치로 옮깁니다\n\n\n\n## 2.4 저장장치의 계층구조\n\n<img src=\"https://eunhyejung.github.io/assets/contents/content03.PNG\">\n\n- 계층구조에서 위에 위치할 수록 속도는 빠르지만 고가이며 휘발성의 성질을 가집니다\n- 두 저장장치의 속도 차이는 중간에 빠른 캐시를 설치하여 극복할 수 있습니다\n- 시스템을 구성할 때 저장장치의 계층구조를 균형있게 잘 구성하면 저렴한 가격에 높은 성능을 얻을 수 있습니다\n\n\n\n### 2.4.1 캐싱\n\n- CPU가 데이터를 필요하면 먼저 캐시에 그 데이터가 있는지 검사합니다\n  만약 있으면 캐시에서 바로 사용하고 없으면 주기억장치에 있는 데이터를 사용하지만 이 데이터의 복사본을 캐시에 보관합니다. 이는 데이터를 곧 다시 사용할 확률이 높기 때문입니다\n- **캐시의 크기는 제한** 되어 있으므로 이것을 잘 관리하여야 시스템의 성능을 높일 수 있습니다. 캐시의 크기와 교체 정책(replacement policy)을 잘 선택하면 원하는 데이터가 캐시에 있을 확률을 80%에서 99%까지 높일 수 있습니다\n- 주기억장치는 CPU와 보조기억장치 사이에 있는 캐시로 사용될 수 있습니다\n\n\n\n### 2.4.2 일관성\n\n- 저장장치의 계층구조를 사용하면 같은 데이터가 여러 레벨에 존재할 수 있습니다\n- 한번에 하나의 프로세스만 동작하면 아무 문제가 되지 않지만!\n  여러 프로세스가 같은 데이터를 접근하고자 하면 모든 프로세스가 최신의 데이터를 얻을 수 있도록 해야 합니다\n  <u>이 문제는 다중프로세서 시스템에서 더욱 심각합니다</u>\n- 분산 환경에서는 여러 파일의 복사본이 여러 컴퓨터에 분산되어 있을 수 있습니다. 따라서 하나의 복사본에 대한 갱신이 이루어지면 다른 복사본도 갱신되도록 하여야 합니다\n\n\n\n\n\n## Reference\n\n[Difference between Trap and Interrupt](http://pediaa.com/difference-between-trap-and-interrupt/)\n\n[DMA-CPU몰래 영차영차](http://recipes.egloos.com/5152867)\n\n\n\n<br><br><br>\n","slug":"os-overview-2","published":1,"updated":"2019-07-16T13:49:16.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt85r00202646ylyahvta","content":"<h1 id=\"컴퓨터-시스템-구조\"><a href=\"#컴퓨터-시스템-구조\" class=\"headerlink\" title=\"컴퓨터 시스템 구조\"></a>컴퓨터 시스템 구조</h1><h2 id=\"2-1-컴퓨터-시스템의-동작\"><a href=\"#2-1-컴퓨터-시스템의-동작\" class=\"headerlink\" title=\"2.1 컴퓨터 시스템의 동작\"></a>2.1 컴퓨터 시스템의 동작</h2><img style=\"height:450px; align:center;\" data-src=\"https://i.imgur.com/8JAIHTg.png\">\n\n<ul>\n<li>컴퓨터는 <u>공유된 주기억장치에 접근을 제공하는 공통 버스에 의해 연결된 CPU와 여러 개의 장치 제어기(Device controller)로 구성</u>되어 있습니다.<ul>\n<li>장치 제어기(Device Controller)<br>각 장치(디스크, 오디오 장치, 비디오 디스플레이)를 관리</li>\n<li>장치 제어기와 CPU는 병행으로 수행되므로 이들은 주기억장치 접근에 대해 경쟁합니다. 주기억장치 제어기(Memory Controller)는 이들의 접근을 동기화해줍니다.</li>\n</ul>\n</li>\n<li>컴퓨터가 처음 구동되면 초기에 실행될 프로그램이 필요합니다. 이 프로그램을 <strong>부트스트랩 프로그램(Bootstrap program)</strong> 이라고 합니다. 이 프로그램은 보통 컴퓨터 하드웨어 내에 ROM(Read-Only-Memory)에 저장되어 있습니다.<ul>\n<li>부트스트랩 프로그램(Bootstrap program)<br>모든 하드웨어를 초기화하고 운영체제 커널을 주기억장치에 적재한 후에 커널을 실행</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<ul>\n<li>컴퓨터에서 사건(Event)의 발생은 <strong>인트럽트(interrupt)</strong> 신호, <strong>트랩(trap)</strong> 혹은 <strong>예외(Exception)</strong> 를 통해 운영체제에 통보됩니다. 사건이 발생되면 CPU는 현재 수행중인 작업을 멈추고, 운영체제 내에 있는 특정 코드를 실행합니다. 이 실행이 끝나면 다시 멈춘 작업을 재개합니다.</li>\n</ul>\n<img height=\"250px\" data-src=\"http://pediaa.com/wp-content/uploads/2018/08/Difference-Between-Trap-and-Interrupt_Figure-1.png\">\n\n<p><span style=\"color:red\">Interrupt</span></p>\n<ul>\n<li><strong>Hardware Interrupt</strong> : 하드웨어는 CPU에 특정 신호를 보내어 인트럽트의 발생을 알림<br>– 예) 키보드 입력, I/O interrupt, timer ticks</li>\n<li>하드웨어가 시스템의 수행 흐름을 바꾸기 위해 발생하는 것</li>\n<li>비동기식(Asynchronus Interrupt)</li>\n</ul>\n<p><span style=\"color:red\">Trap</span></p>\n<ul>\n<li><strong>Software Interrupt</strong> : 시스템호출(System call)이라는 특정 연산을 실행하여 일부로 발생시키거나 오류 때문에 자발적으로 발생<br>– 오류의 예) 0 나누기, 부적합한 주기억장치 접근(page fault)</li>\n<li>동기식(Synchronus Interrupt)</li>\n</ul>\n<p><span style=\"color:red\">Exception</span></p>\n<ul>\n<li>프로세서에 의해 자동으로 처리</li>\n<li><strong>Faults</strong> 와 <strong>Aborts</strong> 로 세분화 가능<br>– Faults : 복구 가능한 오류 (recoverable error)<br>– Aborts : 처리하기 어려운 오류 (an error that is difficult to handle)</li>\n</ul>\n<br>\n\n<h2 id=\"2-2-I-O-구조\"><a href=\"#2-2-I-O-구조\" class=\"headerlink\" title=\"2.2 I/O 구조\"></a>2.2 I/O 구조</h2><ul>\n<li>장치 제어기(Device controller)에 따라 하나 이상의 장치가 제이거에 연결될 수 있습니다</li>\n<li>장치 제어기는 지역 버퍼와 몇 개의 특수 목적 레지스터를 유지합니다</li>\n<li>장치 제어기는 연결된 주변장치와 지역 버퍼 간에 데이터 이동을 책임집니다. 이 버퍼의 크기는 주변장치에 따라 다릅니다.</li>\n</ul>\n<h3 id=\"2-2-1-I-O-Interrupt\"><a href=\"#2-2-1-I-O-Interrupt\" class=\"headerlink\" title=\"2.2.1 I/O Interrupt\"></a>2.2.1 I/O Interrupt</h3><ul>\n<li>입출력의 두 가지 형태<br>– 동기식 입출력(Synchronous I/O) : 입출력이 시작되면 요청한 프로세서는 입출력이 완료될 때까지 기다림<br>– 비동기식 입출력(Asynchronous I/O) : 요청한 프로세서는 입출력이 완료될 때까지 기다리지 않고 계속 다른 작업을 수행</li>\n<li>입출력의 완료를 기다리는 방법<br>– 특수한 명령어 사용<br>– 대기 루프 사용</li>\n<li><u>만약 CPU가 입출력 완료를 항상 기다리면</u> 한번에 한 입출력만 가능<br>하지만 시스템의 효율을 높이기 위해 입출력과 계산을 병행할 수 있어야함으로 이 방법은 비효율적</li>\n<li>운영체제는 여러 개의 입출력 요청을 관리하기 위해 <strong>장치 상태 테이블(device-status table)</strong> 을 유지합니다. 각 장치마다 대기큐를 유지합니다.</li>\n</ul>\n<img height=\"350px\" data-src=\"https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/images/Chapter13/13_09_DeviceStatusTable.jpg\">\n\n\n\n<h3 id=\"2-2-2-DMA-구조\"><a href=\"#2-2-2-DMA-구조\" class=\"headerlink\" title=\"2.2.2 DMA 구조\"></a>2.2.2 DMA 구조</h3><ul>\n<li>속도가 느린 입출력 장치는 하나의 입력을 받은 후에 다음 입력까지 CPU는 다른 유용한 작업을 할 수 있습니다.<br>반대로 속도가 빠른 입출력 장치는 인트럽트가 너무 빈번하게 발생하여 CPU가 다른 유용한 작업을 할 시간이 없습니다.</li>\n<li>이것을 해결하기 위해 사용하는 기법이 <strong>DMA(Direct Memory Access)</strong> 입니다.</li>\n<li>DMA 방식에서 장치 제어기는 데이터 블록을 CPU의 관여없이 직접 주기억장치로 이동하며, 인터럽트는 바이트 단위가 아닌 블록 단위로 발생합니다.</li>\n</ul>\n<img style=\"align:center;\" data-src=\"http://pds17.egloos.com/pds/200910/26/90/c0098890_4ae5a423a7cef.jpg\">\n\n<br>\n\n<h2 id=\"2-3-저장-구조\"><a href=\"#2-3-저장-구조\" class=\"headerlink\" title=\"2.3 저장 구조\"></a>2.3 저장 구조</h2><img data-src=\"https://i.imgur.com/ofvb8E7.png\">\n\n<ul>\n<li>컴퓨터 프로그래밍이 실행되기 위해서는 <strong>주기억장치(main memory / primary storage / internal memory)</strong> 에 적재되어야 합니다</li>\n<li>주기억장치는 보통 <u>동적 임의접근 메모리(dynamic Random-Access Memory, RAM)</u>라고 하는 반도체 메모리를 사용</li>\n<li><u>CPU가 직접 접근할 수 있는 기억장치</u>는 주기억장치뿐입니다</li>\n</ul>\n<ul>\n<li>주기억장치의 한 구성 단위를 <strong>워드(word)</strong> 라 하며, 각 워드는 독특한 주소를 가집니다</li>\n</ul>\n<ul>\n<li><span style=\"color:red\">주기억장치의 크기 / 주기억장치의 휘발성</span> 때문에 모든 프로그램과 데이터를 주기억장치에 영구적으로 저장할 수 없습니다</li>\n<li>이 문제를 해결하기 위해 많은 양의 데이터를 영구 보관할 수 있는  <strong>보조 기억장치(auxiliary memory / secondary storage / external memory)</strong> 를 사용합니다</li>\n</ul>\n<h3 id=\"2-3-1-주기억장치\"><a href=\"#2-3-1-주기억장치\" class=\"headerlink\" title=\"2.3.1 주기억장치\"></a>2.3.1 주기억장치</h3><ul>\n<li><strong>Memory-mapped I/O</strong><br> 주기억장치의 일부 주소가 입출력을 위해 예약되어 있으며, 이 주소에서 읽거나 쓰면 장치 레지스터로부터 데이터를 읽거나 쓰는 결과가 되는 것</li>\n<li>CPU가 I/O 포트를 통해 연결된 장치와 데이터를 교환하는 2가지 방식<br>– <strong>Programmed I/O</strong> : CPU가 계속 장치의 상태를 검사(polling)하는 방식<br>– <strong>Interrupt</strong> : 다음 데이터를 처리할 준비가 되면 장치 제어기는 인터럽트를 통해 그 사실을 CPU에 알리는 방식</li>\n<li>주기억장치와 CPU의 속도 차이를 극복하기 위해 주기억장치와 CPU 사이에 <strong>캐시(cache)</strong> 라고 하는 고속 메모리 버퍼를 사용</li>\n</ul>\n<img data-src=\"https://teachcomputerscience.com/wp-content/uploads/2016/12/cache_animation.gif\">\n\n\n\n<h3 id=\"2-3-2-보조기억장치-자기-디스크\"><a href=\"#2-3-2-보조기억장치-자기-디스크\" class=\"headerlink\" title=\"2.3.2 보조기억장치(자기 디스크)\"></a>2.3.2 보조기억장치(자기 디스크)</h3><img style=\"height:120px; float:right;\" data-src=\"https://www.applexsoft.com/glossary/harddisk.jpg\">\n\n<ul>\n<li><p>자기 디스크는 <strong>플래터(platter)</strong> 라고 하는 여러 개의 원형 판으로 구성이 플래터는 다시 원형 모양의 <strong>트랙(track)</strong> 으로 구성<br>트랙은 다시 여러 개의 <strong>섹터(sector)</strong> 로 나뉘어짐</p>\n<br>\n<img style=\"height:150px; float:right;\" data-src=\"http://mblogthumb1.phinf.naver.net/20141226_132/capemay_1419579186649T86jM_PNG/010edsector.png?type=w2\">\n</li>\n<li><p>단순하게 섹터를 여러 개를 하나로 묶은 것을 <strong>클러스터(cluster)</strong> 라 하고, 같은 위치에 있는 트랙의 모음을 <strong>실린더(cylinder)</strong> 라고 합니다<br>– 클러스터는 <u>운영체제에서 사용하는 데이터 저장의 최소 단위</u></p>\n<br>\n<br></li>\n<li><p><strong>디스크의 속도</strong> = 컴퓨터로 데이터를 전송하는 비율인 전송률(transfer rate) + 임의접근 시간(random-access time)이라고 하는 위치결정 시간(positioning time)에 의해 결정됩니다</p>\n</li>\n<li><p>데이터의 교환은 특수한 제어기를 통해 이루어집니다<br>컴퓨터 연결 끝에는 호스트 제어기<br>디스크 자체 내에는 디스크 제어기 가 있습니다</p>\n</li>\n<li><p>디스크 제어기는 자체적으로 캐시를 가지고 있습니다</p>\n</li>\n<li><p>실제 데이터는 디스크 제어기에 의해 디스크에서 캐시로 옮겨지고, 호스트 제어기는 캐시에 있는 데이터를 주기억장치로 옮깁니다</p>\n</li>\n</ul>\n<h2 id=\"2-4-저장장치의-계층구조\"><a href=\"#2-4-저장장치의-계층구조\" class=\"headerlink\" title=\"2.4 저장장치의 계층구조\"></a>2.4 저장장치의 계층구조</h2><img data-src=\"https://eunhyejung.github.io/assets/contents/content03.PNG\">\n\n<ul>\n<li>계층구조에서 위에 위치할 수록 속도는 빠르지만 고가이며 휘발성의 성질을 가집니다</li>\n<li>두 저장장치의 속도 차이는 중간에 빠른 캐시를 설치하여 극복할 수 있습니다</li>\n<li>시스템을 구성할 때 저장장치의 계층구조를 균형있게 잘 구성하면 저렴한 가격에 높은 성능을 얻을 수 있습니다</li>\n</ul>\n<h3 id=\"2-4-1-캐싱\"><a href=\"#2-4-1-캐싱\" class=\"headerlink\" title=\"2.4.1 캐싱\"></a>2.4.1 캐싱</h3><ul>\n<li>CPU가 데이터를 필요하면 먼저 캐시에 그 데이터가 있는지 검사합니다<br>만약 있으면 캐시에서 바로 사용하고 없으면 주기억장치에 있는 데이터를 사용하지만 이 데이터의 복사본을 캐시에 보관합니다. 이는 데이터를 곧 다시 사용할 확률이 높기 때문입니다</li>\n<li><strong>캐시의 크기는 제한</strong> 되어 있으므로 이것을 잘 관리하여야 시스템의 성능을 높일 수 있습니다. 캐시의 크기와 교체 정책(replacement policy)을 잘 선택하면 원하는 데이터가 캐시에 있을 확률을 80%에서 99%까지 높일 수 있습니다</li>\n<li>주기억장치는 CPU와 보조기억장치 사이에 있는 캐시로 사용될 수 있습니다</li>\n</ul>\n<h3 id=\"2-4-2-일관성\"><a href=\"#2-4-2-일관성\" class=\"headerlink\" title=\"2.4.2 일관성\"></a>2.4.2 일관성</h3><ul>\n<li>저장장치의 계층구조를 사용하면 같은 데이터가 여러 레벨에 존재할 수 있습니다</li>\n<li>한번에 하나의 프로세스만 동작하면 아무 문제가 되지 않지만!<br>여러 프로세스가 같은 데이터를 접근하고자 하면 모든 프로세스가 최신의 데이터를 얻을 수 있도록 해야 합니다<br><u>이 문제는 다중프로세서 시스템에서 더욱 심각합니다</u></li>\n<li>분산 환경에서는 여러 파일의 복사본이 여러 컴퓨터에 분산되어 있을 수 있습니다. 따라서 하나의 복사본에 대한 갱신이 이루어지면 다른 복사본도 갱신되도록 하여야 합니다</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><span class=\"exturl\" data-url=\"aHR0cDovL3BlZGlhYS5jb20vZGlmZmVyZW5jZS1iZXR3ZWVuLXRyYXAtYW5kLWludGVycnVwdC8=\" title=\"http://pediaa.com/difference-between-trap-and-interrupt/\">Difference between Trap and Interrupt<i class=\"fa fa-external-link\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3JlY2lwZXMuZWdsb29zLmNvbS81MTUyODY3\" title=\"http://recipes.egloos.com/5152867\">DMA-CPU몰래 영차영차<i class=\"fa fa-external-link\"></i></span></p>\n<p><br><br><br></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"컴퓨터-시스템-구조\"><a href=\"#컴퓨터-시스템-구조\" class=\"headerlink\" title=\"컴퓨터 시스템 구조\"></a>컴퓨터 시스템 구조</h1><h2 id=\"2-1-컴퓨터-시스템의-동작\"><a href=\"#2-1-컴퓨터-시스템의-동작\" class=\"headerlink\" title=\"2.1 컴퓨터 시스템의 동작\"></a>2.1 컴퓨터 시스템의 동작</h2><img style=\"height:450px; align:center;\" data-src=\"https://i.imgur.com/8JAIHTg.png\">\n\n<ul>\n<li>컴퓨터는 <u>공유된 주기억장치에 접근을 제공하는 공통 버스에 의해 연결된 CPU와 여러 개의 장치 제어기(Device controller)로 구성</u>되어 있습니다.<ul>\n<li>장치 제어기(Device Controller)<br>각 장치(디스크, 오디오 장치, 비디오 디스플레이)를 관리</li>\n<li>장치 제어기와 CPU는 병행으로 수행되므로 이들은 주기억장치 접근에 대해 경쟁합니다. 주기억장치 제어기(Memory Controller)는 이들의 접근을 동기화해줍니다.</li>\n</ul>\n</li>\n<li>컴퓨터가 처음 구동되면 초기에 실행될 프로그램이 필요합니다. 이 프로그램을 <strong>부트스트랩 프로그램(Bootstrap program)</strong> 이라고 합니다. 이 프로그램은 보통 컴퓨터 하드웨어 내에 ROM(Read-Only-Memory)에 저장되어 있습니다.<ul>\n<li>부트스트랩 프로그램(Bootstrap program)<br>모든 하드웨어를 초기화하고 운영체제 커널을 주기억장치에 적재한 후에 커널을 실행</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<ul>\n<li>컴퓨터에서 사건(Event)의 발생은 <strong>인트럽트(interrupt)</strong> 신호, <strong>트랩(trap)</strong> 혹은 <strong>예외(Exception)</strong> 를 통해 운영체제에 통보됩니다. 사건이 발생되면 CPU는 현재 수행중인 작업을 멈추고, 운영체제 내에 있는 특정 코드를 실행합니다. 이 실행이 끝나면 다시 멈춘 작업을 재개합니다.</li>\n</ul>\n<img height=\"250px\" data-src=\"http://pediaa.com/wp-content/uploads/2018/08/Difference-Between-Trap-and-Interrupt_Figure-1.png\">\n\n<p><span style=\"color:red\">Interrupt</span></p>\n<ul>\n<li><strong>Hardware Interrupt</strong> : 하드웨어는 CPU에 특정 신호를 보내어 인트럽트의 발생을 알림<br>– 예) 키보드 입력, I/O interrupt, timer ticks</li>\n<li>하드웨어가 시스템의 수행 흐름을 바꾸기 위해 발생하는 것</li>\n<li>비동기식(Asynchronus Interrupt)</li>\n</ul>\n<p><span style=\"color:red\">Trap</span></p>\n<ul>\n<li><strong>Software Interrupt</strong> : 시스템호출(System call)이라는 특정 연산을 실행하여 일부로 발생시키거나 오류 때문에 자발적으로 발생<br>– 오류의 예) 0 나누기, 부적합한 주기억장치 접근(page fault)</li>\n<li>동기식(Synchronus Interrupt)</li>\n</ul>\n<p><span style=\"color:red\">Exception</span></p>\n<ul>\n<li>프로세서에 의해 자동으로 처리</li>\n<li><strong>Faults</strong> 와 <strong>Aborts</strong> 로 세분화 가능<br>– Faults : 복구 가능한 오류 (recoverable error)<br>– Aborts : 처리하기 어려운 오류 (an error that is difficult to handle)</li>\n</ul>\n<br>\n\n<h2 id=\"2-2-I-O-구조\"><a href=\"#2-2-I-O-구조\" class=\"headerlink\" title=\"2.2 I/O 구조\"></a>2.2 I/O 구조</h2><ul>\n<li>장치 제어기(Device controller)에 따라 하나 이상의 장치가 제이거에 연결될 수 있습니다</li>\n<li>장치 제어기는 지역 버퍼와 몇 개의 특수 목적 레지스터를 유지합니다</li>\n<li>장치 제어기는 연결된 주변장치와 지역 버퍼 간에 데이터 이동을 책임집니다. 이 버퍼의 크기는 주변장치에 따라 다릅니다.</li>\n</ul>\n<h3 id=\"2-2-1-I-O-Interrupt\"><a href=\"#2-2-1-I-O-Interrupt\" class=\"headerlink\" title=\"2.2.1 I/O Interrupt\"></a>2.2.1 I/O Interrupt</h3><ul>\n<li>입출력의 두 가지 형태<br>– 동기식 입출력(Synchronous I/O) : 입출력이 시작되면 요청한 프로세서는 입출력이 완료될 때까지 기다림<br>– 비동기식 입출력(Asynchronous I/O) : 요청한 프로세서는 입출력이 완료될 때까지 기다리지 않고 계속 다른 작업을 수행</li>\n<li>입출력의 완료를 기다리는 방법<br>– 특수한 명령어 사용<br>– 대기 루프 사용</li>\n<li><u>만약 CPU가 입출력 완료를 항상 기다리면</u> 한번에 한 입출력만 가능<br>하지만 시스템의 효율을 높이기 위해 입출력과 계산을 병행할 수 있어야함으로 이 방법은 비효율적</li>\n<li>운영체제는 여러 개의 입출력 요청을 관리하기 위해 <strong>장치 상태 테이블(device-status table)</strong> 을 유지합니다. 각 장치마다 대기큐를 유지합니다.</li>\n</ul>\n<img height=\"350px\" data-src=\"https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/images/Chapter13/13_09_DeviceStatusTable.jpg\">\n\n\n\n<h3 id=\"2-2-2-DMA-구조\"><a href=\"#2-2-2-DMA-구조\" class=\"headerlink\" title=\"2.2.2 DMA 구조\"></a>2.2.2 DMA 구조</h3><ul>\n<li>속도가 느린 입출력 장치는 하나의 입력을 받은 후에 다음 입력까지 CPU는 다른 유용한 작업을 할 수 있습니다.<br>반대로 속도가 빠른 입출력 장치는 인트럽트가 너무 빈번하게 발생하여 CPU가 다른 유용한 작업을 할 시간이 없습니다.</li>\n<li>이것을 해결하기 위해 사용하는 기법이 <strong>DMA(Direct Memory Access)</strong> 입니다.</li>\n<li>DMA 방식에서 장치 제어기는 데이터 블록을 CPU의 관여없이 직접 주기억장치로 이동하며, 인터럽트는 바이트 단위가 아닌 블록 단위로 발생합니다.</li>\n</ul>\n<img style=\"align:center;\" data-src=\"http://pds17.egloos.com/pds/200910/26/90/c0098890_4ae5a423a7cef.jpg\">\n\n<br>\n\n<h2 id=\"2-3-저장-구조\"><a href=\"#2-3-저장-구조\" class=\"headerlink\" title=\"2.3 저장 구조\"></a>2.3 저장 구조</h2><img data-src=\"https://i.imgur.com/ofvb8E7.png\">\n\n<ul>\n<li>컴퓨터 프로그래밍이 실행되기 위해서는 <strong>주기억장치(main memory / primary storage / internal memory)</strong> 에 적재되어야 합니다</li>\n<li>주기억장치는 보통 <u>동적 임의접근 메모리(dynamic Random-Access Memory, RAM)</u>라고 하는 반도체 메모리를 사용</li>\n<li><u>CPU가 직접 접근할 수 있는 기억장치</u>는 주기억장치뿐입니다</li>\n</ul>\n<ul>\n<li>주기억장치의 한 구성 단위를 <strong>워드(word)</strong> 라 하며, 각 워드는 독특한 주소를 가집니다</li>\n</ul>\n<ul>\n<li><span style=\"color:red\">주기억장치의 크기 / 주기억장치의 휘발성</span> 때문에 모든 프로그램과 데이터를 주기억장치에 영구적으로 저장할 수 없습니다</li>\n<li>이 문제를 해결하기 위해 많은 양의 데이터를 영구 보관할 수 있는  <strong>보조 기억장치(auxiliary memory / secondary storage / external memory)</strong> 를 사용합니다</li>\n</ul>\n<h3 id=\"2-3-1-주기억장치\"><a href=\"#2-3-1-주기억장치\" class=\"headerlink\" title=\"2.3.1 주기억장치\"></a>2.3.1 주기억장치</h3><ul>\n<li><strong>Memory-mapped I/O</strong><br> 주기억장치의 일부 주소가 입출력을 위해 예약되어 있으며, 이 주소에서 읽거나 쓰면 장치 레지스터로부터 데이터를 읽거나 쓰는 결과가 되는 것</li>\n<li>CPU가 I/O 포트를 통해 연결된 장치와 데이터를 교환하는 2가지 방식<br>– <strong>Programmed I/O</strong> : CPU가 계속 장치의 상태를 검사(polling)하는 방식<br>– <strong>Interrupt</strong> : 다음 데이터를 처리할 준비가 되면 장치 제어기는 인터럽트를 통해 그 사실을 CPU에 알리는 방식</li>\n<li>주기억장치와 CPU의 속도 차이를 극복하기 위해 주기억장치와 CPU 사이에 <strong>캐시(cache)</strong> 라고 하는 고속 메모리 버퍼를 사용</li>\n</ul>\n<img data-src=\"https://teachcomputerscience.com/wp-content/uploads/2016/12/cache_animation.gif\">\n\n\n\n<h3 id=\"2-3-2-보조기억장치-자기-디스크\"><a href=\"#2-3-2-보조기억장치-자기-디스크\" class=\"headerlink\" title=\"2.3.2 보조기억장치(자기 디스크)\"></a>2.3.2 보조기억장치(자기 디스크)</h3><img style=\"height:120px; float:right;\" data-src=\"https://www.applexsoft.com/glossary/harddisk.jpg\">\n\n<ul>\n<li><p>자기 디스크는 <strong>플래터(platter)</strong> 라고 하는 여러 개의 원형 판으로 구성이 플래터는 다시 원형 모양의 <strong>트랙(track)</strong> 으로 구성<br>트랙은 다시 여러 개의 <strong>섹터(sector)</strong> 로 나뉘어짐</p>\n<br>\n<img style=\"height:150px; float:right;\" data-src=\"http://mblogthumb1.phinf.naver.net/20141226_132/capemay_1419579186649T86jM_PNG/010edsector.png?type=w2\">\n</li>\n<li><p>단순하게 섹터를 여러 개를 하나로 묶은 것을 <strong>클러스터(cluster)</strong> 라 하고, 같은 위치에 있는 트랙의 모음을 <strong>실린더(cylinder)</strong> 라고 합니다<br>– 클러스터는 <u>운영체제에서 사용하는 데이터 저장의 최소 단위</u></p>\n<br>\n<br></li>\n<li><p><strong>디스크의 속도</strong> = 컴퓨터로 데이터를 전송하는 비율인 전송률(transfer rate) + 임의접근 시간(random-access time)이라고 하는 위치결정 시간(positioning time)에 의해 결정됩니다</p>\n</li>\n<li><p>데이터의 교환은 특수한 제어기를 통해 이루어집니다<br>컴퓨터 연결 끝에는 호스트 제어기<br>디스크 자체 내에는 디스크 제어기 가 있습니다</p>\n</li>\n<li><p>디스크 제어기는 자체적으로 캐시를 가지고 있습니다</p>\n</li>\n<li><p>실제 데이터는 디스크 제어기에 의해 디스크에서 캐시로 옮겨지고, 호스트 제어기는 캐시에 있는 데이터를 주기억장치로 옮깁니다</p>\n</li>\n</ul>\n<h2 id=\"2-4-저장장치의-계층구조\"><a href=\"#2-4-저장장치의-계층구조\" class=\"headerlink\" title=\"2.4 저장장치의 계층구조\"></a>2.4 저장장치의 계층구조</h2><img data-src=\"https://eunhyejung.github.io/assets/contents/content03.PNG\">\n\n<ul>\n<li>계층구조에서 위에 위치할 수록 속도는 빠르지만 고가이며 휘발성의 성질을 가집니다</li>\n<li>두 저장장치의 속도 차이는 중간에 빠른 캐시를 설치하여 극복할 수 있습니다</li>\n<li>시스템을 구성할 때 저장장치의 계층구조를 균형있게 잘 구성하면 저렴한 가격에 높은 성능을 얻을 수 있습니다</li>\n</ul>\n<h3 id=\"2-4-1-캐싱\"><a href=\"#2-4-1-캐싱\" class=\"headerlink\" title=\"2.4.1 캐싱\"></a>2.4.1 캐싱</h3><ul>\n<li>CPU가 데이터를 필요하면 먼저 캐시에 그 데이터가 있는지 검사합니다<br>만약 있으면 캐시에서 바로 사용하고 없으면 주기억장치에 있는 데이터를 사용하지만 이 데이터의 복사본을 캐시에 보관합니다. 이는 데이터를 곧 다시 사용할 확률이 높기 때문입니다</li>\n<li><strong>캐시의 크기는 제한</strong> 되어 있으므로 이것을 잘 관리하여야 시스템의 성능을 높일 수 있습니다. 캐시의 크기와 교체 정책(replacement policy)을 잘 선택하면 원하는 데이터가 캐시에 있을 확률을 80%에서 99%까지 높일 수 있습니다</li>\n<li>주기억장치는 CPU와 보조기억장치 사이에 있는 캐시로 사용될 수 있습니다</li>\n</ul>\n<h3 id=\"2-4-2-일관성\"><a href=\"#2-4-2-일관성\" class=\"headerlink\" title=\"2.4.2 일관성\"></a>2.4.2 일관성</h3><ul>\n<li>저장장치의 계층구조를 사용하면 같은 데이터가 여러 레벨에 존재할 수 있습니다</li>\n<li>한번에 하나의 프로세스만 동작하면 아무 문제가 되지 않지만!<br>여러 프로세스가 같은 데이터를 접근하고자 하면 모든 프로세스가 최신의 데이터를 얻을 수 있도록 해야 합니다<br><u>이 문제는 다중프로세서 시스템에서 더욱 심각합니다</u></li>\n<li>분산 환경에서는 여러 파일의 복사본이 여러 컴퓨터에 분산되어 있을 수 있습니다. 따라서 하나의 복사본에 대한 갱신이 이루어지면 다른 복사본도 갱신되도록 하여야 합니다</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><span class=\"exturl\" data-url=\"aHR0cDovL3BlZGlhYS5jb20vZGlmZmVyZW5jZS1iZXR3ZWVuLXRyYXAtYW5kLWludGVycnVwdC8=\" title=\"http://pediaa.com/difference-between-trap-and-interrupt/\">Difference between Trap and Interrupt<i class=\"fa fa-external-link\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3JlY2lwZXMuZWdsb29zLmNvbS81MTUyODY3\" title=\"http://recipes.egloos.com/5152867\">DMA-CPU몰래 영차영차<i class=\"fa fa-external-link\"></i></span></p>\n<p><br><br><br></p>\n"},{"title":"(파이썬) 01 HELLO, PYTHON!","author":{"nick":"TAEJIN","link":null},"date":"2019-07-12T05:11:51.000Z","subtitle":"Kaggle 홈페이지 Python 강좌 참고","cover":"/img/kaggle_python.png","_content":"\n# Reference\n\n- Kaggle 홈페이지 - [Kaggle](https://www.kaggle.com)\n- 1강 'Hello, Python' - [Python Micro-Course Home Page](https://www.kaggle.com/colinmorris/hello-python)\n\n------\n\n\n\n# 개요(Intro)\n\nData Science에 필요한 Python의 핵심적인 부분들을 배우는 과정입니다. 본 과정은 기초적인 코딩 경험이나 지식이 있는 사람들을 대상으로 작성되었습니다. (만약 코딩에 익숙하지 않으시다면  \"[Python for Non-Programmers](https://wiki.python.org/moin/BeginnersGuide/NonProgrammers)\" 해당 문서를 참고하는 것을 권장합니다)\n\n\n\n우선, Python의 구문(syntax), 변수 할당(variable assignment), 산술 연산자(arithmetic operators)에 대해 가볍게 다루어 보겠습니다. 만약 Python에 경험이 있으시면 바로 연습문제([exercise with Kaggle Kernal](https://www.kaggle.com/kernels/fork/1275163))로 넘어가셔도 됩니다.\n\n<br><br><br>\n\n# Hello, Python!\n\n**Python** 은 영국의 코미디 그룹 [몬티 파이선(Monty Python)](https://en.wikipedia.org/wiki/Monty_Python)에서 그 이름을 가져왔습니다. 그들에게 존경을 표하는 마음으로 우리의 첫 python 프로그램을 스팸(spam)에 관한 그들의 코미디 스케치(skit)를 만들어 볼까요?\n`몬티 파이선의 코미디 스케치 25화 7분 50초부터 해당 에피소드가 등장한다고 합니다` - [youtube 영상](https://www.youtube.com/watch?v=zLih-WQwBSc)\n\n{% tabs spam_skit, 1 %}\n  <!-- tab CODE @code -->\n  그저 재미로, 아래의 코드를 읽어보시고 어떻게 실행 될지 예상해 보세요.\n  {% note default %}\n    {% code lang:python %}\n      spam_amout = 0\n      print(spam_amout)\n\n      #스팸, 계란, 스팸, 스팸, 베이컨과 스팸 주문\n      spam_amout = spam_amout + 4\n\n      if spam_amount >0:\n        print(\"But I don't want ANY spam!\")\n\n      viking_song = \"Spam \" * spam_amount\n      print(viking_song)\n    {% endcode %}\n  {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  결과는 아래와 같습니다\n  {% note success %}\n    {% code %}\n      0\n      But I don't want ANY spam!\n      Spam Spam Spam Spam\n    {% endcode %}\n  {% endnote %}\n  <!-- endtab -->\n{% endtabs %}\n<br>\n자, 이제 하나하나 분석해보겠습니다. 이 간단한 프로그램은  파이썬 코드가 어떻게 생겼는지, 어떻게 동작하는지를 여러 중요한 측면들을 통해 보여줍니다. 위에서 부터 순서대로 살펴보겠습니다.\n<br>\n\n```python\nspam_amount = 0\n```\n\n**변수 선언** : `spam_amount`라는 변수를 만들고 할당 연산자라고하는 = 을 사용하여 0 값을 할당합니다.\n\n> **잠깐!** :  만약 기존에 다른 언어(Java 또는 C ++ 등)로 프로그래밍을 하셨던 분의 경우 파이썬 코드에서는 몇 가지 빠져있는 것을 느꼈을 것 입니다.\n>\n> > `spam_amount`를 할당하기 전에 \"선언(declar)\"할 필요가 없습니다.\n> > 우리는 파이썬에게 어떤 유형의 값인 `spam_amount`가 참조 할지를 말할 필요가 없습니다. 사실, 우리는 문자열(string)이나 부울(boolean)과 같은 다른 종류의 것을 참조하기 위해 `spam_amount`를 재할당 할 수 있습니다.\n\n<br>\n\n```python\nprint(spam_amout)  # 0\n```\n\n**함수 호출** : `print` 함수는 화면에 전달 된 값을 표시하는 파이썬 함수입니다. 함수 이름 뒤에 괄호를 넣고 그 괄호 안에 입력 (또는 인자)을 넣음으로써 함수를 호출합니다.\n\n<br>\n\n```python\n#스팸, 계란, 스팸, 스팸, 베이컨과 스팸 주문\nspam_amout = spam_amout + 4\n```\n\n첫 줄은 **주석(comment)** 입니다.파이썬에서는 `#` 기호로 시작하면 주석으로 처리합니다.\n\n다음으로 우리는 재할당(reassignment)의 예를 볼 수 있습니다. 기존 변수의 값을 재할당하는 것은 변수를 만드는 것과 똑같은 것처럼 보입니다. <- 여전히 할당 연산자 = 을 사용합니다.\n\n이 경우 `spam_amount`에 지정하는 값으로 이전 값에 대한 간단한 산술 연산을 한 값을 할당합니다. 파이썬은 (0 + 4 = 4)에서 `=` 오른쪽에있는 표현식의 값을 왼쪽에있는 변수에 할당합니다.\n\n<br>\n\n```python\nif spam_amount > 0:\n  print(\"But I don't want ANY spam!\") # But I don't want ANY spam!\n\nviking_song = \"Spam Spam Spam\"\nprint(viking_song)\t#Spam Spam Spam\n```\n\n**조건문(conditional)**에 대한 설명은 나중에 자세히 다루겠지만, 코드를 전혀 짜본적 없더라도 이 문장이 어떤 것을 의미하는지는 짐작할 수 있을 것 입니다. 파이썬은 가독성과 단순성 때문에 높이 평가됩니다.\n\n어떤 코드가 `if문`에 속해 있는지 구별하는 방법을 잘 보십시오. `\"But I don't want ANY spam!\"`  문자열은 `spam_amount`가 양수일 때만 출력되어야 합니다. 하지만 뒤에 `print (viking_song)`과 같은 코드는 무슨일이 있어도 실행 되어야합니다. 우리(그리고 파이썬)는 그것을 어떻게 알 수 있습니까?\n\n`if문` 줄(line)의 끝에있는 콜론 (`:`)은 새로운 \"코드 블록\"이 시작되고 있음을 나타냅니다. 들여 쓰기되는 후속 행이 **해당 코드 블록의 일부** 입니다. 다른 언어에서는 `{` 중괄호 `}`를 사용하여 코드 블록의 시작과 끝을 표시합니다. Python의 이런 공백을 사용한 코드 블럭은 다른 언어에 익숙한 프로그래머에게는 놀라운 일일 수 있지만, 코드 블록의 들여 쓰기를 시행하지 않는 언어보다 일관되고 읽기 쉬운 코드가 될 수 있습니다.\n\n이후의 행에서 `viking_song`을 다루는 줄은 여분의 4 칸으로 들여 쓰이지 않기 때문에 `if`의 코드 블록에 포함되지 않습니다. 나중에 함수를 정의하고 루프(loops)를 사용할 때 들여 쓰기 된 코드 블록의 예제를 보게 될 것입니다.\n\n이 스니펫은(snippet)은 파이썬에서의 **문자열(string) 형태** 입니다.\n\n```python\n\"But I don't want ANY spam!\"\n```\n\n문자열은 <u>큰 따옴표</u> 나 <u>작은 따옴표</u>로 표시 할 수 있습니다. (예제의 문자열에는 작은 따옴표가 포함되어 있으므로 파이썬이 혼동하는 것을 방지하기 위해 큰 따옴표를 사용했습니다.)\n\n<br>\n\n```python\nviking_song = \"Spam \" * spam_amount\nprint(viking_song)\t# Spam Spam Spam Spam\n```\n\n`*`연산자는 두 개의 숫자를 곱하는데 사용되기도 하지만(`3 * 3`은 9로 계산됩니다), 문자열에 숫자를 곱하여 그 수만큼 반복되는 문자열을 만들 수도 있습니다. 파이썬에서 `*`와 `+` 같은 연산자는 어디에 적용되는지에 따라 이와 같이 많은 시간 절약 트릭을 제공합니다. (참고: [operator overloading](https://en.wikipedia.org/wiki/Operator_overloading))\n\n<br><br>\n\n## 파이썬에서의 수와 산술(Numbers and arithmetic in Python)\n\n위 예제를 통해 우리는 숫자 값을 가지는 변수를 이미 보았습니다.\n\n```python\nspam_amout = 0\n```\n\n변수형(type)을 \"Number\" 라고 표현하기보다 좀 더 전문적인 표현을 원한다면 우리는 파이썬에게 `spam_amout` 의 type을 물어볼 수 있습니다.\n\n```python\ntype(spam_amout)\t# int\n```\n\n변수가 `ìnt` 형 (short for integer) 임을 알 수 있습니다. 파이썬에는 이 외에도 다른 형태의 숫자형이 있습니다\n\n```python\ntype(19.95)\t# float\n```\n\n`float`형은 소수점 이하의 숫자를 나타냅니다 - 가중치(weight)나 비율(proportion)을 나타낼 때 유용합니다.\n\n`type()` 함수는 위에서 다뤘던 `print()` 함수 이후 두번째로 만나는 내장 함수이며 기억해두시면 좋습니다. 이 함수를 통해 파이썬에게 \"이 함수의 형태가 무엇인지?\"를 묻고 답을 얻을 수 있습니다.\n\n<br>\n\n숫자(number)를 다룬다면 빠질 수 없는게 산술(arithmetic)입니다. 우린 이미 `+` 더하기 연산과, `*` 곱하기 연산을 위에서 살펴 보았습니다(sort 함수). 파이썬에는 계산기에서 볼 수 있는 기본적인 연산을 지원합니다.\n\n| Operator | Name           | Description                                        |\n| :------- | :------------- | :------------------------------------------------- |\n| `a + b`  | Addition       | Sum of `a` and `b`                                 |\n| `a - b`  | Subtraction    | Difference of `a` and `b`                          |\n| `a * b`  | Multiplication | Product of `a` and `b`                             |\n| `a / b`  | True division  | Quotient of `a` and `b`                            |\n| `a // b` | Floor division | Quotient of `a` and `b`, removing fractional parts |\n| `a % b`  | Modulus        | Integer remainder after division of `a` by `b`     |\n| `a ** b` | Exponentiation | `a` raised to the power of `b`                     |\n| `-a`     | Negation       | The negative of `a`                                |\n\n<br>\n\n하나의 흥미로운 사실은 계산기에는 나누기 버튼이 하나만 있는 반면 파이썬에는 <u>두 가지 종류로 구분</u>되어 있습니다. \"True division\"이 우리에게 익숙한 기본적인 나눗셈 연산을 수행합니다.\n\n```python\nprint(5 / 2)\t# 2.5\nprint(6 / 2)\t# 3.0\n\n```\n\n결과는 항상 `float` 형으로 반환됩니다.\n\n<br>\n\n`//` 연산은 나눗셈 된 값을 반올림 한 정수값을 결과로 반환합니다.\n\n```python\nprint(5 // 2)\t# 2\nprint(6 // 2)\t# 3\n```\n\n위 연산이 유용하게 쓰일만한 상황이 떠오르시나요? 곧 예제를 통해 살펴보도록 하겠습니다.\n\n<br><br>\n\n### 연산 순서(Order of operations)\n\n초등학교에서 다들 산술 연산의 연산 순서 대해 배우셨을겁니다. `외국에서는 PEMDAS - Parentheses, Exponents, Multiplication/Division, Addition/Subtraction 로 외우나 봅니다`  괄호 ->지수 -> 곱셈 /나눗셈 -> 덧셈 /뺄셈 순서로 계산하면 된다고 기억하실겁니다.\n\n파이썬에서도 비슷한 규칙으로 계산을 합니다. 그리고 매우 직관적입니다.\n\n```python\n8 - 3 + 2 \t# 7\n-3 + 4 * 2\t# 5\n```\n\n기본적인 연산만으로는 우리가 원하는 결과를 얻지 못할 경우도 생깁니다.\n\n```python\nhat_height_cm = 25\nmy_height_cm = 190\n# How tall am I, in meters, when wearing my hat?\ntotal_height_meters = hat_height_cm + my_height_cm / 100\nprint(\"Height in meters =\", total_height_meters, \"?\")\t# Height in meters = 26.9 ?\n```\n\n이 경우 **괄호(parentheses)**를 사용하면 되겠습니다. 괄호를 사용하면 하위 표현식(sub-expression)을 먼저 계산할 수 있도록 연산의 순서를 조절할 수 있습니다.\n\n```python\ntotal_height_meters = (hat_height_cm + my_height_cm) / 100\nprint(\"Height in meters =\", total_height_meters) # Height in meters = 2.15\n```\n\n\n\n### 연산 관련 내장함수(Builtin functions for working with numbers)\n\n`min`과 `max` 는 각각 최소값과 최대값을 반환합니다.\n\n```python\nprint(min(1, 2, 3))\t# 1\nprint(max(1, 2, 3))\t# 3\n```\n\n`abs`는 절대값을 반환합니다.\n\n```python\nprint(abs(32))\t# 32\nprint(abs(-32))\t# 32\n```\n\n`int`와 `float`를 사용해서 각자의 형태(type)로 변환이 가능합니다.\n\n```python\nprint(float(10))\t# 10.0\nprint(int(3.33))\t# 3\n# 심지어 문자열(string)에서도 호출 가능하다!\nprint(int('807') + 1)\t# 808\n```\n\n\n\n<br><br><br>\n\n# 연습문제(Your Turn)\n\n학습한 내용을 연습해 보세요. **[first Python programming exercise](https://www.kaggle.com/kernels/fork/1275163)**\n\n<br><br><br>\n","source":"_posts/20190712-01-hello-python.md","raw":"---\ntitle: (파이썬) 01 HELLO, PYTHON!\nauthor:\n  nick: TAEJIN\n  link: null\ncategories:\n  - LANGUAGE\n  - PYTHON\ntags: [파이썬, 캐글, 튜토리얼, kaggle, programming language, python, language, tutorial]\ndate: 2019-07-12 14:11:51\nsubtitle: Kaggle 홈페이지 Python 강좌 참고\ncover: '/img/kaggle_python.png'\n\n\n---\n\n# Reference\n\n- Kaggle 홈페이지 - [Kaggle](https://www.kaggle.com)\n- 1강 'Hello, Python' - [Python Micro-Course Home Page](https://www.kaggle.com/colinmorris/hello-python)\n\n------\n\n\n\n# 개요(Intro)\n\nData Science에 필요한 Python의 핵심적인 부분들을 배우는 과정입니다. 본 과정은 기초적인 코딩 경험이나 지식이 있는 사람들을 대상으로 작성되었습니다. (만약 코딩에 익숙하지 않으시다면  \"[Python for Non-Programmers](https://wiki.python.org/moin/BeginnersGuide/NonProgrammers)\" 해당 문서를 참고하는 것을 권장합니다)\n\n\n\n우선, Python의 구문(syntax), 변수 할당(variable assignment), 산술 연산자(arithmetic operators)에 대해 가볍게 다루어 보겠습니다. 만약 Python에 경험이 있으시면 바로 연습문제([exercise with Kaggle Kernal](https://www.kaggle.com/kernels/fork/1275163))로 넘어가셔도 됩니다.\n\n<br><br><br>\n\n# Hello, Python!\n\n**Python** 은 영국의 코미디 그룹 [몬티 파이선(Monty Python)](https://en.wikipedia.org/wiki/Monty_Python)에서 그 이름을 가져왔습니다. 그들에게 존경을 표하는 마음으로 우리의 첫 python 프로그램을 스팸(spam)에 관한 그들의 코미디 스케치(skit)를 만들어 볼까요?\n`몬티 파이선의 코미디 스케치 25화 7분 50초부터 해당 에피소드가 등장한다고 합니다` - [youtube 영상](https://www.youtube.com/watch?v=zLih-WQwBSc)\n\n{% tabs spam_skit, 1 %}\n  <!-- tab CODE @code -->\n  그저 재미로, 아래의 코드를 읽어보시고 어떻게 실행 될지 예상해 보세요.\n  {% note default %}\n    {% code lang:python %}\n      spam_amout = 0\n      print(spam_amout)\n\n      #스팸, 계란, 스팸, 스팸, 베이컨과 스팸 주문\n      spam_amout = spam_amout + 4\n\n      if spam_amount >0:\n        print(\"But I don't want ANY spam!\")\n\n      viking_song = \"Spam \" * spam_amount\n      print(viking_song)\n    {% endcode %}\n  {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  결과는 아래와 같습니다\n  {% note success %}\n    {% code %}\n      0\n      But I don't want ANY spam!\n      Spam Spam Spam Spam\n    {% endcode %}\n  {% endnote %}\n  <!-- endtab -->\n{% endtabs %}\n<br>\n자, 이제 하나하나 분석해보겠습니다. 이 간단한 프로그램은  파이썬 코드가 어떻게 생겼는지, 어떻게 동작하는지를 여러 중요한 측면들을 통해 보여줍니다. 위에서 부터 순서대로 살펴보겠습니다.\n<br>\n\n```python\nspam_amount = 0\n```\n\n**변수 선언** : `spam_amount`라는 변수를 만들고 할당 연산자라고하는 = 을 사용하여 0 값을 할당합니다.\n\n> **잠깐!** :  만약 기존에 다른 언어(Java 또는 C ++ 등)로 프로그래밍을 하셨던 분의 경우 파이썬 코드에서는 몇 가지 빠져있는 것을 느꼈을 것 입니다.\n>\n> > `spam_amount`를 할당하기 전에 \"선언(declar)\"할 필요가 없습니다.\n> > 우리는 파이썬에게 어떤 유형의 값인 `spam_amount`가 참조 할지를 말할 필요가 없습니다. 사실, 우리는 문자열(string)이나 부울(boolean)과 같은 다른 종류의 것을 참조하기 위해 `spam_amount`를 재할당 할 수 있습니다.\n\n<br>\n\n```python\nprint(spam_amout)  # 0\n```\n\n**함수 호출** : `print` 함수는 화면에 전달 된 값을 표시하는 파이썬 함수입니다. 함수 이름 뒤에 괄호를 넣고 그 괄호 안에 입력 (또는 인자)을 넣음으로써 함수를 호출합니다.\n\n<br>\n\n```python\n#스팸, 계란, 스팸, 스팸, 베이컨과 스팸 주문\nspam_amout = spam_amout + 4\n```\n\n첫 줄은 **주석(comment)** 입니다.파이썬에서는 `#` 기호로 시작하면 주석으로 처리합니다.\n\n다음으로 우리는 재할당(reassignment)의 예를 볼 수 있습니다. 기존 변수의 값을 재할당하는 것은 변수를 만드는 것과 똑같은 것처럼 보입니다. <- 여전히 할당 연산자 = 을 사용합니다.\n\n이 경우 `spam_amount`에 지정하는 값으로 이전 값에 대한 간단한 산술 연산을 한 값을 할당합니다. 파이썬은 (0 + 4 = 4)에서 `=` 오른쪽에있는 표현식의 값을 왼쪽에있는 변수에 할당합니다.\n\n<br>\n\n```python\nif spam_amount > 0:\n  print(\"But I don't want ANY spam!\") # But I don't want ANY spam!\n\nviking_song = \"Spam Spam Spam\"\nprint(viking_song)\t#Spam Spam Spam\n```\n\n**조건문(conditional)**에 대한 설명은 나중에 자세히 다루겠지만, 코드를 전혀 짜본적 없더라도 이 문장이 어떤 것을 의미하는지는 짐작할 수 있을 것 입니다. 파이썬은 가독성과 단순성 때문에 높이 평가됩니다.\n\n어떤 코드가 `if문`에 속해 있는지 구별하는 방법을 잘 보십시오. `\"But I don't want ANY spam!\"`  문자열은 `spam_amount`가 양수일 때만 출력되어야 합니다. 하지만 뒤에 `print (viking_song)`과 같은 코드는 무슨일이 있어도 실행 되어야합니다. 우리(그리고 파이썬)는 그것을 어떻게 알 수 있습니까?\n\n`if문` 줄(line)의 끝에있는 콜론 (`:`)은 새로운 \"코드 블록\"이 시작되고 있음을 나타냅니다. 들여 쓰기되는 후속 행이 **해당 코드 블록의 일부** 입니다. 다른 언어에서는 `{` 중괄호 `}`를 사용하여 코드 블록의 시작과 끝을 표시합니다. Python의 이런 공백을 사용한 코드 블럭은 다른 언어에 익숙한 프로그래머에게는 놀라운 일일 수 있지만, 코드 블록의 들여 쓰기를 시행하지 않는 언어보다 일관되고 읽기 쉬운 코드가 될 수 있습니다.\n\n이후의 행에서 `viking_song`을 다루는 줄은 여분의 4 칸으로 들여 쓰이지 않기 때문에 `if`의 코드 블록에 포함되지 않습니다. 나중에 함수를 정의하고 루프(loops)를 사용할 때 들여 쓰기 된 코드 블록의 예제를 보게 될 것입니다.\n\n이 스니펫은(snippet)은 파이썬에서의 **문자열(string) 형태** 입니다.\n\n```python\n\"But I don't want ANY spam!\"\n```\n\n문자열은 <u>큰 따옴표</u> 나 <u>작은 따옴표</u>로 표시 할 수 있습니다. (예제의 문자열에는 작은 따옴표가 포함되어 있으므로 파이썬이 혼동하는 것을 방지하기 위해 큰 따옴표를 사용했습니다.)\n\n<br>\n\n```python\nviking_song = \"Spam \" * spam_amount\nprint(viking_song)\t# Spam Spam Spam Spam\n```\n\n`*`연산자는 두 개의 숫자를 곱하는데 사용되기도 하지만(`3 * 3`은 9로 계산됩니다), 문자열에 숫자를 곱하여 그 수만큼 반복되는 문자열을 만들 수도 있습니다. 파이썬에서 `*`와 `+` 같은 연산자는 어디에 적용되는지에 따라 이와 같이 많은 시간 절약 트릭을 제공합니다. (참고: [operator overloading](https://en.wikipedia.org/wiki/Operator_overloading))\n\n<br><br>\n\n## 파이썬에서의 수와 산술(Numbers and arithmetic in Python)\n\n위 예제를 통해 우리는 숫자 값을 가지는 변수를 이미 보았습니다.\n\n```python\nspam_amout = 0\n```\n\n변수형(type)을 \"Number\" 라고 표현하기보다 좀 더 전문적인 표현을 원한다면 우리는 파이썬에게 `spam_amout` 의 type을 물어볼 수 있습니다.\n\n```python\ntype(spam_amout)\t# int\n```\n\n변수가 `ìnt` 형 (short for integer) 임을 알 수 있습니다. 파이썬에는 이 외에도 다른 형태의 숫자형이 있습니다\n\n```python\ntype(19.95)\t# float\n```\n\n`float`형은 소수점 이하의 숫자를 나타냅니다 - 가중치(weight)나 비율(proportion)을 나타낼 때 유용합니다.\n\n`type()` 함수는 위에서 다뤘던 `print()` 함수 이후 두번째로 만나는 내장 함수이며 기억해두시면 좋습니다. 이 함수를 통해 파이썬에게 \"이 함수의 형태가 무엇인지?\"를 묻고 답을 얻을 수 있습니다.\n\n<br>\n\n숫자(number)를 다룬다면 빠질 수 없는게 산술(arithmetic)입니다. 우린 이미 `+` 더하기 연산과, `*` 곱하기 연산을 위에서 살펴 보았습니다(sort 함수). 파이썬에는 계산기에서 볼 수 있는 기본적인 연산을 지원합니다.\n\n| Operator | Name           | Description                                        |\n| :------- | :------------- | :------------------------------------------------- |\n| `a + b`  | Addition       | Sum of `a` and `b`                                 |\n| `a - b`  | Subtraction    | Difference of `a` and `b`                          |\n| `a * b`  | Multiplication | Product of `a` and `b`                             |\n| `a / b`  | True division  | Quotient of `a` and `b`                            |\n| `a // b` | Floor division | Quotient of `a` and `b`, removing fractional parts |\n| `a % b`  | Modulus        | Integer remainder after division of `a` by `b`     |\n| `a ** b` | Exponentiation | `a` raised to the power of `b`                     |\n| `-a`     | Negation       | The negative of `a`                                |\n\n<br>\n\n하나의 흥미로운 사실은 계산기에는 나누기 버튼이 하나만 있는 반면 파이썬에는 <u>두 가지 종류로 구분</u>되어 있습니다. \"True division\"이 우리에게 익숙한 기본적인 나눗셈 연산을 수행합니다.\n\n```python\nprint(5 / 2)\t# 2.5\nprint(6 / 2)\t# 3.0\n\n```\n\n결과는 항상 `float` 형으로 반환됩니다.\n\n<br>\n\n`//` 연산은 나눗셈 된 값을 반올림 한 정수값을 결과로 반환합니다.\n\n```python\nprint(5 // 2)\t# 2\nprint(6 // 2)\t# 3\n```\n\n위 연산이 유용하게 쓰일만한 상황이 떠오르시나요? 곧 예제를 통해 살펴보도록 하겠습니다.\n\n<br><br>\n\n### 연산 순서(Order of operations)\n\n초등학교에서 다들 산술 연산의 연산 순서 대해 배우셨을겁니다. `외국에서는 PEMDAS - Parentheses, Exponents, Multiplication/Division, Addition/Subtraction 로 외우나 봅니다`  괄호 ->지수 -> 곱셈 /나눗셈 -> 덧셈 /뺄셈 순서로 계산하면 된다고 기억하실겁니다.\n\n파이썬에서도 비슷한 규칙으로 계산을 합니다. 그리고 매우 직관적입니다.\n\n```python\n8 - 3 + 2 \t# 7\n-3 + 4 * 2\t# 5\n```\n\n기본적인 연산만으로는 우리가 원하는 결과를 얻지 못할 경우도 생깁니다.\n\n```python\nhat_height_cm = 25\nmy_height_cm = 190\n# How tall am I, in meters, when wearing my hat?\ntotal_height_meters = hat_height_cm + my_height_cm / 100\nprint(\"Height in meters =\", total_height_meters, \"?\")\t# Height in meters = 26.9 ?\n```\n\n이 경우 **괄호(parentheses)**를 사용하면 되겠습니다. 괄호를 사용하면 하위 표현식(sub-expression)을 먼저 계산할 수 있도록 연산의 순서를 조절할 수 있습니다.\n\n```python\ntotal_height_meters = (hat_height_cm + my_height_cm) / 100\nprint(\"Height in meters =\", total_height_meters) # Height in meters = 2.15\n```\n\n\n\n### 연산 관련 내장함수(Builtin functions for working with numbers)\n\n`min`과 `max` 는 각각 최소값과 최대값을 반환합니다.\n\n```python\nprint(min(1, 2, 3))\t# 1\nprint(max(1, 2, 3))\t# 3\n```\n\n`abs`는 절대값을 반환합니다.\n\n```python\nprint(abs(32))\t# 32\nprint(abs(-32))\t# 32\n```\n\n`int`와 `float`를 사용해서 각자의 형태(type)로 변환이 가능합니다.\n\n```python\nprint(float(10))\t# 10.0\nprint(int(3.33))\t# 3\n# 심지어 문자열(string)에서도 호출 가능하다!\nprint(int('807') + 1)\t# 808\n```\n\n\n\n<br><br><br>\n\n# 연습문제(Your Turn)\n\n학습한 내용을 연습해 보세요. **[first Python programming exercise](https://www.kaggle.com/kernels/fork/1275163)**\n\n<br><br><br>\n","slug":"01-hello-python","published":1,"updated":"2019-07-22T07:08:07.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt86100222646twvt85ru","content":"<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>Kaggle 홈페이지 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbQ==\" title=\"https://www.kaggle.com\">Kaggle<i class=\"fa fa-external-link\"></i></span></li>\n<li>1강 ‘Hello, Python’ - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jb2xpbm1vcnJpcy9oZWxsby1weXRob24=\" title=\"https://www.kaggle.com/colinmorris/hello-python\">Python Micro-Course Home Page<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<hr>\n<h1 id=\"개요-Intro\"><a href=\"#개요-Intro\" class=\"headerlink\" title=\"개요(Intro)\"></a>개요(Intro)</h1><p>Data Science에 필요한 Python의 핵심적인 부분들을 배우는 과정입니다. 본 과정은 기초적인 코딩 경험이나 지식이 있는 사람들을 대상으로 작성되었습니다. (만약 코딩에 익숙하지 않으시다면  “<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9CZWdpbm5lcnNHdWlkZS9Ob25Qcm9ncmFtbWVycw==\" title=\"https://wiki.python.org/moin/BeginnersGuide/NonProgrammers\">Python for Non-Programmers<i class=\"fa fa-external-link\"></i></span>“ 해당 문서를 참고하는 것을 권장합니다)</p>\n<p>우선, Python의 구문(syntax), 변수 할당(variable assignment), 산술 연산자(arithmetic operators)에 대해 가볍게 다루어 보겠습니다. 만약 Python에 경험이 있으시면 바로 연습문제(<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE2Mw==\" title=\"https://www.kaggle.com/kernels/fork/1275163\">exercise with Kaggle Kernal<i class=\"fa fa-external-link\"></i></span>)로 넘어가셔도 됩니다.</p>\n<p><br><br><br></p>\n<h1 id=\"Hello-Python\"><a href=\"#Hello-Python\" class=\"headerlink\" title=\"Hello, Python!\"></a>Hello, Python!</h1><p><strong>Python</strong> 은 영국의 코미디 그룹 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9udHlfUHl0aG9u\" title=\"https://en.wikipedia.org/wiki/Monty_Python\">몬티 파이선(Monty Python)<i class=\"fa fa-external-link\"></i></span>에서 그 이름을 가져왔습니다. 그들에게 존경을 표하는 마음으로 우리의 첫 python 프로그램을 스팸(spam)에 관한 그들의 코미디 스케치(skit)를 만들어 볼까요?<br><code>몬티 파이선의 코미디 스케치 25화 7분 50초부터 해당 에피소드가 등장한다고 합니다</code> - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj16TGloLVdRd0JTYw==\" title=\"https://www.youtube.com/watch?v=zLih-WQwBSc\">youtube 영상<i class=\"fa fa-external-link\"></i></span></p>\n<div class=\"tabs\" id=\"spam_skit\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#spam_skit-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#spam_skit-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"spam_skit-1\"><p>그저 재미로, 아래의 코드를 읽어보시고 어떻게 실행 될지 예상해 보세요.</p>\n<div class=\"note default\">\n          <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">spam_amout = <span class=\"number\">0</span></span><br><span class=\"line\">print(spam_amout)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#스팸, 계란, 스팸, 스팸, 베이컨과 스팸 주문</span></span><br><span class=\"line\">spam_amout = spam_amout + <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> spam_amount &gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"But I don't want ANY spam!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">viking_song = <span class=\"string\">\"Spam \"</span> * spam_amount</span><br><span class=\"line\">print(viking_song)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n        </div></div><div class=\"tab-pane\" id=\"spam_skit-2\"><p>결과는 아래와 같습니다</p>\n<div class=\"note success\">\n          <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">But I don&apos;t want ANY spam!</span><br><span class=\"line\">Spam Spam Spam Spam</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n        </div></div></div></div>\n<br>\n자, 이제 하나하나 분석해보겠습니다. 이 간단한 프로그램은  파이썬 코드가 어떻게 생겼는지, 어떻게 동작하는지를 여러 중요한 측면들을 통해 보여줍니다. 위에서 부터 순서대로 살펴보겠습니다.\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">spam_amount = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>변수 선언</strong> : <code>spam_amount</code>라는 변수를 만들고 할당 연산자라고하는 = 을 사용하여 0 값을 할당합니다.</p>\n<blockquote>\n<p><strong>잠깐!</strong> :  만약 기존에 다른 언어(Java 또는 C ++ 등)로 프로그래밍을 하셨던 분의 경우 파이썬 코드에서는 몇 가지 빠져있는 것을 느꼈을 것 입니다.</p>\n<blockquote>\n<p><code>spam_amount</code>를 할당하기 전에 “선언(declar)”할 필요가 없습니다.<br>우리는 파이썬에게 어떤 유형의 값인 <code>spam_amount</code>가 참조 할지를 말할 필요가 없습니다. 사실, 우리는 문자열(string)이나 부울(boolean)과 같은 다른 종류의 것을 참조하기 위해 <code>spam_amount</code>를 재할당 할 수 있습니다.</p>\n</blockquote>\n</blockquote>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(spam_amout)  <span class=\"comment\"># 0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>함수 호출</strong> : <code>print</code> 함수는 화면에 전달 된 값을 표시하는 파이썬 함수입니다. 함수 이름 뒤에 괄호를 넣고 그 괄호 안에 입력 (또는 인자)을 넣음으로써 함수를 호출합니다.</p>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#스팸, 계란, 스팸, 스팸, 베이컨과 스팸 주문</span></span><br><span class=\"line\">spam_amout = spam_amout + <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>첫 줄은 <strong>주석(comment)</strong> 입니다.파이썬에서는 <code>#</code> 기호로 시작하면 주석으로 처리합니다.</p>\n<p>다음으로 우리는 재할당(reassignment)의 예를 볼 수 있습니다. 기존 변수의 값을 재할당하는 것은 변수를 만드는 것과 똑같은 것처럼 보입니다. &lt;- 여전히 할당 연산자 = 을 사용합니다.</p>\n<p>이 경우 <code>spam_amount</code>에 지정하는 값으로 이전 값에 대한 간단한 산술 연산을 한 값을 할당합니다. 파이썬은 (0 + 4 = 4)에서 <code>=</code> 오른쪽에있는 표현식의 값을 왼쪽에있는 변수에 할당합니다.</p>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> spam_amount &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"But I don't want ANY spam!\"</span>) <span class=\"comment\"># But I don't want ANY spam!</span></span><br><span class=\"line\"></span><br><span class=\"line\">viking_song = <span class=\"string\">\"Spam Spam Spam\"</span></span><br><span class=\"line\">print(viking_song)\t<span class=\"comment\">#Spam Spam Spam</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>조건문(conditional)</strong>에 대한 설명은 나중에 자세히 다루겠지만, 코드를 전혀 짜본적 없더라도 이 문장이 어떤 것을 의미하는지는 짐작할 수 있을 것 입니다. 파이썬은 가독성과 단순성 때문에 높이 평가됩니다.</p>\n<p>어떤 코드가 <code>if문</code>에 속해 있는지 구별하는 방법을 잘 보십시오. <code>&quot;But I don&#39;t want ANY spam!&quot;</code>  문자열은 <code>spam_amount</code>가 양수일 때만 출력되어야 합니다. 하지만 뒤에 <code>print (viking_song)</code>과 같은 코드는 무슨일이 있어도 실행 되어야합니다. 우리(그리고 파이썬)는 그것을 어떻게 알 수 있습니까?</p>\n<p><code>if문</code> 줄(line)의 끝에있는 콜론 (<code>:</code>)은 새로운 “코드 블록”이 시작되고 있음을 나타냅니다. 들여 쓰기되는 후속 행이 <strong>해당 코드 블록의 일부</strong> 입니다. 다른 언어에서는 <code>{</code> 중괄호 <code>}</code>를 사용하여 코드 블록의 시작과 끝을 표시합니다. Python의 이런 공백을 사용한 코드 블럭은 다른 언어에 익숙한 프로그래머에게는 놀라운 일일 수 있지만, 코드 블록의 들여 쓰기를 시행하지 않는 언어보다 일관되고 읽기 쉬운 코드가 될 수 있습니다.</p>\n<p>이후의 행에서 <code>viking_song</code>을 다루는 줄은 여분의 4 칸으로 들여 쓰이지 않기 때문에 <code>if</code>의 코드 블록에 포함되지 않습니다. 나중에 함수를 정의하고 루프(loops)를 사용할 때 들여 쓰기 된 코드 블록의 예제를 보게 될 것입니다.</p>\n<p>이 스니펫은(snippet)은 파이썬에서의 <strong>문자열(string) 형태</strong> 입니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"But I don't want ANY spam!\"</span></span><br></pre></td></tr></table></figure>\n\n<p>문자열은 <u>큰 따옴표</u> 나 <u>작은 따옴표</u>로 표시 할 수 있습니다. (예제의 문자열에는 작은 따옴표가 포함되어 있으므로 파이썬이 혼동하는 것을 방지하기 위해 큰 따옴표를 사용했습니다.)</p>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">viking_song = <span class=\"string\">\"Spam \"</span> * spam_amount</span><br><span class=\"line\">print(viking_song)\t<span class=\"comment\"># Spam Spam Spam Spam</span></span><br></pre></td></tr></table></figure>\n\n<p><code>*</code>연산자는 두 개의 숫자를 곱하는데 사용되기도 하지만(<code>3 * 3</code>은 9로 계산됩니다), 문자열에 숫자를 곱하여 그 수만큼 반복되는 문자열을 만들 수도 있습니다. 파이썬에서 <code>*</code>와 <code>+</code> 같은 연산자는 어디에 적용되는지에 따라 이와 같이 많은 시간 절약 트릭을 제공합니다. (참고: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT3BlcmF0b3Jfb3ZlcmxvYWRpbmc=\" title=\"https://en.wikipedia.org/wiki/Operator_overloading\">operator overloading<i class=\"fa fa-external-link\"></i></span>)</p>\n<p><br><br></p>\n<h2 id=\"파이썬에서의-수와-산술-Numbers-and-arithmetic-in-Python\"><a href=\"#파이썬에서의-수와-산술-Numbers-and-arithmetic-in-Python\" class=\"headerlink\" title=\"파이썬에서의 수와 산술(Numbers and arithmetic in Python)\"></a>파이썬에서의 수와 산술(Numbers and arithmetic in Python)</h2><p>위 예제를 통해 우리는 숫자 값을 가지는 변수를 이미 보았습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">spam_amout = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>변수형(type)을 “Number” 라고 표현하기보다 좀 더 전문적인 표현을 원한다면 우리는 파이썬에게 <code>spam_amout</code> 의 type을 물어볼 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">type(spam_amout)\t<span class=\"comment\"># int</span></span><br></pre></td></tr></table></figure>\n\n<p>변수가 <code>ìnt</code> 형 (short for integer) 임을 알 수 있습니다. 파이썬에는 이 외에도 다른 형태의 숫자형이 있습니다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">type(<span class=\"number\">19.95</span>)\t<span class=\"comment\"># float</span></span><br></pre></td></tr></table></figure>\n\n<p><code>float</code>형은 소수점 이하의 숫자를 나타냅니다 - 가중치(weight)나 비율(proportion)을 나타낼 때 유용합니다.</p>\n<p><code>type()</code> 함수는 위에서 다뤘던 <code>print()</code> 함수 이후 두번째로 만나는 내장 함수이며 기억해두시면 좋습니다. 이 함수를 통해 파이썬에게 “이 함수의 형태가 무엇인지?”를 묻고 답을 얻을 수 있습니다.</p>\n<br>\n\n<p>숫자(number)를 다룬다면 빠질 수 없는게 산술(arithmetic)입니다. 우린 이미 <code>+</code> 더하기 연산과, <code>*</code> 곱하기 연산을 위에서 살펴 보았습니다(sort 함수). 파이썬에는 계산기에서 볼 수 있는 기본적인 연산을 지원합니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operator</th>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>a + b</code></td>\n<td align=\"left\">Addition</td>\n<td align=\"left\">Sum of <code>a</code> and <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a - b</code></td>\n<td align=\"left\">Subtraction</td>\n<td align=\"left\">Difference of <code>a</code> and <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a * b</code></td>\n<td align=\"left\">Multiplication</td>\n<td align=\"left\">Product of <code>a</code> and <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a / b</code></td>\n<td align=\"left\">True division</td>\n<td align=\"left\">Quotient of <code>a</code> and <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a // b</code></td>\n<td align=\"left\">Floor division</td>\n<td align=\"left\">Quotient of <code>a</code> and <code>b</code>, removing fractional parts</td>\n</tr>\n<tr>\n<td align=\"left\"><code>a % b</code></td>\n<td align=\"left\">Modulus</td>\n<td align=\"left\">Integer remainder after division of <code>a</code> by <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a ** b</code></td>\n<td align=\"left\">Exponentiation</td>\n<td align=\"left\"><code>a</code> raised to the power of <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>-a</code></td>\n<td align=\"left\">Negation</td>\n<td align=\"left\">The negative of <code>a</code></td>\n</tr>\n</tbody></table>\n<br>\n\n<p>하나의 흥미로운 사실은 계산기에는 나누기 버튼이 하나만 있는 반면 파이썬에는 <u>두 가지 종류로 구분</u>되어 있습니다. “True division”이 우리에게 익숙한 기본적인 나눗셈 연산을 수행합니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">5</span> / <span class=\"number\">2</span>)\t<span class=\"comment\"># 2.5</span></span><br><span class=\"line\">print(<span class=\"number\">6</span> / <span class=\"number\">2</span>)\t<span class=\"comment\"># 3.0</span></span><br></pre></td></tr></table></figure>\n\n<p>결과는 항상 <code>float</code> 형으로 반환됩니다.</p>\n<br>\n\n<p><code>//</code> 연산은 나눗셈 된 값을 반올림 한 정수값을 결과로 반환합니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">5</span> // <span class=\"number\">2</span>)\t<span class=\"comment\"># 2</span></span><br><span class=\"line\">print(<span class=\"number\">6</span> // <span class=\"number\">2</span>)\t<span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n\n<p>위 연산이 유용하게 쓰일만한 상황이 떠오르시나요? 곧 예제를 통해 살펴보도록 하겠습니다.</p>\n<p><br><br></p>\n<h3 id=\"연산-순서-Order-of-operations\"><a href=\"#연산-순서-Order-of-operations\" class=\"headerlink\" title=\"연산 순서(Order of operations)\"></a>연산 순서(Order of operations)</h3><p>초등학교에서 다들 산술 연산의 연산 순서 대해 배우셨을겁니다. <code>외국에서는 PEMDAS - Parentheses, Exponents, Multiplication/Division, Addition/Subtraction 로 외우나 봅니다</code>  괄호 -&gt;지수 -&gt; 곱셈 /나눗셈 -&gt; 덧셈 /뺄셈 순서로 계산하면 된다고 기억하실겁니다.</p>\n<p>파이썬에서도 비슷한 규칙으로 계산을 합니다. 그리고 매우 직관적입니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span> - <span class=\"number\">3</span> + <span class=\"number\">2</span> \t<span class=\"comment\"># 7</span></span><br><span class=\"line\"><span class=\"number\">-3</span> + <span class=\"number\">4</span> * <span class=\"number\">2</span>\t<span class=\"comment\"># 5</span></span><br></pre></td></tr></table></figure>\n\n<p>기본적인 연산만으로는 우리가 원하는 결과를 얻지 못할 경우도 생깁니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">hat_height_cm = <span class=\"number\">25</span></span><br><span class=\"line\">my_height_cm = <span class=\"number\">190</span></span><br><span class=\"line\"><span class=\"comment\"># How tall am I, in meters, when wearing my hat?</span></span><br><span class=\"line\">total_height_meters = hat_height_cm + my_height_cm / <span class=\"number\">100</span></span><br><span class=\"line\">print(<span class=\"string\">\"Height in meters =\"</span>, total_height_meters, <span class=\"string\">\"?\"</span>)\t<span class=\"comment\"># Height in meters = 26.9 ?</span></span><br></pre></td></tr></table></figure>\n\n<p>이 경우 <strong>괄호(parentheses)</strong>를 사용하면 되겠습니다. 괄호를 사용하면 하위 표현식(sub-expression)을 먼저 계산할 수 있도록 연산의 순서를 조절할 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">total_height_meters = (hat_height_cm + my_height_cm) / <span class=\"number\">100</span></span><br><span class=\"line\">print(<span class=\"string\">\"Height in meters =\"</span>, total_height_meters) <span class=\"comment\"># Height in meters = 2.15</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"연산-관련-내장함수-Builtin-functions-for-working-with-numbers\"><a href=\"#연산-관련-내장함수-Builtin-functions-for-working-with-numbers\" class=\"headerlink\" title=\"연산 관련 내장함수(Builtin functions for working with numbers)\"></a>연산 관련 내장함수(Builtin functions for working with numbers)</h3><p><code>min</code>과 <code>max</code> 는 각각 최소값과 최대값을 반환합니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(min(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))\t<span class=\"comment\"># 1</span></span><br><span class=\"line\">print(max(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))\t<span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n\n<p><code>abs</code>는 절대값을 반환합니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(abs(<span class=\"number\">32</span>))\t<span class=\"comment\"># 32</span></span><br><span class=\"line\">print(abs(<span class=\"number\">-32</span>))\t<span class=\"comment\"># 32</span></span><br></pre></td></tr></table></figure>\n\n<p><code>int</code>와 <code>float</code>를 사용해서 각자의 형태(type)로 변환이 가능합니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(float(<span class=\"number\">10</span>))\t<span class=\"comment\"># 10.0</span></span><br><span class=\"line\">print(int(<span class=\"number\">3.33</span>))\t<span class=\"comment\"># 3</span></span><br><span class=\"line\"><span class=\"comment\"># 심지어 문자열(string)에서도 호출 가능하다!</span></span><br><span class=\"line\">print(int(<span class=\"string\">'807'</span>) + <span class=\"number\">1</span>)\t<span class=\"comment\"># 808</span></span><br></pre></td></tr></table></figure>\n\n<p><br><br><br></p>\n<h1 id=\"연습문제-Your-Turn\"><a href=\"#연습문제-Your-Turn\" class=\"headerlink\" title=\"연습문제(Your Turn)\"></a>연습문제(Your Turn)</h1><p>학습한 내용을 연습해 보세요. <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE2Mw==\" title=\"https://www.kaggle.com/kernels/fork/1275163\">first Python programming exercise<i class=\"fa fa-external-link\"></i></span></strong></p>\n<p><br><br><br></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>Kaggle 홈페이지 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbQ==\" title=\"https://www.kaggle.com\">Kaggle<i class=\"fa fa-external-link\"></i></span></li>\n<li>1강 ‘Hello, Python’ - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jb2xpbm1vcnJpcy9oZWxsby1weXRob24=\" title=\"https://www.kaggle.com/colinmorris/hello-python\">Python Micro-Course Home Page<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<hr>\n<h1 id=\"개요-Intro\"><a href=\"#개요-Intro\" class=\"headerlink\" title=\"개요(Intro)\"></a>개요(Intro)</h1><p>Data Science에 필요한 Python의 핵심적인 부분들을 배우는 과정입니다. 본 과정은 기초적인 코딩 경험이나 지식이 있는 사람들을 대상으로 작성되었습니다. (만약 코딩에 익숙하지 않으시다면  “<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9CZWdpbm5lcnNHdWlkZS9Ob25Qcm9ncmFtbWVycw==\" title=\"https://wiki.python.org/moin/BeginnersGuide/NonProgrammers\">Python for Non-Programmers<i class=\"fa fa-external-link\"></i></span>“ 해당 문서를 참고하는 것을 권장합니다)</p>\n<p>우선, Python의 구문(syntax), 변수 할당(variable assignment), 산술 연산자(arithmetic operators)에 대해 가볍게 다루어 보겠습니다. 만약 Python에 경험이 있으시면 바로 연습문제(<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE2Mw==\" title=\"https://www.kaggle.com/kernels/fork/1275163\">exercise with Kaggle Kernal<i class=\"fa fa-external-link\"></i></span>)로 넘어가셔도 됩니다.</p>\n<p><br><br><br></p>\n<h1 id=\"Hello-Python\"><a href=\"#Hello-Python\" class=\"headerlink\" title=\"Hello, Python!\"></a>Hello, Python!</h1><p><strong>Python</strong> 은 영국의 코미디 그룹 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9udHlfUHl0aG9u\" title=\"https://en.wikipedia.org/wiki/Monty_Python\">몬티 파이선(Monty Python)<i class=\"fa fa-external-link\"></i></span>에서 그 이름을 가져왔습니다. 그들에게 존경을 표하는 마음으로 우리의 첫 python 프로그램을 스팸(spam)에 관한 그들의 코미디 스케치(skit)를 만들어 볼까요?<br><code>몬티 파이선의 코미디 스케치 25화 7분 50초부터 해당 에피소드가 등장한다고 합니다</code> - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj16TGloLVdRd0JTYw==\" title=\"https://www.youtube.com/watch?v=zLih-WQwBSc\">youtube 영상<i class=\"fa fa-external-link\"></i></span></p>\n<div class=\"tabs\" id=\"spam_skit\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#spam_skit-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#spam_skit-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"spam_skit-1\"><p>그저 재미로, 아래의 코드를 읽어보시고 어떻게 실행 될지 예상해 보세요.</p>\n<div class=\"note default\">\n          <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">spam_amout = <span class=\"number\">0</span></span><br><span class=\"line\">print(spam_amout)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#스팸, 계란, 스팸, 스팸, 베이컨과 스팸 주문</span></span><br><span class=\"line\">spam_amout = spam_amout + <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> spam_amount &gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"But I don't want ANY spam!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">viking_song = <span class=\"string\">\"Spam \"</span> * spam_amount</span><br><span class=\"line\">print(viking_song)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n        </div></div><div class=\"tab-pane\" id=\"spam_skit-2\"><p>결과는 아래와 같습니다</p>\n<div class=\"note success\">\n          <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">But I don&apos;t want ANY spam!</span><br><span class=\"line\">Spam Spam Spam Spam</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n        </div></div></div></div>\n<br>\n자, 이제 하나하나 분석해보겠습니다. 이 간단한 프로그램은  파이썬 코드가 어떻게 생겼는지, 어떻게 동작하는지를 여러 중요한 측면들을 통해 보여줍니다. 위에서 부터 순서대로 살펴보겠습니다.\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">spam_amount = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>변수 선언</strong> : <code>spam_amount</code>라는 변수를 만들고 할당 연산자라고하는 = 을 사용하여 0 값을 할당합니다.</p>\n<blockquote>\n<p><strong>잠깐!</strong> :  만약 기존에 다른 언어(Java 또는 C ++ 등)로 프로그래밍을 하셨던 분의 경우 파이썬 코드에서는 몇 가지 빠져있는 것을 느꼈을 것 입니다.</p>\n<blockquote>\n<p><code>spam_amount</code>를 할당하기 전에 “선언(declar)”할 필요가 없습니다.<br>우리는 파이썬에게 어떤 유형의 값인 <code>spam_amount</code>가 참조 할지를 말할 필요가 없습니다. 사실, 우리는 문자열(string)이나 부울(boolean)과 같은 다른 종류의 것을 참조하기 위해 <code>spam_amount</code>를 재할당 할 수 있습니다.</p>\n</blockquote>\n</blockquote>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(spam_amout)  <span class=\"comment\"># 0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>함수 호출</strong> : <code>print</code> 함수는 화면에 전달 된 값을 표시하는 파이썬 함수입니다. 함수 이름 뒤에 괄호를 넣고 그 괄호 안에 입력 (또는 인자)을 넣음으로써 함수를 호출합니다.</p>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#스팸, 계란, 스팸, 스팸, 베이컨과 스팸 주문</span></span><br><span class=\"line\">spam_amout = spam_amout + <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>첫 줄은 <strong>주석(comment)</strong> 입니다.파이썬에서는 <code>#</code> 기호로 시작하면 주석으로 처리합니다.</p>\n<p>다음으로 우리는 재할당(reassignment)의 예를 볼 수 있습니다. 기존 변수의 값을 재할당하는 것은 변수를 만드는 것과 똑같은 것처럼 보입니다. &lt;- 여전히 할당 연산자 = 을 사용합니다.</p>\n<p>이 경우 <code>spam_amount</code>에 지정하는 값으로 이전 값에 대한 간단한 산술 연산을 한 값을 할당합니다. 파이썬은 (0 + 4 = 4)에서 <code>=</code> 오른쪽에있는 표현식의 값을 왼쪽에있는 변수에 할당합니다.</p>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> spam_amount &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"But I don't want ANY spam!\"</span>) <span class=\"comment\"># But I don't want ANY spam!</span></span><br><span class=\"line\"></span><br><span class=\"line\">viking_song = <span class=\"string\">\"Spam Spam Spam\"</span></span><br><span class=\"line\">print(viking_song)\t<span class=\"comment\">#Spam Spam Spam</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>조건문(conditional)</strong>에 대한 설명은 나중에 자세히 다루겠지만, 코드를 전혀 짜본적 없더라도 이 문장이 어떤 것을 의미하는지는 짐작할 수 있을 것 입니다. 파이썬은 가독성과 단순성 때문에 높이 평가됩니다.</p>\n<p>어떤 코드가 <code>if문</code>에 속해 있는지 구별하는 방법을 잘 보십시오. <code>&quot;But I don&#39;t want ANY spam!&quot;</code>  문자열은 <code>spam_amount</code>가 양수일 때만 출력되어야 합니다. 하지만 뒤에 <code>print (viking_song)</code>과 같은 코드는 무슨일이 있어도 실행 되어야합니다. 우리(그리고 파이썬)는 그것을 어떻게 알 수 있습니까?</p>\n<p><code>if문</code> 줄(line)의 끝에있는 콜론 (<code>:</code>)은 새로운 “코드 블록”이 시작되고 있음을 나타냅니다. 들여 쓰기되는 후속 행이 <strong>해당 코드 블록의 일부</strong> 입니다. 다른 언어에서는 <code>{</code> 중괄호 <code>}</code>를 사용하여 코드 블록의 시작과 끝을 표시합니다. Python의 이런 공백을 사용한 코드 블럭은 다른 언어에 익숙한 프로그래머에게는 놀라운 일일 수 있지만, 코드 블록의 들여 쓰기를 시행하지 않는 언어보다 일관되고 읽기 쉬운 코드가 될 수 있습니다.</p>\n<p>이후의 행에서 <code>viking_song</code>을 다루는 줄은 여분의 4 칸으로 들여 쓰이지 않기 때문에 <code>if</code>의 코드 블록에 포함되지 않습니다. 나중에 함수를 정의하고 루프(loops)를 사용할 때 들여 쓰기 된 코드 블록의 예제를 보게 될 것입니다.</p>\n<p>이 스니펫은(snippet)은 파이썬에서의 <strong>문자열(string) 형태</strong> 입니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"But I don't want ANY spam!\"</span></span><br></pre></td></tr></table></figure>\n\n<p>문자열은 <u>큰 따옴표</u> 나 <u>작은 따옴표</u>로 표시 할 수 있습니다. (예제의 문자열에는 작은 따옴표가 포함되어 있으므로 파이썬이 혼동하는 것을 방지하기 위해 큰 따옴표를 사용했습니다.)</p>\n<br>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">viking_song = <span class=\"string\">\"Spam \"</span> * spam_amount</span><br><span class=\"line\">print(viking_song)\t<span class=\"comment\"># Spam Spam Spam Spam</span></span><br></pre></td></tr></table></figure>\n\n<p><code>*</code>연산자는 두 개의 숫자를 곱하는데 사용되기도 하지만(<code>3 * 3</code>은 9로 계산됩니다), 문자열에 숫자를 곱하여 그 수만큼 반복되는 문자열을 만들 수도 있습니다. 파이썬에서 <code>*</code>와 <code>+</code> 같은 연산자는 어디에 적용되는지에 따라 이와 같이 많은 시간 절약 트릭을 제공합니다. (참고: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT3BlcmF0b3Jfb3ZlcmxvYWRpbmc=\" title=\"https://en.wikipedia.org/wiki/Operator_overloading\">operator overloading<i class=\"fa fa-external-link\"></i></span>)</p>\n<p><br><br></p>\n<h2 id=\"파이썬에서의-수와-산술-Numbers-and-arithmetic-in-Python\"><a href=\"#파이썬에서의-수와-산술-Numbers-and-arithmetic-in-Python\" class=\"headerlink\" title=\"파이썬에서의 수와 산술(Numbers and arithmetic in Python)\"></a>파이썬에서의 수와 산술(Numbers and arithmetic in Python)</h2><p>위 예제를 통해 우리는 숫자 값을 가지는 변수를 이미 보았습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">spam_amout = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>변수형(type)을 “Number” 라고 표현하기보다 좀 더 전문적인 표현을 원한다면 우리는 파이썬에게 <code>spam_amout</code> 의 type을 물어볼 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">type(spam_amout)\t<span class=\"comment\"># int</span></span><br></pre></td></tr></table></figure>\n\n<p>변수가 <code>ìnt</code> 형 (short for integer) 임을 알 수 있습니다. 파이썬에는 이 외에도 다른 형태의 숫자형이 있습니다</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">type(<span class=\"number\">19.95</span>)\t<span class=\"comment\"># float</span></span><br></pre></td></tr></table></figure>\n\n<p><code>float</code>형은 소수점 이하의 숫자를 나타냅니다 - 가중치(weight)나 비율(proportion)을 나타낼 때 유용합니다.</p>\n<p><code>type()</code> 함수는 위에서 다뤘던 <code>print()</code> 함수 이후 두번째로 만나는 내장 함수이며 기억해두시면 좋습니다. 이 함수를 통해 파이썬에게 “이 함수의 형태가 무엇인지?”를 묻고 답을 얻을 수 있습니다.</p>\n<br>\n\n<p>숫자(number)를 다룬다면 빠질 수 없는게 산술(arithmetic)입니다. 우린 이미 <code>+</code> 더하기 연산과, <code>*</code> 곱하기 연산을 위에서 살펴 보았습니다(sort 함수). 파이썬에는 계산기에서 볼 수 있는 기본적인 연산을 지원합니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operator</th>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>a + b</code></td>\n<td align=\"left\">Addition</td>\n<td align=\"left\">Sum of <code>a</code> and <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a - b</code></td>\n<td align=\"left\">Subtraction</td>\n<td align=\"left\">Difference of <code>a</code> and <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a * b</code></td>\n<td align=\"left\">Multiplication</td>\n<td align=\"left\">Product of <code>a</code> and <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a / b</code></td>\n<td align=\"left\">True division</td>\n<td align=\"left\">Quotient of <code>a</code> and <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a // b</code></td>\n<td align=\"left\">Floor division</td>\n<td align=\"left\">Quotient of <code>a</code> and <code>b</code>, removing fractional parts</td>\n</tr>\n<tr>\n<td align=\"left\"><code>a % b</code></td>\n<td align=\"left\">Modulus</td>\n<td align=\"left\">Integer remainder after division of <code>a</code> by <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a ** b</code></td>\n<td align=\"left\">Exponentiation</td>\n<td align=\"left\"><code>a</code> raised to the power of <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>-a</code></td>\n<td align=\"left\">Negation</td>\n<td align=\"left\">The negative of <code>a</code></td>\n</tr>\n</tbody></table>\n<br>\n\n<p>하나의 흥미로운 사실은 계산기에는 나누기 버튼이 하나만 있는 반면 파이썬에는 <u>두 가지 종류로 구분</u>되어 있습니다. “True division”이 우리에게 익숙한 기본적인 나눗셈 연산을 수행합니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">5</span> / <span class=\"number\">2</span>)\t<span class=\"comment\"># 2.5</span></span><br><span class=\"line\">print(<span class=\"number\">6</span> / <span class=\"number\">2</span>)\t<span class=\"comment\"># 3.0</span></span><br></pre></td></tr></table></figure>\n\n<p>결과는 항상 <code>float</code> 형으로 반환됩니다.</p>\n<br>\n\n<p><code>//</code> 연산은 나눗셈 된 값을 반올림 한 정수값을 결과로 반환합니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">5</span> // <span class=\"number\">2</span>)\t<span class=\"comment\"># 2</span></span><br><span class=\"line\">print(<span class=\"number\">6</span> // <span class=\"number\">2</span>)\t<span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n\n<p>위 연산이 유용하게 쓰일만한 상황이 떠오르시나요? 곧 예제를 통해 살펴보도록 하겠습니다.</p>\n<p><br><br></p>\n<h3 id=\"연산-순서-Order-of-operations\"><a href=\"#연산-순서-Order-of-operations\" class=\"headerlink\" title=\"연산 순서(Order of operations)\"></a>연산 순서(Order of operations)</h3><p>초등학교에서 다들 산술 연산의 연산 순서 대해 배우셨을겁니다. <code>외국에서는 PEMDAS - Parentheses, Exponents, Multiplication/Division, Addition/Subtraction 로 외우나 봅니다</code>  괄호 -&gt;지수 -&gt; 곱셈 /나눗셈 -&gt; 덧셈 /뺄셈 순서로 계산하면 된다고 기억하실겁니다.</p>\n<p>파이썬에서도 비슷한 규칙으로 계산을 합니다. 그리고 매우 직관적입니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span> - <span class=\"number\">3</span> + <span class=\"number\">2</span> \t<span class=\"comment\"># 7</span></span><br><span class=\"line\"><span class=\"number\">-3</span> + <span class=\"number\">4</span> * <span class=\"number\">2</span>\t<span class=\"comment\"># 5</span></span><br></pre></td></tr></table></figure>\n\n<p>기본적인 연산만으로는 우리가 원하는 결과를 얻지 못할 경우도 생깁니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">hat_height_cm = <span class=\"number\">25</span></span><br><span class=\"line\">my_height_cm = <span class=\"number\">190</span></span><br><span class=\"line\"><span class=\"comment\"># How tall am I, in meters, when wearing my hat?</span></span><br><span class=\"line\">total_height_meters = hat_height_cm + my_height_cm / <span class=\"number\">100</span></span><br><span class=\"line\">print(<span class=\"string\">\"Height in meters =\"</span>, total_height_meters, <span class=\"string\">\"?\"</span>)\t<span class=\"comment\"># Height in meters = 26.9 ?</span></span><br></pre></td></tr></table></figure>\n\n<p>이 경우 <strong>괄호(parentheses)</strong>를 사용하면 되겠습니다. 괄호를 사용하면 하위 표현식(sub-expression)을 먼저 계산할 수 있도록 연산의 순서를 조절할 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">total_height_meters = (hat_height_cm + my_height_cm) / <span class=\"number\">100</span></span><br><span class=\"line\">print(<span class=\"string\">\"Height in meters =\"</span>, total_height_meters) <span class=\"comment\"># Height in meters = 2.15</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"연산-관련-내장함수-Builtin-functions-for-working-with-numbers\"><a href=\"#연산-관련-내장함수-Builtin-functions-for-working-with-numbers\" class=\"headerlink\" title=\"연산 관련 내장함수(Builtin functions for working with numbers)\"></a>연산 관련 내장함수(Builtin functions for working with numbers)</h3><p><code>min</code>과 <code>max</code> 는 각각 최소값과 최대값을 반환합니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(min(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))\t<span class=\"comment\"># 1</span></span><br><span class=\"line\">print(max(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))\t<span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n\n<p><code>abs</code>는 절대값을 반환합니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(abs(<span class=\"number\">32</span>))\t<span class=\"comment\"># 32</span></span><br><span class=\"line\">print(abs(<span class=\"number\">-32</span>))\t<span class=\"comment\"># 32</span></span><br></pre></td></tr></table></figure>\n\n<p><code>int</code>와 <code>float</code>를 사용해서 각자의 형태(type)로 변환이 가능합니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(float(<span class=\"number\">10</span>))\t<span class=\"comment\"># 10.0</span></span><br><span class=\"line\">print(int(<span class=\"number\">3.33</span>))\t<span class=\"comment\"># 3</span></span><br><span class=\"line\"><span class=\"comment\"># 심지어 문자열(string)에서도 호출 가능하다!</span></span><br><span class=\"line\">print(int(<span class=\"string\">'807'</span>) + <span class=\"number\">1</span>)\t<span class=\"comment\"># 808</span></span><br></pre></td></tr></table></figure>\n\n<p><br><br><br></p>\n<h1 id=\"연습문제-Your-Turn\"><a href=\"#연습문제-Your-Turn\" class=\"headerlink\" title=\"연습문제(Your Turn)\"></a>연습문제(Your Turn)</h1><p>학습한 내용을 연습해 보세요. <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE2Mw==\" title=\"https://www.kaggle.com/kernels/fork/1275163\">first Python programming exercise<i class=\"fa fa-external-link\"></i></span></strong></p>\n<p><br><br><br></p>\n"},{"title":"(파이썬) 02 Functions and Getting Help","date":"2019-07-15T06:06:03.000Z","subtitle":"Kaggle 홈페이지 Python 강좌 참고","_content":"\n# Reference\n\n- Kaggle 홈페이지 - [Kaggle](https://www.kaggle.com)\n- 3강 'Functions and Getting Help' - [Python Micro-Course Home Page](https://www.kaggle.com/colinmorris/functions-and-getting-help)\n\n------\n\n\n\n# 개요(Intro)\n\n앞서 `print` 나 `abs` 와 같은 함수를 사용해 보았습니다. 파이썬에는 이 외에도 수 많은 내장 함수들을 가지고 있고 자신만의 함수를 정의하여 사용할 수도 있습니다.\n\n이번 강에서는 함수를 정의하고 사용하는 방법에 대해 배워보겠습니다.\n\n<br><br><br>\n\n# 도움말 활용(Getting Help)\n\n만약 `abs` 함수의 기능이 무엇인지 잊어버렸다면 어떻게 하시겠습니까?\n\n`help()`함수는 아마 파이썬 함수 중에서도 가장 중요한 함수일 것입니다. `help()`함수의 정확한 사용법을 알게 된다면 대부분의 다른 함수들을 이해하는 열쇠를 쥐고 있는 것과 다름 없습니다.\n\n{% tabs First unique name, 1 %}\n\n  <!-- tab CODE @code -->\n  {% note default %}\n    **예제**,\n    {% code lang:python %}\n    help(round)\n    {% endcode %}\n  {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  {% note success %}\n    **출력**,\n    {% code %}\n      Help on built-in function round in module builtins:\n\n      round(...)\n          round(number[, ndigits]) -> number\n\n          Round a number to a given precision in decimal digits (default 0 digits).\n          This returns an int when called with one argument, otherwise the\n          same type as the number. ndigits may be negative.\n    {% endcode %}\n\n    `help()`함수는 2 가지를 보여줍니다:\n\n    1. 해당 함수의 헤더 `round(number[, ndigits])`. 이 경우 `round()` 함수가 `number`로 설정한 인자를 취한다는 것을 알 수 있습니다. 또한 사용자는 선택적으로 `ndigits`로 설정된 별도의 인자를 제공 할 수 있습니다.\n\n    2. 해당 함수의 기능에 대한 (영어)설명\n\n   {% endnote %}\n   <!-- endtab -->\n{% endtabs %}\n\n{% note danger %}\n\n**<span style=\"color:red\">Common pitfall(흔히하는 실수)</span>**\n\n함수(function)를 찾을 때 함수의 이름을 전달해야하며 함수를 호출 한 결과는 전달하지 말아야합니다.\n\n{% endnote %}\n\n{% tabs pitfall, 1 %}\n\n  <!-- tab CODE @code -->\n  What happens if we invoke help on a call to the function abs()?\n  {% note default %}\n    **결과를 확인해 보세요->**\n    {% code lang:python %}\n    help(round(-2.01))\n    {% endcode %}\n  {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  {% note danger %}\n    **원하던 결과가 아님**\n    {% code %}\n    Help on int object:\n\n    class int(object)\n     |  int(x=0) -> integer\n     |  int(x, base=10) -> integer\n     |  \n     |  Convert a number or string to an integer, or return 0 if no arguments\n     |  are given.  If x is a number, return x.__int__().  For floating point\n     |  numbers, this truncates towards zero.\n     |  \n     |  If x is not a number or if base is given, then x must be a string,\n     |  bytes, or bytearray instance representing an integer literal in the\n     |  given base.  The literal can be preceded by '+' or '-' and be surrounded\n     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n     |  Base 0 means to interpret the base from the string as an integer literal.\n     |  >>> int('0b100', base=0)\n     |  4\n     |  \n     |  Methods defined here:\n     |  \n     |  __abs__(self, /)\n     |      abs(self)\n     |  \n     |  __add__(self, value, /)\n     |      Return self+value.\n     |  \n     |  __and__(self, value, /)\n     |      Return self&value.\n     |  \n     |  __bool__(self, /)\n     |      self != 0\n     |  \n     |  __ceil__(...)\n     |      Ceiling of an Integral returns itself.\n     |  \n     |  __divmod__(self, value, /)\n     |      Return divmod(self, value).\n     |  \n     |  __eq__(self, value, /)\n     |      Return self==value.\n     |  \n     |  __float__(self, /)\n     |      float(self)\n     |  \n     |  __floor__(...)\n     |      Flooring an Integral returns itself.\n     |  \n     |  __floordiv__(self, value, /)\n     |      Return self//value.\n     |  \n     |  __format__(...)\n     |      default object formatter\n     |  \n     |  __ge__(self, value, /)\n     |      Return self>=value.\n     |  \n     |  __getattribute__(self, name, /)\n     |      Return getattr(self, name).\n     |  \n     |  __getnewargs__(...)\n     |  \n     |  __gt__(self, value, /)\n     |      Return self>value.\n     |  \n     |  __hash__(self, /)\n     |      Return hash(self).\n     |  \n     |  __index__(self, /)\n     |      Return self converted to an integer, if self is suitable for use as an index into a list.\n     |  \n     |  __int__(self, /)\n     |      int(self)\n     |  \n     |  __invert__(self, /)\n     |      ~self\n     |  \n     |  __le__(self, value, /)\n     |      Return self<=value.\n     |  \n     |  __lshift__(self, value, /)\n     |      Return self<<value.\n     |  \n     |  __lt__(self, value, /)\n     |      Return self<value.\n     |  \n     |  __mod__(self, value, /)\n     |      Return self%value.\n     |  \n     |  __mul__(self, value, /)\n     |      Return self*value.\n     |  \n     |  __ne__(self, value, /)\n     |      Return self!=value.\n     |  \n     |  __neg__(self, /)\n     |      -self\n     |  \n     |  __new__(*args, **kwargs) from builtins.type\n     |      Create and return a new object.  See help(type) for accurate signature.\n     |  \n     |  __or__(self, value, /)\n     |      Return self|value.\n     |  \n     |  __pos__(self, /)\n     |      +self\n     |  \n     |  __pow__(self, value, mod=None, /)\n     |      Return pow(self, value, mod).\n     |  \n     |  __radd__(self, value, /)\n     |      Return value+self.\n     |  \n     |  __rand__(self, value, /)\n     |      Return value&self.\n     |  \n     |  __rdivmod__(self, value, /)\n     |      Return divmod(value, self).\n     |  \n     |  __repr__(self, /)\n     |      Return repr(self).\n     |  \n     |  __rfloordiv__(self, value, /)\n     |      Return value//self.\n     |  \n     |  __rlshift__(self, value, /)\n     |      Return value<<self.\n     |  \n     |  __rmod__(self, value, /)\n     |      Return value%self.\n     |  \n     |  __rmul__(self, value, /)\n     |      Return value*self.\n     |  \n     |  __ror__(self, value, /)\n     |      Return value|self.\n     |  \n     |  __round__(...)\n     |      Rounding an Integral returns itself.\n     |      Rounding with an ndigits argument also returns an integer.\n     |  \n     |  __rpow__(self, value, mod=None, /)\n     |      Return pow(value, self, mod).\n     |  \n     |  __rrshift__(self, value, /)\n     |      Return value>>self.\n     |  \n     |  __rshift__(self, value, /)\n     |      Return self>>value.\n     |  \n     |  __rsub__(self, value, /)\n     |      Return value-self.\n     |  \n     |  __rtruediv__(self, value, /)\n     |      Return value/self.\n     |  \n     |  __rxor__(self, value, /)\n     |      Return value^self.\n     |  \n     |  __sizeof__(...)\n     |      Returns size in memory, in bytes\n     |  \n     |  __str__(self, /)\n     |      Return str(self).\n     |  \n     |  __sub__(self, value, /)\n     |      Return self-value.\n     |  \n     |  __truediv__(self, value, /)\n     |      Return self/value.\n     |  \n     |  __trunc__(...)\n     |      Truncating an Integral returns itself.\n     |  \n     |  __xor__(self, value, /)\n     |      Return self^value.\n     |  \n     |  bit_length(...)\n     |      int.bit_length() -> int\n     |      \n     |      Number of bits necessary to represent self in binary.\n     |      >>> bin(37)\n     |      '0b100101'\n     |      >>> (37).bit_length()\n     |      6\n     |  \n     |  conjugate(...)\n     |      Returns self, the complex conjugate of any int.\n     |  \n     |  from_bytes(...) from builtins.type\n     |      int.from_bytes(bytes, byteorder, *, signed=False) -> int\n     |      \n     |      Return the integer represented by the given array of bytes.\n     |      \n     |      The bytes argument must be a bytes-like object (e.g. bytes or bytearray).\n     |      \n     |      The byteorder argument determines the byte order used to represent the\n     |      integer.  If byteorder is 'big', the most significant byte is at the\n     |      beginning of the byte array.  If byteorder is 'little', the most\n     |      significant byte is at the end of the byte array.  To request the native\n     |      byte order of the host system, use `sys.byteorder' as the byte order value.\n     |      \n     |      The signed keyword-only argument indicates whether two's complement is\n     |      used to represent the integer.\n     |  \n     |  to_bytes(...)\n     |      int.to_bytes(length, byteorder, *, signed=False) -> bytes\n     |      \n     |      Return an array of bytes representing an integer.\n     |      \n     |      The integer is represented using length bytes.  An OverflowError is\n     |      raised if the integer is not representable with the given number of\n     |      bytes.\n     |      \n     |      The byteorder argument determines the byte order used to represent the\n     |      integer.  If byteorder is 'big', the most significant byte is at the\n     |      beginning of the byte array.  If byteorder is 'little', the most\n     |      significant byte is at the end of the byte array.  To request the native\n     |      byte order of the host system, use `sys.byteorder' as the byte order value.\n     |      \n     |      The signed keyword-only argument determines whether two's complement is\n     |      used to represent the integer.  If signed is False and a negative integer\n     |      is given, an OverflowError is raised.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  denominator\n     |      the denominator of a rational number in lowest terms\n     |  \n     |  imag\n     |      the imaginary part of a complex number\n     |  \n     |  numerator\n     |      the numerator of a rational number in lowest terms\n     |  \n     |  real\n     |      the real part of a complex number\n\n    {% endcode %}\n\n   {% endnote %}*\n   <!-- endtab -->\n{% endtabs %}\n\n파이썬 내부에서는 다음과 같이 표현식을 해석합니다. 먼저 `round(-2.01)` 값을 계산한 다음 해당 표현식의 결과에 대한 도움말(help)을 제공합니다.\n\n(도움말(OUTPUT)을 보면 `integer` 에 대해 참 많은 설명이 있습니다. 나중에 파이썬에서 객체, 메소드, 속성에 관해 배우고나면 위의 방대한 도움말 출력이 더 잘 이해가 될 것입니다.)\n\n`round`는 짧은 docstring을 가진 매우 간단한 함수입니다. `help`는 `print` 함수와 같이 보다 복잡하고 다양한 기능을 가진 함수를 다룰 때 더 많은 도움을 줍니다. 다음 출력 결과가 지금은 이해가지 않아도 걱정하지 마세요... 지금은 이 도움말에서 새로운 점이 있는지 확인만 하셔도 됩니다.\n\n{% code lang:python %}\nhelp(print)\n{% endcode %}\n{% code lang:python%}\n  Help on built-in function print in module builtins:\n\n  print(...)\n      print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\n      Prints the values to a stream, or to sys.stdout by default.\n      Optional keyword arguments:\n      file:  a file-like object (stream); defaults to the current sys.stdout.\n      sep:   string inserted between values, default a space.\n      end:   string appended after the last value, default a newline.\n      flush: whether to forcibly flush the stream.\n{% endcode %}\n\n뭔가 발견하셨나요? 예를 들어 print가 `sep`라는 인자를 취할 수 있다는 것을 알 수 있습니다. 그리고 설명을 통해 인자들 사이에 넣는 문자열이라는 것을 알 수 있습니다.\n\n\n## 함수정의(Defining functions)\n\n내장 함수(builtin function)는 훌륭하지만, 상황에 따라 나만의 함수가 필요하기도 합니다. 아래의 간단한 예제를 살펴보겠습니다.\n\n{% code lang:python%}\n  def least_difference(a, b, c):\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    return min(diff1, diff2, diff3)\n{% endcode %}\n\n이 코드는 `a`, `b`와 `c`라는 세 개의 매개변수를 취하는 `least_difference`라는 함수를 생성합니다.\n\n함수는 `def` 라는 키워드의 헤더로 시작합니다. `:` 다음에 들여쓰기 된 코드 블록(즉, 2번째 줄부터)은 함수가 호출 될 때 실행됩니다.\n\n`return`은 함수와 관련된 또다른 고유한 키워드입니다. 파이썬에서 `return` 문을 만나면 함수를 즉시 종료하고 (return의)오른쪽에있는 값을 전달합니다.\n\n`least_difference()`가 어떤 기능을 하는지 아시겠나요? 확실하지 않은 경우 몇 가지 예를 통해 언제든지 시도해 볼 수 있습니다.\n\n{% tabs df_examples %}\n  <!-- tab EXAMPLE 1 @eye-->\n  {% note info%}\n    **함수에 인자를 넣어서 확인해 볼 수 있습니다**\n    {% code lang:python %}\n      print(\n        least_difference(1, 10, 100),\n        least_difference(1, 10, 10),\n        least_difference(5, 6, 7), # Python allows trailing commas in argument lists. How nice is that?\n      )\n    {% endcode %}\n  {% endnote %}\n  {% note success %}\n    {% code %}\n      9 0 1\n    {% endcode %}\n  {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab EXAMPLE 2 @eye-->\n  {% note info%}\n    **혹은 `help()` 함수를 사용해서 설명을 읽어볼 수 있습니다**\n    {% code lang:python %}\n      help(least_difference)\n    {% endcode %}\n  {% endnote %}\n  {% note warning %}\n    {% code %}\n      Help on function least_difference in module __main__:\n\n      least_difference(a, b, c)\n    {% endcode %}\n    아쉽게도 파이썬은 제가 작성한 코드를 읽고 설명을 작성할 만큼 똑똑하지 못한 것을 볼 수 있습니다.하지만 우리는 함수를 작성하며 이 함수에 대한 설명을 추가할 수 있습니다. 이를 <b>docstring</b> 이라고 합니다\n  {% endnote %}\n  <!-- endtab -->\n{% endtabs %}\n\n### Docstring\n\n{% tabs docstring, 1 %}\n  <!-- tab CODE @code -->\n  {% note primary %}\n    {% code lang:python %}\n      def least_difference(a, b, c):\n        \"\"\"Return the smallest difference between any two numbers\n        among a, b and c.\n\n        >>> least_difference(1, 5, -5)\n        4\n        \"\"\"\n        diff1 = abs(a - b)\n        diff2 = abs(b - c)\n        diff3 = abs(a - c)\n        return min(diff1, diff2, diff3)\n\n    {% endcode %}\n\n    docstring은 함수 바로 뒤에 삼중 따옴표 `\"\"\"`로 묶인 문자열(여러 줄로 작성 가능)입니다. 이 함수에 대한 `help()`를 호출하면 docstring이 표시됩니다.\n\n  {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  {% note default %}\n    {% code %}\n      help(least_difference)\n    {% endcode %}\n\n    {% code %}\n    Help on function least_difference in module __main__:\n\n    least_difference(a, b, c)\n      Return the smallest difference between any two numbers\n      among a, b and c.\n\n      >>> least_difference(1, 5, -5)\n      4\n    {% endcode %}\n  {% endnote %}\n\n  {% note info %}\n    **<span style=\"color=blue\">참고</span>**\n    docstring의 마지막 두 줄은 예제 함수의 호출과 결과입니다.\n    (`>>>`는 파이썬 대화형 셸(interactive shells)에서 사용되는 명령 프롬프트에 대한 참조입니다.) 파이썬은 예제 호출을 실행하지 않습니다.\n    이는 독자의 이익을 위해서입니다. 함수의 docstring에 보편적으로 하나 이상의 예제 호출을 포함하지 않지만, 설명을 읽는 사람이 함수의 기능을 이해하도록 돕는 데 매우 효과적 일 수 있습니다.\n    실제 예를 보려면 numpy 함수 [np.eye에 대한 설명서](https://github.com/numpy/numpy/blob/v1.14.2/numpy/lib/twodim_base.py#L140-L194)를 참조하십시오.\n  {% endnote %}\n  <!-- endtab -->\n{% endtabs %}\n\n훌륭한 프로그래머들은 docstring을 사용합니다. 만약 그 코드를 사용하고 버릴 계획이 아니라면 말이죠(이는 드문 경우입니다).\n여러분도 docstring을 작성하는 습관을 들이시길 바랍니다.\n\n## 반환값이 없는 함수들(Functions that don't return)\n만약 우리가 작성한 함수(function)에 `return` 키워드를 작성하지 않으면 어떻게 될까요?\n\n{% tabs return_example, 1 %}\n  <!-- tab CODE @code -->\n  {% code lang:python %}\n    def least_difference(a, b, c):\n      \"\"\"Return the smallest difference between any two numbers\n      among a, b and c.\n      \"\"\"\n      diff1 = abs(a - b)\n      diff2 = abs(b - c)\n      diff3 = abs(a - c)\n      min(diff1, diff2, diff3)\n\n      print(\n        least_difference(1, 10, 100),\n        least_difference(1, 10, 10),\n        least_difference(5, 6, 7),\n      )\n  {% endcode %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  {% code %}\n    None None None\n  {% endcode %}\n\n  파이썬은 그러한 함수 정의를 허용합니다. 그 함수들의 호출 한 결과는 `None`이라는 특별한 값을 가집니다. (이는 다른 언어의 \"null\"개념과 유사합니다.)\n\n  `return` 문이 없으면 `least_difference` 는 완전히 무의미해 보이지만 이 함수를 통해 아무 것도 반환하지 않고 유용한 작업을 수행 할 수 있습니다.\n  우리는 이러한 함수를 2개나 봤습니다: `print()`와 `help()`함수는 아무 것도 반환하지 않았습니다.\n  우리는 함수들의 부작용(side effect - 화면에 텍스트를 넣는 것)을 위해서만 호출합니다. 유용한 부작용의 다른 예는 파일에 쓰거나 입력을 수정하는 것을 포함합니다.\n\n  {% subtabs mystery %}\n    <!-- tab CODE @code -->\n      {% code lang:python %}\n        mystery = print()\n        print(mystery)\n      {% endcode %}\n    <!-- endtab -->\n\n    <!-- tab OUTPUT @terminal -->\n      {% code %}\n        None\n      {% endcode %}\n    <!-- endtab -->\n  {% endsubtabs %}\n  <!-- endtab -->\n{% endtabs %}\n\n## 기본 매개변수(Default arguments)\n\n`help(print)` 를 호출하면 `print` 함수에는 몇 가지의 선택적 매개변수들(optinal arguments)이 있는 것을 볼 수 있습니다.\n예를 들어, 출력하고자 하는 값들 사이에 우리가 원하는 특별한 `sep` 값을 지정할 수 있습니다.\n\n{% code lang:python %}\nprint(1, 2, 3, sep=' < ')\n{% endcode %}\n\n{% code %}\n1 < 2 < 3\n{% endcode %}\n\n만약 특정한 값을 명시하지 않으면, `sep` 에는 기본값인 `' '`(공백) 이 들어갑니다.\n\n{% code lang:python %}\nprint(1, 2, 3)\n{% endcode %}\n\n{% code %}\n1 2 3\n{% endcode %}\n\n우리가 정의한 함수에 선택적 매개변수를 기본값으로 추가하는 것은 꽤 간단합니다.\n\n{% code lang:python %}\ndef greet(who=\"Colin\"):\n    print(\"Hello,\", who)\n\ngreet()\ngreet(who=\"Kaggle\")\n# (In this case, we don't need to specify the name of the argument, because it's unambiguous.)\ngreet(\"world\")\n{% endcode %}\n\n{% code %}\nHello, colin\nHello, Kaggle\nHello, world\n{% endcode %}\n\n\n## 함수들에 적용되는 함수들(Functions Applied to Functions)\n\n처음에는 매우 추상적이라고 느낄 수 있지만 매우 매우 유용한 기술이 있습니다.\n함수는 다른 함수의 매개변수로 사용될 수 있습니다. 몇 가지 예를 들어 보면 다음과 같습니다.\n\n{% tabs functions_example %}\n<!-- tab EXAMPLE 1 @eye -->\n  {% subtabs squared_call %}\n  <!-- tab CODE @code -->\n    {% note primary %}\n      {% code lang:python %}\n        def mult_by_five(x):\n          return 5 * x\n\n        def call(fn, arg):\n          \"\"\"Call fn on arg\"\"\"\n          return fn(arg)\n\n        def squared_call(fn, arg):\n          \"\"\"Call fn on the result of calling fn on arg\"\"\"\n          return fn(fn(arg))\n\n        print(\n          call(mult_by_five, 1),\n          squared_call(mult_by_five, 1),\n          sep='\\n', # '\\n' is the newline character - it starts a new line\n        )\n      {% endcode %}\n    {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  {% note success %}\n    {% code %}\n    5\n    25\n    {% endcode %}\n\n    다른 함수에서 작동하는 함수를 \"Higher order function\"이라고합니다.\n    아마 지금 당장은 잘 사용하지 않으시겠지만 파이썬에 내장된 매우 유용한 고차 함수들(higher order function)이 있습니다.\n\n  {% endnote %}\n  <!-- endtab -->\n  {% endsubtabs %}\n<!-- endtab -->\n\n<!-- tab EXAMPLE 2 @eye -->\n{% subtabs max %}\n  <!-- tab CODE @code -->\n\n  {% note primary %}\n    `max` 함수에 대한 흥미로운 예제입니다,\n\n    {% code lang:python %}\n      def mod_5(x):\n        \"\"\"Return the remainder of x after dividing by 5\"\"\"\n        return x % 5\n\n      print(\n        'Which number is biggest?',\n        max(100, 51, 14),\n        'Which number is the biggest modulo 5?',\n        max(100, 51, 14, key=mod_5),\n        sep='\\n',\n      )\n    {% endcode %}\n  {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  {% note success %}\n    {% code %}\n    Which number is biggest?\n    100\n    Which number is the biggest modulo 5?\n    14\n    {% endcode %}\n\n    기본적으로 `max` 함수는 가장 큰 인수를 반환합니다.\n    그러나 선택적 `key` 인자를 사용하여 함수를 전달하면 `key(x)` (일명 'argmax')를 최대화하는 인자 `x`를 반환합니다.\n\n  {% endnote %}\n  <!-- endtab -->\n  {% endsubtabs %}\n<!-- endtab -->\n{% endtabs %}\n\n<br><br><br>\n\n# 연습문제(Your Turn)\n\n함수(Function)는 파이썬 프로그래밍의 새로운 세상을 열어줍니다. **[second Python programming exercise](https://www.kaggle.com/kernels/fork/1275158)**\n","source":"_posts/20190715-02-functions-and-getting-help.md","raw":"---\ntitle: (파이썬) 02 Functions and Getting Help\ncategories:\n  - LANGUAGE\n  - PYTHON\ntags: [파이썬, 캐글, 튜토리얼, kaggle, programming language, python, language, functions, tutorial]\ndate: 2019-07-15 15:06:03\nsubtitle: Kaggle 홈페이지 Python 강좌 참고\n\n\n---\n\n# Reference\n\n- Kaggle 홈페이지 - [Kaggle](https://www.kaggle.com)\n- 3강 'Functions and Getting Help' - [Python Micro-Course Home Page](https://www.kaggle.com/colinmorris/functions-and-getting-help)\n\n------\n\n\n\n# 개요(Intro)\n\n앞서 `print` 나 `abs` 와 같은 함수를 사용해 보았습니다. 파이썬에는 이 외에도 수 많은 내장 함수들을 가지고 있고 자신만의 함수를 정의하여 사용할 수도 있습니다.\n\n이번 강에서는 함수를 정의하고 사용하는 방법에 대해 배워보겠습니다.\n\n<br><br><br>\n\n# 도움말 활용(Getting Help)\n\n만약 `abs` 함수의 기능이 무엇인지 잊어버렸다면 어떻게 하시겠습니까?\n\n`help()`함수는 아마 파이썬 함수 중에서도 가장 중요한 함수일 것입니다. `help()`함수의 정확한 사용법을 알게 된다면 대부분의 다른 함수들을 이해하는 열쇠를 쥐고 있는 것과 다름 없습니다.\n\n{% tabs First unique name, 1 %}\n\n  <!-- tab CODE @code -->\n  {% note default %}\n    **예제**,\n    {% code lang:python %}\n    help(round)\n    {% endcode %}\n  {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  {% note success %}\n    **출력**,\n    {% code %}\n      Help on built-in function round in module builtins:\n\n      round(...)\n          round(number[, ndigits]) -> number\n\n          Round a number to a given precision in decimal digits (default 0 digits).\n          This returns an int when called with one argument, otherwise the\n          same type as the number. ndigits may be negative.\n    {% endcode %}\n\n    `help()`함수는 2 가지를 보여줍니다:\n\n    1. 해당 함수의 헤더 `round(number[, ndigits])`. 이 경우 `round()` 함수가 `number`로 설정한 인자를 취한다는 것을 알 수 있습니다. 또한 사용자는 선택적으로 `ndigits`로 설정된 별도의 인자를 제공 할 수 있습니다.\n\n    2. 해당 함수의 기능에 대한 (영어)설명\n\n   {% endnote %}\n   <!-- endtab -->\n{% endtabs %}\n\n{% note danger %}\n\n**<span style=\"color:red\">Common pitfall(흔히하는 실수)</span>**\n\n함수(function)를 찾을 때 함수의 이름을 전달해야하며 함수를 호출 한 결과는 전달하지 말아야합니다.\n\n{% endnote %}\n\n{% tabs pitfall, 1 %}\n\n  <!-- tab CODE @code -->\n  What happens if we invoke help on a call to the function abs()?\n  {% note default %}\n    **결과를 확인해 보세요->**\n    {% code lang:python %}\n    help(round(-2.01))\n    {% endcode %}\n  {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  {% note danger %}\n    **원하던 결과가 아님**\n    {% code %}\n    Help on int object:\n\n    class int(object)\n     |  int(x=0) -> integer\n     |  int(x, base=10) -> integer\n     |  \n     |  Convert a number or string to an integer, or return 0 if no arguments\n     |  are given.  If x is a number, return x.__int__().  For floating point\n     |  numbers, this truncates towards zero.\n     |  \n     |  If x is not a number or if base is given, then x must be a string,\n     |  bytes, or bytearray instance representing an integer literal in the\n     |  given base.  The literal can be preceded by '+' or '-' and be surrounded\n     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n     |  Base 0 means to interpret the base from the string as an integer literal.\n     |  >>> int('0b100', base=0)\n     |  4\n     |  \n     |  Methods defined here:\n     |  \n     |  __abs__(self, /)\n     |      abs(self)\n     |  \n     |  __add__(self, value, /)\n     |      Return self+value.\n     |  \n     |  __and__(self, value, /)\n     |      Return self&value.\n     |  \n     |  __bool__(self, /)\n     |      self != 0\n     |  \n     |  __ceil__(...)\n     |      Ceiling of an Integral returns itself.\n     |  \n     |  __divmod__(self, value, /)\n     |      Return divmod(self, value).\n     |  \n     |  __eq__(self, value, /)\n     |      Return self==value.\n     |  \n     |  __float__(self, /)\n     |      float(self)\n     |  \n     |  __floor__(...)\n     |      Flooring an Integral returns itself.\n     |  \n     |  __floordiv__(self, value, /)\n     |      Return self//value.\n     |  \n     |  __format__(...)\n     |      default object formatter\n     |  \n     |  __ge__(self, value, /)\n     |      Return self>=value.\n     |  \n     |  __getattribute__(self, name, /)\n     |      Return getattr(self, name).\n     |  \n     |  __getnewargs__(...)\n     |  \n     |  __gt__(self, value, /)\n     |      Return self>value.\n     |  \n     |  __hash__(self, /)\n     |      Return hash(self).\n     |  \n     |  __index__(self, /)\n     |      Return self converted to an integer, if self is suitable for use as an index into a list.\n     |  \n     |  __int__(self, /)\n     |      int(self)\n     |  \n     |  __invert__(self, /)\n     |      ~self\n     |  \n     |  __le__(self, value, /)\n     |      Return self<=value.\n     |  \n     |  __lshift__(self, value, /)\n     |      Return self<<value.\n     |  \n     |  __lt__(self, value, /)\n     |      Return self<value.\n     |  \n     |  __mod__(self, value, /)\n     |      Return self%value.\n     |  \n     |  __mul__(self, value, /)\n     |      Return self*value.\n     |  \n     |  __ne__(self, value, /)\n     |      Return self!=value.\n     |  \n     |  __neg__(self, /)\n     |      -self\n     |  \n     |  __new__(*args, **kwargs) from builtins.type\n     |      Create and return a new object.  See help(type) for accurate signature.\n     |  \n     |  __or__(self, value, /)\n     |      Return self|value.\n     |  \n     |  __pos__(self, /)\n     |      +self\n     |  \n     |  __pow__(self, value, mod=None, /)\n     |      Return pow(self, value, mod).\n     |  \n     |  __radd__(self, value, /)\n     |      Return value+self.\n     |  \n     |  __rand__(self, value, /)\n     |      Return value&self.\n     |  \n     |  __rdivmod__(self, value, /)\n     |      Return divmod(value, self).\n     |  \n     |  __repr__(self, /)\n     |      Return repr(self).\n     |  \n     |  __rfloordiv__(self, value, /)\n     |      Return value//self.\n     |  \n     |  __rlshift__(self, value, /)\n     |      Return value<<self.\n     |  \n     |  __rmod__(self, value, /)\n     |      Return value%self.\n     |  \n     |  __rmul__(self, value, /)\n     |      Return value*self.\n     |  \n     |  __ror__(self, value, /)\n     |      Return value|self.\n     |  \n     |  __round__(...)\n     |      Rounding an Integral returns itself.\n     |      Rounding with an ndigits argument also returns an integer.\n     |  \n     |  __rpow__(self, value, mod=None, /)\n     |      Return pow(value, self, mod).\n     |  \n     |  __rrshift__(self, value, /)\n     |      Return value>>self.\n     |  \n     |  __rshift__(self, value, /)\n     |      Return self>>value.\n     |  \n     |  __rsub__(self, value, /)\n     |      Return value-self.\n     |  \n     |  __rtruediv__(self, value, /)\n     |      Return value/self.\n     |  \n     |  __rxor__(self, value, /)\n     |      Return value^self.\n     |  \n     |  __sizeof__(...)\n     |      Returns size in memory, in bytes\n     |  \n     |  __str__(self, /)\n     |      Return str(self).\n     |  \n     |  __sub__(self, value, /)\n     |      Return self-value.\n     |  \n     |  __truediv__(self, value, /)\n     |      Return self/value.\n     |  \n     |  __trunc__(...)\n     |      Truncating an Integral returns itself.\n     |  \n     |  __xor__(self, value, /)\n     |      Return self^value.\n     |  \n     |  bit_length(...)\n     |      int.bit_length() -> int\n     |      \n     |      Number of bits necessary to represent self in binary.\n     |      >>> bin(37)\n     |      '0b100101'\n     |      >>> (37).bit_length()\n     |      6\n     |  \n     |  conjugate(...)\n     |      Returns self, the complex conjugate of any int.\n     |  \n     |  from_bytes(...) from builtins.type\n     |      int.from_bytes(bytes, byteorder, *, signed=False) -> int\n     |      \n     |      Return the integer represented by the given array of bytes.\n     |      \n     |      The bytes argument must be a bytes-like object (e.g. bytes or bytearray).\n     |      \n     |      The byteorder argument determines the byte order used to represent the\n     |      integer.  If byteorder is 'big', the most significant byte is at the\n     |      beginning of the byte array.  If byteorder is 'little', the most\n     |      significant byte is at the end of the byte array.  To request the native\n     |      byte order of the host system, use `sys.byteorder' as the byte order value.\n     |      \n     |      The signed keyword-only argument indicates whether two's complement is\n     |      used to represent the integer.\n     |  \n     |  to_bytes(...)\n     |      int.to_bytes(length, byteorder, *, signed=False) -> bytes\n     |      \n     |      Return an array of bytes representing an integer.\n     |      \n     |      The integer is represented using length bytes.  An OverflowError is\n     |      raised if the integer is not representable with the given number of\n     |      bytes.\n     |      \n     |      The byteorder argument determines the byte order used to represent the\n     |      integer.  If byteorder is 'big', the most significant byte is at the\n     |      beginning of the byte array.  If byteorder is 'little', the most\n     |      significant byte is at the end of the byte array.  To request the native\n     |      byte order of the host system, use `sys.byteorder' as the byte order value.\n     |      \n     |      The signed keyword-only argument determines whether two's complement is\n     |      used to represent the integer.  If signed is False and a negative integer\n     |      is given, an OverflowError is raised.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  denominator\n     |      the denominator of a rational number in lowest terms\n     |  \n     |  imag\n     |      the imaginary part of a complex number\n     |  \n     |  numerator\n     |      the numerator of a rational number in lowest terms\n     |  \n     |  real\n     |      the real part of a complex number\n\n    {% endcode %}\n\n   {% endnote %}*\n   <!-- endtab -->\n{% endtabs %}\n\n파이썬 내부에서는 다음과 같이 표현식을 해석합니다. 먼저 `round(-2.01)` 값을 계산한 다음 해당 표현식의 결과에 대한 도움말(help)을 제공합니다.\n\n(도움말(OUTPUT)을 보면 `integer` 에 대해 참 많은 설명이 있습니다. 나중에 파이썬에서 객체, 메소드, 속성에 관해 배우고나면 위의 방대한 도움말 출력이 더 잘 이해가 될 것입니다.)\n\n`round`는 짧은 docstring을 가진 매우 간단한 함수입니다. `help`는 `print` 함수와 같이 보다 복잡하고 다양한 기능을 가진 함수를 다룰 때 더 많은 도움을 줍니다. 다음 출력 결과가 지금은 이해가지 않아도 걱정하지 마세요... 지금은 이 도움말에서 새로운 점이 있는지 확인만 하셔도 됩니다.\n\n{% code lang:python %}\nhelp(print)\n{% endcode %}\n{% code lang:python%}\n  Help on built-in function print in module builtins:\n\n  print(...)\n      print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\n      Prints the values to a stream, or to sys.stdout by default.\n      Optional keyword arguments:\n      file:  a file-like object (stream); defaults to the current sys.stdout.\n      sep:   string inserted between values, default a space.\n      end:   string appended after the last value, default a newline.\n      flush: whether to forcibly flush the stream.\n{% endcode %}\n\n뭔가 발견하셨나요? 예를 들어 print가 `sep`라는 인자를 취할 수 있다는 것을 알 수 있습니다. 그리고 설명을 통해 인자들 사이에 넣는 문자열이라는 것을 알 수 있습니다.\n\n\n## 함수정의(Defining functions)\n\n내장 함수(builtin function)는 훌륭하지만, 상황에 따라 나만의 함수가 필요하기도 합니다. 아래의 간단한 예제를 살펴보겠습니다.\n\n{% code lang:python%}\n  def least_difference(a, b, c):\n    diff1 = abs(a - b)\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    return min(diff1, diff2, diff3)\n{% endcode %}\n\n이 코드는 `a`, `b`와 `c`라는 세 개의 매개변수를 취하는 `least_difference`라는 함수를 생성합니다.\n\n함수는 `def` 라는 키워드의 헤더로 시작합니다. `:` 다음에 들여쓰기 된 코드 블록(즉, 2번째 줄부터)은 함수가 호출 될 때 실행됩니다.\n\n`return`은 함수와 관련된 또다른 고유한 키워드입니다. 파이썬에서 `return` 문을 만나면 함수를 즉시 종료하고 (return의)오른쪽에있는 값을 전달합니다.\n\n`least_difference()`가 어떤 기능을 하는지 아시겠나요? 확실하지 않은 경우 몇 가지 예를 통해 언제든지 시도해 볼 수 있습니다.\n\n{% tabs df_examples %}\n  <!-- tab EXAMPLE 1 @eye-->\n  {% note info%}\n    **함수에 인자를 넣어서 확인해 볼 수 있습니다**\n    {% code lang:python %}\n      print(\n        least_difference(1, 10, 100),\n        least_difference(1, 10, 10),\n        least_difference(5, 6, 7), # Python allows trailing commas in argument lists. How nice is that?\n      )\n    {% endcode %}\n  {% endnote %}\n  {% note success %}\n    {% code %}\n      9 0 1\n    {% endcode %}\n  {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab EXAMPLE 2 @eye-->\n  {% note info%}\n    **혹은 `help()` 함수를 사용해서 설명을 읽어볼 수 있습니다**\n    {% code lang:python %}\n      help(least_difference)\n    {% endcode %}\n  {% endnote %}\n  {% note warning %}\n    {% code %}\n      Help on function least_difference in module __main__:\n\n      least_difference(a, b, c)\n    {% endcode %}\n    아쉽게도 파이썬은 제가 작성한 코드를 읽고 설명을 작성할 만큼 똑똑하지 못한 것을 볼 수 있습니다.하지만 우리는 함수를 작성하며 이 함수에 대한 설명을 추가할 수 있습니다. 이를 <b>docstring</b> 이라고 합니다\n  {% endnote %}\n  <!-- endtab -->\n{% endtabs %}\n\n### Docstring\n\n{% tabs docstring, 1 %}\n  <!-- tab CODE @code -->\n  {% note primary %}\n    {% code lang:python %}\n      def least_difference(a, b, c):\n        \"\"\"Return the smallest difference between any two numbers\n        among a, b and c.\n\n        >>> least_difference(1, 5, -5)\n        4\n        \"\"\"\n        diff1 = abs(a - b)\n        diff2 = abs(b - c)\n        diff3 = abs(a - c)\n        return min(diff1, diff2, diff3)\n\n    {% endcode %}\n\n    docstring은 함수 바로 뒤에 삼중 따옴표 `\"\"\"`로 묶인 문자열(여러 줄로 작성 가능)입니다. 이 함수에 대한 `help()`를 호출하면 docstring이 표시됩니다.\n\n  {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  {% note default %}\n    {% code %}\n      help(least_difference)\n    {% endcode %}\n\n    {% code %}\n    Help on function least_difference in module __main__:\n\n    least_difference(a, b, c)\n      Return the smallest difference between any two numbers\n      among a, b and c.\n\n      >>> least_difference(1, 5, -5)\n      4\n    {% endcode %}\n  {% endnote %}\n\n  {% note info %}\n    **<span style=\"color=blue\">참고</span>**\n    docstring의 마지막 두 줄은 예제 함수의 호출과 결과입니다.\n    (`>>>`는 파이썬 대화형 셸(interactive shells)에서 사용되는 명령 프롬프트에 대한 참조입니다.) 파이썬은 예제 호출을 실행하지 않습니다.\n    이는 독자의 이익을 위해서입니다. 함수의 docstring에 보편적으로 하나 이상의 예제 호출을 포함하지 않지만, 설명을 읽는 사람이 함수의 기능을 이해하도록 돕는 데 매우 효과적 일 수 있습니다.\n    실제 예를 보려면 numpy 함수 [np.eye에 대한 설명서](https://github.com/numpy/numpy/blob/v1.14.2/numpy/lib/twodim_base.py#L140-L194)를 참조하십시오.\n  {% endnote %}\n  <!-- endtab -->\n{% endtabs %}\n\n훌륭한 프로그래머들은 docstring을 사용합니다. 만약 그 코드를 사용하고 버릴 계획이 아니라면 말이죠(이는 드문 경우입니다).\n여러분도 docstring을 작성하는 습관을 들이시길 바랍니다.\n\n## 반환값이 없는 함수들(Functions that don't return)\n만약 우리가 작성한 함수(function)에 `return` 키워드를 작성하지 않으면 어떻게 될까요?\n\n{% tabs return_example, 1 %}\n  <!-- tab CODE @code -->\n  {% code lang:python %}\n    def least_difference(a, b, c):\n      \"\"\"Return the smallest difference between any two numbers\n      among a, b and c.\n      \"\"\"\n      diff1 = abs(a - b)\n      diff2 = abs(b - c)\n      diff3 = abs(a - c)\n      min(diff1, diff2, diff3)\n\n      print(\n        least_difference(1, 10, 100),\n        least_difference(1, 10, 10),\n        least_difference(5, 6, 7),\n      )\n  {% endcode %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  {% code %}\n    None None None\n  {% endcode %}\n\n  파이썬은 그러한 함수 정의를 허용합니다. 그 함수들의 호출 한 결과는 `None`이라는 특별한 값을 가집니다. (이는 다른 언어의 \"null\"개념과 유사합니다.)\n\n  `return` 문이 없으면 `least_difference` 는 완전히 무의미해 보이지만 이 함수를 통해 아무 것도 반환하지 않고 유용한 작업을 수행 할 수 있습니다.\n  우리는 이러한 함수를 2개나 봤습니다: `print()`와 `help()`함수는 아무 것도 반환하지 않았습니다.\n  우리는 함수들의 부작용(side effect - 화면에 텍스트를 넣는 것)을 위해서만 호출합니다. 유용한 부작용의 다른 예는 파일에 쓰거나 입력을 수정하는 것을 포함합니다.\n\n  {% subtabs mystery %}\n    <!-- tab CODE @code -->\n      {% code lang:python %}\n        mystery = print()\n        print(mystery)\n      {% endcode %}\n    <!-- endtab -->\n\n    <!-- tab OUTPUT @terminal -->\n      {% code %}\n        None\n      {% endcode %}\n    <!-- endtab -->\n  {% endsubtabs %}\n  <!-- endtab -->\n{% endtabs %}\n\n## 기본 매개변수(Default arguments)\n\n`help(print)` 를 호출하면 `print` 함수에는 몇 가지의 선택적 매개변수들(optinal arguments)이 있는 것을 볼 수 있습니다.\n예를 들어, 출력하고자 하는 값들 사이에 우리가 원하는 특별한 `sep` 값을 지정할 수 있습니다.\n\n{% code lang:python %}\nprint(1, 2, 3, sep=' < ')\n{% endcode %}\n\n{% code %}\n1 < 2 < 3\n{% endcode %}\n\n만약 특정한 값을 명시하지 않으면, `sep` 에는 기본값인 `' '`(공백) 이 들어갑니다.\n\n{% code lang:python %}\nprint(1, 2, 3)\n{% endcode %}\n\n{% code %}\n1 2 3\n{% endcode %}\n\n우리가 정의한 함수에 선택적 매개변수를 기본값으로 추가하는 것은 꽤 간단합니다.\n\n{% code lang:python %}\ndef greet(who=\"Colin\"):\n    print(\"Hello,\", who)\n\ngreet()\ngreet(who=\"Kaggle\")\n# (In this case, we don't need to specify the name of the argument, because it's unambiguous.)\ngreet(\"world\")\n{% endcode %}\n\n{% code %}\nHello, colin\nHello, Kaggle\nHello, world\n{% endcode %}\n\n\n## 함수들에 적용되는 함수들(Functions Applied to Functions)\n\n처음에는 매우 추상적이라고 느낄 수 있지만 매우 매우 유용한 기술이 있습니다.\n함수는 다른 함수의 매개변수로 사용될 수 있습니다. 몇 가지 예를 들어 보면 다음과 같습니다.\n\n{% tabs functions_example %}\n<!-- tab EXAMPLE 1 @eye -->\n  {% subtabs squared_call %}\n  <!-- tab CODE @code -->\n    {% note primary %}\n      {% code lang:python %}\n        def mult_by_five(x):\n          return 5 * x\n\n        def call(fn, arg):\n          \"\"\"Call fn on arg\"\"\"\n          return fn(arg)\n\n        def squared_call(fn, arg):\n          \"\"\"Call fn on the result of calling fn on arg\"\"\"\n          return fn(fn(arg))\n\n        print(\n          call(mult_by_five, 1),\n          squared_call(mult_by_five, 1),\n          sep='\\n', # '\\n' is the newline character - it starts a new line\n        )\n      {% endcode %}\n    {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  {% note success %}\n    {% code %}\n    5\n    25\n    {% endcode %}\n\n    다른 함수에서 작동하는 함수를 \"Higher order function\"이라고합니다.\n    아마 지금 당장은 잘 사용하지 않으시겠지만 파이썬에 내장된 매우 유용한 고차 함수들(higher order function)이 있습니다.\n\n  {% endnote %}\n  <!-- endtab -->\n  {% endsubtabs %}\n<!-- endtab -->\n\n<!-- tab EXAMPLE 2 @eye -->\n{% subtabs max %}\n  <!-- tab CODE @code -->\n\n  {% note primary %}\n    `max` 함수에 대한 흥미로운 예제입니다,\n\n    {% code lang:python %}\n      def mod_5(x):\n        \"\"\"Return the remainder of x after dividing by 5\"\"\"\n        return x % 5\n\n      print(\n        'Which number is biggest?',\n        max(100, 51, 14),\n        'Which number is the biggest modulo 5?',\n        max(100, 51, 14, key=mod_5),\n        sep='\\n',\n      )\n    {% endcode %}\n  {% endnote %}\n  <!-- endtab -->\n\n  <!-- tab OUTPUT @terminal -->\n  {% note success %}\n    {% code %}\n    Which number is biggest?\n    100\n    Which number is the biggest modulo 5?\n    14\n    {% endcode %}\n\n    기본적으로 `max` 함수는 가장 큰 인수를 반환합니다.\n    그러나 선택적 `key` 인자를 사용하여 함수를 전달하면 `key(x)` (일명 'argmax')를 최대화하는 인자 `x`를 반환합니다.\n\n  {% endnote %}\n  <!-- endtab -->\n  {% endsubtabs %}\n<!-- endtab -->\n{% endtabs %}\n\n<br><br><br>\n\n# 연습문제(Your Turn)\n\n함수(Function)는 파이썬 프로그래밍의 새로운 세상을 열어줍니다. **[second Python programming exercise](https://www.kaggle.com/kernels/fork/1275158)**\n","slug":"02-functions-and-getting-help","published":1,"updated":"2019-07-22T07:08:00.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt86700252646rou5f13c","content":"<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>Kaggle 홈페이지 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbQ==\" title=\"https://www.kaggle.com\">Kaggle<i class=\"fa fa-external-link\"></i></span></li>\n<li>3강 ‘Functions and Getting Help’ - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jb2xpbm1vcnJpcy9mdW5jdGlvbnMtYW5kLWdldHRpbmctaGVscA==\" title=\"https://www.kaggle.com/colinmorris/functions-and-getting-help\">Python Micro-Course Home Page<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<hr>\n<h1 id=\"개요-Intro\"><a href=\"#개요-Intro\" class=\"headerlink\" title=\"개요(Intro)\"></a>개요(Intro)</h1><p>앞서 <code>print</code> 나 <code>abs</code> 와 같은 함수를 사용해 보았습니다. 파이썬에는 이 외에도 수 많은 내장 함수들을 가지고 있고 자신만의 함수를 정의하여 사용할 수도 있습니다.</p>\n<p>이번 강에서는 함수를 정의하고 사용하는 방법에 대해 배워보겠습니다.</p>\n<p><br><br><br></p>\n<h1 id=\"도움말-활용-Getting-Help\"><a href=\"#도움말-활용-Getting-Help\" class=\"headerlink\" title=\"도움말 활용(Getting Help)\"></a>도움말 활용(Getting Help)</h1><p>만약 <code>abs</code> 함수의 기능이 무엇인지 잊어버렸다면 어떻게 하시겠습니까?</p>\n<p><code>help()</code>함수는 아마 파이썬 함수 중에서도 가장 중요한 함수일 것입니다. <code>help()</code>함수의 정확한 사용법을 알게 된다면 대부분의 다른 함수들을 이해하는 열쇠를 쥐고 있는 것과 다름 없습니다.</p>\n<div class=\"tabs\" id=\"first-unique-name\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#first-unique-name-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#first-unique-name-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"first-unique-name-1\"><div class=\"note default\">\n          <p><strong>예제</strong>,</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(round)</span><br></pre></td></tr></table></figure>\n        </div></div><div class=\"tab-pane\" id=\"first-unique-name-2\"><div class=\"note success\">\n          <p><strong>출력</strong>,</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on built-in function round in module builtins:</span><br><span class=\"line\"></span><br><span class=\"line\">round(...)</span><br><span class=\"line\">    round(number[, ndigits]) -&gt; number</span><br><span class=\"line\"></span><br><span class=\"line\">    Round a number to a given precision in decimal digits (default 0 digits).</span><br><span class=\"line\">    This returns an int when called with one argument, otherwise the</span><br><span class=\"line\">    same type as the number. ndigits may be negative.</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure><p><code>help()</code>함수는 2 가지를 보여줍니다:</p><ol><li><p>해당 함수의 헤더 <code>round(number[, ndigits])</code>. 이 경우 <code>round()</code> 함수가 <code>number</code>로 설정한 인자를 취한다는 것을 알 수 있습니다. 또한 사용자는 선택적으로 <code>ndigits</code>로 설정된 별도의 인자를 제공 할 수 있습니다.</p></li><li><p>해당 함수의 기능에 대한 (영어)설명</p></li></ol>\n        </div></div></div></div>\n\n<div class=\"note danger\">\n            <p><strong><span style=\"color:red\">Common pitfall(흔히하는 실수)</span></strong></p><p>함수(function)를 찾을 때 함수의 이름을 전달해야하며 함수를 호출 한 결과는 전달하지 말아야합니다.</p>\n          </div>\n\n<div class=\"tabs\" id=\"pitfall\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#pitfall-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#pitfall-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"pitfall-1\"><p>What happens if we invoke help on a call to the function abs()?</p>\n<div class=\"note default\">\n          <p><strong>결과를 확인해 보세요-&gt;</strong></p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(round(<span class=\"number\">-2.01</span>))</span><br></pre></td></tr></table></figure>\n        </div></div><div class=\"tab-pane\" id=\"pitfall-2\"><div class=\"note danger\">\n          <p><strong>원하던 결과가 아님</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on int object:</span><br><span class=\"line\"></span><br><span class=\"line\">class int(object)</span><br><span class=\"line\"> |  int(x=0) -&gt; integer</span><br><span class=\"line\"> |  int(x, base=10) -&gt; integer</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  Convert a number or string to an integer, or return 0 if no arguments</span><br><span class=\"line\"> |  are given.  If x is a number, return x.__int__().  For floating point</span><br><span class=\"line\"> |  numbers, this truncates towards zero.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  If x is not a number or if base is given, then x must be a string,</span><br><span class=\"line\"> |  bytes, or bytearray instance representing an integer literal in the</span><br><span class=\"line\"> |  given base.  The literal can be preceded by &apos;+&apos; or &apos;-&apos; and be surrounded</span><br><span class=\"line\"> |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.</span><br><span class=\"line\"> |  Base 0 means to interpret the base from the string as an integer literal.</span><br><span class=\"line\"> |  &gt;&gt;&gt; int(&apos;0b100&apos;, base=0)</span><br><span class=\"line\"> |  4</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  Methods defined here:</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __abs__(self, /)</span><br><span class=\"line\"> |      abs(self)</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __add__(self, value, /)</span><br><span class=\"line\"> |      Return self+value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __and__(self, value, /)</span><br><span class=\"line\"> |      Return self&amp;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __bool__(self, /)</span><br><span class=\"line\"> |      self != 0</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __ceil__(...)</span><br><span class=\"line\"> |      Ceiling of an Integral returns itself.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __divmod__(self, value, /)</span><br><span class=\"line\"> |      Return divmod(self, value).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __eq__(self, value, /)</span><br><span class=\"line\"> |      Return self==value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __float__(self, /)</span><br><span class=\"line\"> |      float(self)</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __floor__(...)</span><br><span class=\"line\"> |      Flooring an Integral returns itself.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __floordiv__(self, value, /)</span><br><span class=\"line\"> |      Return self//value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __format__(...)</span><br><span class=\"line\"> |      default object formatter</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __ge__(self, value, /)</span><br><span class=\"line\"> |      Return self&gt;=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __getattribute__(self, name, /)</span><br><span class=\"line\"> |      Return getattr(self, name).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __getnewargs__(...)</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __gt__(self, value, /)</span><br><span class=\"line\"> |      Return self&gt;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __hash__(self, /)</span><br><span class=\"line\"> |      Return hash(self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __index__(self, /)</span><br><span class=\"line\"> |      Return self converted to an integer, if self is suitable for use as an index into a list.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __int__(self, /)</span><br><span class=\"line\"> |      int(self)</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __invert__(self, /)</span><br><span class=\"line\"> |      ~self</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __le__(self, value, /)</span><br><span class=\"line\"> |      Return self&lt;=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __lshift__(self, value, /)</span><br><span class=\"line\"> |      Return self&lt;&lt;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __lt__(self, value, /)</span><br><span class=\"line\"> |      Return self&lt;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __mod__(self, value, /)</span><br><span class=\"line\"> |      Return self%value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __mul__(self, value, /)</span><br><span class=\"line\"> |      Return self*value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __ne__(self, value, /)</span><br><span class=\"line\"> |      Return self!=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __neg__(self, /)</span><br><span class=\"line\"> |      -self</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __new__(*args, **kwargs) from builtins.type</span><br><span class=\"line\"> |      Create and return a new object.  See help(type) for accurate signature.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __or__(self, value, /)</span><br><span class=\"line\"> |      Return self|value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __pos__(self, /)</span><br><span class=\"line\"> |      +self</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __pow__(self, value, mod=None, /)</span><br><span class=\"line\"> |      Return pow(self, value, mod).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __radd__(self, value, /)</span><br><span class=\"line\"> |      Return value+self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rand__(self, value, /)</span><br><span class=\"line\"> |      Return value&amp;self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rdivmod__(self, value, /)</span><br><span class=\"line\"> |      Return divmod(value, self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __repr__(self, /)</span><br><span class=\"line\"> |      Return repr(self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rfloordiv__(self, value, /)</span><br><span class=\"line\"> |      Return value//self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rlshift__(self, value, /)</span><br><span class=\"line\"> |      Return value&lt;&lt;self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rmod__(self, value, /)</span><br><span class=\"line\"> |      Return value%self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rmul__(self, value, /)</span><br><span class=\"line\"> |      Return value*self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __ror__(self, value, /)</span><br><span class=\"line\"> |      Return value|self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __round__(...)</span><br><span class=\"line\"> |      Rounding an Integral returns itself.</span><br><span class=\"line\"> |      Rounding with an ndigits argument also returns an integer.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rpow__(self, value, mod=None, /)</span><br><span class=\"line\"> |      Return pow(value, self, mod).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rrshift__(self, value, /)</span><br><span class=\"line\"> |      Return value&gt;&gt;self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rshift__(self, value, /)</span><br><span class=\"line\"> |      Return self&gt;&gt;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rsub__(self, value, /)</span><br><span class=\"line\"> |      Return value-self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rtruediv__(self, value, /)</span><br><span class=\"line\"> |      Return value/self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rxor__(self, value, /)</span><br><span class=\"line\"> |      Return value^self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __sizeof__(...)</span><br><span class=\"line\"> |      Returns size in memory, in bytes</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __str__(self, /)</span><br><span class=\"line\"> |      Return str(self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __sub__(self, value, /)</span><br><span class=\"line\"> |      Return self-value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __truediv__(self, value, /)</span><br><span class=\"line\"> |      Return self/value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __trunc__(...)</span><br><span class=\"line\"> |      Truncating an Integral returns itself.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __xor__(self, value, /)</span><br><span class=\"line\"> |      Return self^value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  bit_length(...)</span><br><span class=\"line\"> |      int.bit_length() -&gt; int</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      Number of bits necessary to represent self in binary.</span><br><span class=\"line\"> |      &gt;&gt;&gt; bin(37)</span><br><span class=\"line\"> |      &apos;0b100101&apos;</span><br><span class=\"line\"> |      &gt;&gt;&gt; (37).bit_length()</span><br><span class=\"line\"> |      6</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  conjugate(...)</span><br><span class=\"line\"> |      Returns self, the complex conjugate of any int.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  from_bytes(...) from builtins.type</span><br><span class=\"line\"> |      int.from_bytes(bytes, byteorder, *, signed=False) -&gt; int</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      Return the integer represented by the given array of bytes.</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      The bytes argument must be a bytes-like object (e.g. bytes or bytearray).</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      The byteorder argument determines the byte order used to represent the</span><br><span class=\"line\"> |      integer.  If byteorder is &apos;big&apos;, the most significant byte is at the</span><br><span class=\"line\"> |      beginning of the byte array.  If byteorder is &apos;little&apos;, the most</span><br><span class=\"line\"> |      significant byte is at the end of the byte array.  To request the native</span><br><span class=\"line\"> |      byte order of the host system, use `sys.byteorder&apos; as the byte order value.</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      The signed keyword-only argument indicates whether two&apos;s complement is</span><br><span class=\"line\"> |      used to represent the integer.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  to_bytes(...)</span><br><span class=\"line\"> |      int.to_bytes(length, byteorder, *, signed=False) -&gt; bytes</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      Return an array of bytes representing an integer.</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      The integer is represented using length bytes.  An OverflowError is</span><br><span class=\"line\"> |      raised if the integer is not representable with the given number of</span><br><span class=\"line\"> |      bytes.</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      The byteorder argument determines the byte order used to represent the</span><br><span class=\"line\"> |      integer.  If byteorder is &apos;big&apos;, the most significant byte is at the</span><br><span class=\"line\"> |      beginning of the byte array.  If byteorder is &apos;little&apos;, the most</span><br><span class=\"line\"> |      significant byte is at the end of the byte array.  To request the native</span><br><span class=\"line\"> |      byte order of the host system, use `sys.byteorder&apos; as the byte order value.</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      The signed keyword-only argument determines whether two&apos;s complement is</span><br><span class=\"line\"> |      used to represent the integer.  If signed is False and a negative integer</span><br><span class=\"line\"> |      is given, an OverflowError is raised.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Data descriptors defined here:</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  denominator</span><br><span class=\"line\"> |      the denominator of a rational number in lowest terms</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  imag</span><br><span class=\"line\"> |      the imaginary part of a complex number</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  numerator</span><br><span class=\"line\"> |      the numerator of a rational number in lowest terms</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  real</span><br><span class=\"line\"> |      the real part of a complex number</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n        </div>*</div></div></div>\n\n<p>파이썬 내부에서는 다음과 같이 표현식을 해석합니다. 먼저 <code>round(-2.01)</code> 값을 계산한 다음 해당 표현식의 결과에 대한 도움말(help)을 제공합니다.</p>\n<p>(도움말(OUTPUT)을 보면 <code>integer</code> 에 대해 참 많은 설명이 있습니다. 나중에 파이썬에서 객체, 메소드, 속성에 관해 배우고나면 위의 방대한 도움말 출력이 더 잘 이해가 될 것입니다.)</p>\n<p><code>round</code>는 짧은 docstring을 가진 매우 간단한 함수입니다. <code>help</code>는 <code>print</code> 함수와 같이 보다 복잡하고 다양한 기능을 가진 함수를 다룰 때 더 많은 도움을 줍니다. 다음 출력 결과가 지금은 이해가지 않아도 걱정하지 마세요… 지금은 이 도움말에서 새로운 점이 있는지 확인만 하셔도 됩니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(<span class=\"keyword\">print</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on built-<span class=\"keyword\">in</span> function <span class=\"keyword\">print</span> <span class=\"keyword\">in</span> module builtins:</span><br><span class=\"line\"></span><br><span class=\"line\">print(...)</span><br><span class=\"line\">    print(value, ..., sep=<span class=\"string\">' '</span>, end=<span class=\"string\">'\\n'</span>, file=sys.stdout, flush=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    Prints the values to a stream, <span class=\"keyword\">or</span> to sys.stdout by default.</span><br><span class=\"line\">    Optional keyword arguments:</span><br><span class=\"line\">    file:  a file-like object (stream); defaults to the current sys.stdout.</span><br><span class=\"line\">    sep:   string inserted between values, default a space.</span><br><span class=\"line\">    end:   string appended after the last value, default a newline.</span><br><span class=\"line\">    flush: whether to forcibly flush the stream.</span><br></pre></td></tr></table></figure>\n\n<p>뭔가 발견하셨나요? 예를 들어 print가 <code>sep</code>라는 인자를 취할 수 있다는 것을 알 수 있습니다. 그리고 설명을 통해 인자들 사이에 넣는 문자열이라는 것을 알 수 있습니다.</p>\n<h2 id=\"함수정의-Defining-functions\"><a href=\"#함수정의-Defining-functions\" class=\"headerlink\" title=\"함수정의(Defining functions)\"></a>함수정의(Defining functions)</h2><p>내장 함수(builtin function)는 훌륭하지만, 상황에 따라 나만의 함수가 필요하기도 합니다. 아래의 간단한 예제를 살펴보겠습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">least_difference</span><span class=\"params\">(a, b, c)</span>:</span></span><br><span class=\"line\">  diff1 = abs(a - b)</span><br><span class=\"line\">  diff2 = abs(b - c)</span><br><span class=\"line\">  diff3 = abs(a - c)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min(diff1, diff2, diff3)</span><br></pre></td></tr></table></figure>\n\n<p>이 코드는 <code>a</code>, <code>b</code>와 <code>c</code>라는 세 개의 매개변수를 취하는 <code>least_difference</code>라는 함수를 생성합니다.</p>\n<p>함수는 <code>def</code> 라는 키워드의 헤더로 시작합니다. <code>:</code> 다음에 들여쓰기 된 코드 블록(즉, 2번째 줄부터)은 함수가 호출 될 때 실행됩니다.</p>\n<p><code>return</code>은 함수와 관련된 또다른 고유한 키워드입니다. 파이썬에서 <code>return</code> 문을 만나면 함수를 즉시 종료하고 (return의)오른쪽에있는 값을 전달합니다.</p>\n<p><code>least_difference()</code>가 어떤 기능을 하는지 아시겠나요? 확실하지 않은 경우 몇 가지 예를 통해 언제든지 시도해 볼 수 있습니다.</p>\n<div class=\"tabs\" id=\"df_examples\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#df_examples-1\"><i class=\"fa fa-eye\"></i>EXAMPLE 1</a></li><li class=\"tab\"><a href=\"#df_examples-2\"><i class=\"fa fa-eye\"></i>EXAMPLE 2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"df_examples-1\"><div class=\"note info\">\n          <p><strong>함수에 인자를 넣어서 확인해 볼 수 있습니다</strong></p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(</span><br><span class=\"line\">  least_difference(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>),</span><br><span class=\"line\">  least_difference(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">  least_difference(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>), <span class=\"comment\"># Python allows trailing commas in argument lists. How nice is that?</span></span><br><span class=\"line\">)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n        </div>\n<div class=\"note success\">\n          <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">9 0 1</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n        </div></div><div class=\"tab-pane\" id=\"df_examples-2\"><div class=\"note info\">\n          <p><strong>혹은 <code>help()</code> 함수를 사용해서 설명을 읽어볼 수 있습니다</strong></p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(least_difference)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n        </div>\n<div class=\"note warning\">\n          <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on function least_difference in module __main__:</span><br><span class=\"line\"></span><br><span class=\"line\">least_difference(a, b, c)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>아쉽게도 파이썬은 제가 작성한 코드를 읽고 설명을 작성할 만큼 똑똑하지 못한 것을 볼 수 있습니다.하지만 우리는 함수를 작성하며 이 함수에 대한 설명을 추가할 수 있습니다. 이를 <b>docstring</b> 이라고 합니다\n        </div></div></div></div>\n\n<h3 id=\"Docstring\"><a href=\"#Docstring\" class=\"headerlink\" title=\"Docstring\"></a>Docstring</h3><div class=\"tabs\" id=\"docstring\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#docstring-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#docstring-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"docstring-1\"><div class=\"note primary\">\n          <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">least_difference</span><span class=\"params\">(a, b, c)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"Return the smallest difference between any two numbers</span></span><br><span class=\"line\"><span class=\"string\">  among a, b and c.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &gt;&gt;&gt; least_difference(1, 5, -5)</span></span><br><span class=\"line\"><span class=\"string\">  4</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\">  diff1 = abs(a - b)</span><br><span class=\"line\">  diff2 = abs(b - c)</span><br><span class=\"line\">  diff3 = abs(a - c)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min(diff1, diff2, diff3)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure><p>docstring은 함수 바로 뒤에 삼중 따옴표 <code>&quot;&quot;&quot;</code>로 묶인 문자열(여러 줄로 작성 가능)입니다. 이 함수에 대한 <code>help()</code>를 호출하면 docstring이 표시됩니다.</p>\n        </div></div><div class=\"tab-pane\" id=\"docstring-2\"><div class=\"note default\">\n          <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(least_difference)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on function least_difference in module __main__:</span><br><span class=\"line\"></span><br><span class=\"line\">least_difference(a, b, c)</span><br><span class=\"line\">  Return the smallest difference between any two numbers</span><br><span class=\"line\">  among a, b and c.</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt;&gt;&gt; least_difference(1, 5, -5)</span><br><span class=\"line\">  4</span><br></pre></td></tr></table></figure>\n        </div>\n\n<div class=\"note info\">\n          <p><strong><span style=\"color=blue\">참고</span></strong><br>docstring의 마지막 두 줄은 예제 함수의 호출과 결과입니다.<br>(<code>&gt;&gt;&gt;</code>는 파이썬 대화형 셸(interactive shells)에서 사용되는 명령 프롬프트에 대한 참조입니다.) 파이썬은 예제 호출을 실행하지 않습니다.<br>이는 독자의 이익을 위해서입니다. 함수의 docstring에 보편적으로 하나 이상의 예제 호출을 포함하지 않지만, 설명을 읽는 사람이 함수의 기능을 이해하도록 돕는 데 매우 효과적 일 수 있습니다.<br>실제 예를 보려면 numpy 함수 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL251bXB5L251bXB5L2Jsb2IvdjEuMTQuMi9udW1weS9saWIvdHdvZGltX2Jhc2UucHkjTDE0MC1MMTk0\" title=\"https://github.com/numpy/numpy/blob/v1.14.2/numpy/lib/twodim_base.py#L140-L194\">np.eye에 대한 설명서<i class=\"fa fa-external-link\"></i></span>를 참조하십시오.</p>\n        </div></div></div></div>\n\n<p>훌륭한 프로그래머들은 docstring을 사용합니다. 만약 그 코드를 사용하고 버릴 계획이 아니라면 말이죠(이는 드문 경우입니다).<br>여러분도 docstring을 작성하는 습관을 들이시길 바랍니다.</p>\n<h2 id=\"반환값이-없는-함수들-Functions-that-don’t-return\"><a href=\"#반환값이-없는-함수들-Functions-that-don’t-return\" class=\"headerlink\" title=\"반환값이 없는 함수들(Functions that don’t return)\"></a>반환값이 없는 함수들(Functions that don’t return)</h2><p>만약 우리가 작성한 함수(function)에 <code>return</code> 키워드를 작성하지 않으면 어떻게 될까요?</p>\n<div class=\"tabs\" id=\"return_example\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#return_example-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#return_example-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"return_example-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">least_difference</span><span class=\"params\">(a, b, c)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"Return the smallest difference between any two numbers</span></span><br><span class=\"line\"><span class=\"string\">  among a, b and c.</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\">  diff1 = abs(a - b)</span><br><span class=\"line\">  diff2 = abs(b - c)</span><br><span class=\"line\">  diff3 = abs(a - c)</span><br><span class=\"line\">  min(diff1, diff2, diff3)</span><br><span class=\"line\"></span><br><span class=\"line\">  print(</span><br><span class=\"line\">    least_difference(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>),</span><br><span class=\"line\">    least_difference(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">    least_difference(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>),</span><br><span class=\"line\">  )</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"return_example-2\"><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">None None None</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<p>파이썬은 그러한 함수 정의를 허용합니다. 그 함수들의 호출 한 결과는 <code>None</code>이라는 특별한 값을 가집니다. (이는 다른 언어의 “null”개념과 유사합니다.)</p>\n<p><code>return</code> 문이 없으면 <code>least_difference</code> 는 완전히 무의미해 보이지만 이 함수를 통해 아무 것도 반환하지 않고 유용한 작업을 수행 할 수 있습니다.<br>우리는 이러한 함수를 2개나 봤습니다: <code>print()</code>와 <code>help()</code>함수는 아무 것도 반환하지 않았습니다.<br>우리는 함수들의 부작용(side effect - 화면에 텍스트를 넣는 것)을 위해서만 호출합니다. 유용한 부작용의 다른 예는 파일에 쓰거나 입력을 수정하는 것을 포함합니다.</p>\n<div class=\"tabs\" id=\"mystery\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#mystery-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#mystery-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"mystery-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">mystery = print()</span><br><span class=\"line\">print(mystery)</span><br><span class=\"line\">      </span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"mystery-2\"><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">None</span><br><span class=\"line\">      </span><br></pre></td></tr></table></figure></div></div></div></div></div></div>\n\n<h2 id=\"기본-매개변수-Default-arguments\"><a href=\"#기본-매개변수-Default-arguments\" class=\"headerlink\" title=\"기본 매개변수(Default arguments)\"></a>기본 매개변수(Default arguments)</h2><p><code>help(print)</code> 를 호출하면 <code>print</code> 함수에는 몇 가지의 선택적 매개변수들(optinal arguments)이 있는 것을 볼 수 있습니다.<br>예를 들어, 출력하고자 하는 값들 사이에 우리가 원하는 특별한 <code>sep</code> 값을 지정할 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, sep=<span class=\"string\">' &lt; '</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 &lt; 2 &lt; 3</span><br></pre></td></tr></table></figure>\n\n<p>만약 특정한 값을 명시하지 않으면, <code>sep</code> 에는 기본값인 <code>&#39; &#39;</code>(공백) 이 들어갑니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 2 3</span><br></pre></td></tr></table></figure>\n\n<p>우리가 정의한 함수에 선택적 매개변수를 기본값으로 추가하는 것은 꽤 간단합니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greet</span><span class=\"params\">(who=<span class=\"string\">\"Colin\"</span>)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Hello,\"</span>, who)</span><br><span class=\"line\"></span><br><span class=\"line\">greet()</span><br><span class=\"line\">greet(who=<span class=\"string\">\"Kaggle\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># (In this case, we don't need to specify the name of the argument, because it's unambiguous.)</span></span><br><span class=\"line\">greet(<span class=\"string\">\"world\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Hello, colin</span><br><span class=\"line\">Hello, Kaggle</span><br><span class=\"line\">Hello, world</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"함수들에-적용되는-함수들-Functions-Applied-to-Functions\"><a href=\"#함수들에-적용되는-함수들-Functions-Applied-to-Functions\" class=\"headerlink\" title=\"함수들에 적용되는 함수들(Functions Applied to Functions)\"></a>함수들에 적용되는 함수들(Functions Applied to Functions)</h2><p>처음에는 매우 추상적이라고 느낄 수 있지만 매우 매우 유용한 기술이 있습니다.<br>함수는 다른 함수의 매개변수로 사용될 수 있습니다. 몇 가지 예를 들어 보면 다음과 같습니다.</p>\n<div class=\"tabs\" id=\"functions_example\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#functions_example-1\"><i class=\"fa fa-eye\"></i>EXAMPLE 1</a></li><li class=\"tab\"><a href=\"#functions_example-2\"><i class=\"fa fa-eye\"></i>EXAMPLE 2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"functions_example-1\"><div class=\"tabs\" id=\"squared_call\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#squared_call-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#squared_call-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"squared_call-1\"><div class=\"note primary\">\n          <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mult_by_five</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">5</span> * x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span><span class=\"params\">(fn, arg)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"Call fn on arg\"\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn(arg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">squared_call</span><span class=\"params\">(fn, arg)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"Call fn on the result of calling fn on arg\"\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn(fn(arg))</span><br><span class=\"line\"></span><br><span class=\"line\">print(</span><br><span class=\"line\">  call(mult_by_five, <span class=\"number\">1</span>),</span><br><span class=\"line\">  squared_call(mult_by_five, <span class=\"number\">1</span>),</span><br><span class=\"line\">  sep=<span class=\"string\">'\\n'</span>, <span class=\"comment\"># '\\n' is the newline character - it starts a new line</span></span><br><span class=\"line\">)</span><br><span class=\"line\">      </span><br></pre></td></tr></table></figure>\n        </div></div><div class=\"tab-pane\" id=\"squared_call-2\"><div class=\"note success\">\n          <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">25</span><br></pre></td></tr></table></figure><p>다른 함수에서 작동하는 함수를 “Higher order function”이라고합니다.<br>아마 지금 당장은 잘 사용하지 않으시겠지만 파이썬에 내장된 매우 유용한 고차 함수들(higher order function)이 있습니다.</p>\n        </div></div></div></div></div><div class=\"tab-pane\" id=\"functions_example-2\"><div class=\"tabs\" id=\"max\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#max-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#max-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"max-1\"><div class=\"note primary\">\n          <p><code>max</code> 함수에 대한 흥미로운 예제입니다,</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mod_5</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"Return the remainder of x after dividing by 5\"\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> x % <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(</span><br><span class=\"line\">  <span class=\"string\">'Which number is biggest?'</span>,</span><br><span class=\"line\">  max(<span class=\"number\">100</span>, <span class=\"number\">51</span>, <span class=\"number\">14</span>),</span><br><span class=\"line\">  <span class=\"string\">'Which number is the biggest modulo 5?'</span>,</span><br><span class=\"line\">  max(<span class=\"number\">100</span>, <span class=\"number\">51</span>, <span class=\"number\">14</span>, key=mod_5),</span><br><span class=\"line\">  sep=<span class=\"string\">'\\n'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n        </div></div><div class=\"tab-pane\" id=\"max-2\"><div class=\"note success\">\n          <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Which number is biggest?</span><br><span class=\"line\">100</span><br><span class=\"line\">Which number is the biggest modulo 5?</span><br><span class=\"line\">14</span><br></pre></td></tr></table></figure><p>기본적으로 <code>max</code> 함수는 가장 큰 인수를 반환합니다.<br>그러나 선택적 <code>key</code> 인자를 사용하여 함수를 전달하면 <code>key(x)</code> (일명 ‘argmax’)를 최대화하는 인자 <code>x</code>를 반환합니다.</p>\n        </div></div></div></div></div></div></div>\n\n<p><br><br><br></p>\n<h1 id=\"연습문제-Your-Turn\"><a href=\"#연습문제-Your-Turn\" class=\"headerlink\" title=\"연습문제(Your Turn)\"></a>연습문제(Your Turn)</h1><p>함수(Function)는 파이썬 프로그래밍의 새로운 세상을 열어줍니다. <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE1OA==\" title=\"https://www.kaggle.com/kernels/fork/1275158\">second Python programming exercise<i class=\"fa fa-external-link\"></i></span></strong></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>Kaggle 홈페이지 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbQ==\" title=\"https://www.kaggle.com\">Kaggle<i class=\"fa fa-external-link\"></i></span></li>\n<li>3강 ‘Functions and Getting Help’ - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jb2xpbm1vcnJpcy9mdW5jdGlvbnMtYW5kLWdldHRpbmctaGVscA==\" title=\"https://www.kaggle.com/colinmorris/functions-and-getting-help\">Python Micro-Course Home Page<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<hr>\n<h1 id=\"개요-Intro\"><a href=\"#개요-Intro\" class=\"headerlink\" title=\"개요(Intro)\"></a>개요(Intro)</h1><p>앞서 <code>print</code> 나 <code>abs</code> 와 같은 함수를 사용해 보았습니다. 파이썬에는 이 외에도 수 많은 내장 함수들을 가지고 있고 자신만의 함수를 정의하여 사용할 수도 있습니다.</p>\n<p>이번 강에서는 함수를 정의하고 사용하는 방법에 대해 배워보겠습니다.</p>\n<p><br><br><br></p>\n<h1 id=\"도움말-활용-Getting-Help\"><a href=\"#도움말-활용-Getting-Help\" class=\"headerlink\" title=\"도움말 활용(Getting Help)\"></a>도움말 활용(Getting Help)</h1><p>만약 <code>abs</code> 함수의 기능이 무엇인지 잊어버렸다면 어떻게 하시겠습니까?</p>\n<p><code>help()</code>함수는 아마 파이썬 함수 중에서도 가장 중요한 함수일 것입니다. <code>help()</code>함수의 정확한 사용법을 알게 된다면 대부분의 다른 함수들을 이해하는 열쇠를 쥐고 있는 것과 다름 없습니다.</p>\n<div class=\"tabs\" id=\"first-unique-name\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#first-unique-name-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#first-unique-name-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"first-unique-name-1\"><div class=\"note default\">\n          <p><strong>예제</strong>,</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(round)</span><br></pre></td></tr></table></figure>\n        </div></div><div class=\"tab-pane\" id=\"first-unique-name-2\"><div class=\"note success\">\n          <p><strong>출력</strong>,</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on built-in function round in module builtins:</span><br><span class=\"line\"></span><br><span class=\"line\">round(...)</span><br><span class=\"line\">    round(number[, ndigits]) -&gt; number</span><br><span class=\"line\"></span><br><span class=\"line\">    Round a number to a given precision in decimal digits (default 0 digits).</span><br><span class=\"line\">    This returns an int when called with one argument, otherwise the</span><br><span class=\"line\">    same type as the number. ndigits may be negative.</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure><p><code>help()</code>함수는 2 가지를 보여줍니다:</p><ol><li><p>해당 함수의 헤더 <code>round(number[, ndigits])</code>. 이 경우 <code>round()</code> 함수가 <code>number</code>로 설정한 인자를 취한다는 것을 알 수 있습니다. 또한 사용자는 선택적으로 <code>ndigits</code>로 설정된 별도의 인자를 제공 할 수 있습니다.</p></li><li><p>해당 함수의 기능에 대한 (영어)설명</p></li></ol>\n        </div></div></div></div>\n\n<div class=\"note danger\">\n            <p><strong><span style=\"color:red\">Common pitfall(흔히하는 실수)</span></strong></p><p>함수(function)를 찾을 때 함수의 이름을 전달해야하며 함수를 호출 한 결과는 전달하지 말아야합니다.</p>\n          </div>\n\n<div class=\"tabs\" id=\"pitfall\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#pitfall-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#pitfall-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"pitfall-1\"><p>What happens if we invoke help on a call to the function abs()?</p>\n<div class=\"note default\">\n          <p><strong>결과를 확인해 보세요-&gt;</strong></p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(round(<span class=\"number\">-2.01</span>))</span><br></pre></td></tr></table></figure>\n        </div></div><div class=\"tab-pane\" id=\"pitfall-2\"><div class=\"note danger\">\n          <p><strong>원하던 결과가 아님</strong></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on int object:</span><br><span class=\"line\"></span><br><span class=\"line\">class int(object)</span><br><span class=\"line\"> |  int(x=0) -&gt; integer</span><br><span class=\"line\"> |  int(x, base=10) -&gt; integer</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  Convert a number or string to an integer, or return 0 if no arguments</span><br><span class=\"line\"> |  are given.  If x is a number, return x.__int__().  For floating point</span><br><span class=\"line\"> |  numbers, this truncates towards zero.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  If x is not a number or if base is given, then x must be a string,</span><br><span class=\"line\"> |  bytes, or bytearray instance representing an integer literal in the</span><br><span class=\"line\"> |  given base.  The literal can be preceded by &apos;+&apos; or &apos;-&apos; and be surrounded</span><br><span class=\"line\"> |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.</span><br><span class=\"line\"> |  Base 0 means to interpret the base from the string as an integer literal.</span><br><span class=\"line\"> |  &gt;&gt;&gt; int(&apos;0b100&apos;, base=0)</span><br><span class=\"line\"> |  4</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  Methods defined here:</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __abs__(self, /)</span><br><span class=\"line\"> |      abs(self)</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __add__(self, value, /)</span><br><span class=\"line\"> |      Return self+value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __and__(self, value, /)</span><br><span class=\"line\"> |      Return self&amp;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __bool__(self, /)</span><br><span class=\"line\"> |      self != 0</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __ceil__(...)</span><br><span class=\"line\"> |      Ceiling of an Integral returns itself.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __divmod__(self, value, /)</span><br><span class=\"line\"> |      Return divmod(self, value).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __eq__(self, value, /)</span><br><span class=\"line\"> |      Return self==value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __float__(self, /)</span><br><span class=\"line\"> |      float(self)</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __floor__(...)</span><br><span class=\"line\"> |      Flooring an Integral returns itself.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __floordiv__(self, value, /)</span><br><span class=\"line\"> |      Return self//value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __format__(...)</span><br><span class=\"line\"> |      default object formatter</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __ge__(self, value, /)</span><br><span class=\"line\"> |      Return self&gt;=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __getattribute__(self, name, /)</span><br><span class=\"line\"> |      Return getattr(self, name).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __getnewargs__(...)</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __gt__(self, value, /)</span><br><span class=\"line\"> |      Return self&gt;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __hash__(self, /)</span><br><span class=\"line\"> |      Return hash(self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __index__(self, /)</span><br><span class=\"line\"> |      Return self converted to an integer, if self is suitable for use as an index into a list.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __int__(self, /)</span><br><span class=\"line\"> |      int(self)</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __invert__(self, /)</span><br><span class=\"line\"> |      ~self</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __le__(self, value, /)</span><br><span class=\"line\"> |      Return self&lt;=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __lshift__(self, value, /)</span><br><span class=\"line\"> |      Return self&lt;&lt;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __lt__(self, value, /)</span><br><span class=\"line\"> |      Return self&lt;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __mod__(self, value, /)</span><br><span class=\"line\"> |      Return self%value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __mul__(self, value, /)</span><br><span class=\"line\"> |      Return self*value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __ne__(self, value, /)</span><br><span class=\"line\"> |      Return self!=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __neg__(self, /)</span><br><span class=\"line\"> |      -self</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __new__(*args, **kwargs) from builtins.type</span><br><span class=\"line\"> |      Create and return a new object.  See help(type) for accurate signature.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __or__(self, value, /)</span><br><span class=\"line\"> |      Return self|value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __pos__(self, /)</span><br><span class=\"line\"> |      +self</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __pow__(self, value, mod=None, /)</span><br><span class=\"line\"> |      Return pow(self, value, mod).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __radd__(self, value, /)</span><br><span class=\"line\"> |      Return value+self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rand__(self, value, /)</span><br><span class=\"line\"> |      Return value&amp;self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rdivmod__(self, value, /)</span><br><span class=\"line\"> |      Return divmod(value, self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __repr__(self, /)</span><br><span class=\"line\"> |      Return repr(self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rfloordiv__(self, value, /)</span><br><span class=\"line\"> |      Return value//self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rlshift__(self, value, /)</span><br><span class=\"line\"> |      Return value&lt;&lt;self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rmod__(self, value, /)</span><br><span class=\"line\"> |      Return value%self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rmul__(self, value, /)</span><br><span class=\"line\"> |      Return value*self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __ror__(self, value, /)</span><br><span class=\"line\"> |      Return value|self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __round__(...)</span><br><span class=\"line\"> |      Rounding an Integral returns itself.</span><br><span class=\"line\"> |      Rounding with an ndigits argument also returns an integer.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rpow__(self, value, mod=None, /)</span><br><span class=\"line\"> |      Return pow(value, self, mod).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rrshift__(self, value, /)</span><br><span class=\"line\"> |      Return value&gt;&gt;self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rshift__(self, value, /)</span><br><span class=\"line\"> |      Return self&gt;&gt;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rsub__(self, value, /)</span><br><span class=\"line\"> |      Return value-self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rtruediv__(self, value, /)</span><br><span class=\"line\"> |      Return value/self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rxor__(self, value, /)</span><br><span class=\"line\"> |      Return value^self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __sizeof__(...)</span><br><span class=\"line\"> |      Returns size in memory, in bytes</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __str__(self, /)</span><br><span class=\"line\"> |      Return str(self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __sub__(self, value, /)</span><br><span class=\"line\"> |      Return self-value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __truediv__(self, value, /)</span><br><span class=\"line\"> |      Return self/value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __trunc__(...)</span><br><span class=\"line\"> |      Truncating an Integral returns itself.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __xor__(self, value, /)</span><br><span class=\"line\"> |      Return self^value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  bit_length(...)</span><br><span class=\"line\"> |      int.bit_length() -&gt; int</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      Number of bits necessary to represent self in binary.</span><br><span class=\"line\"> |      &gt;&gt;&gt; bin(37)</span><br><span class=\"line\"> |      &apos;0b100101&apos;</span><br><span class=\"line\"> |      &gt;&gt;&gt; (37).bit_length()</span><br><span class=\"line\"> |      6</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  conjugate(...)</span><br><span class=\"line\"> |      Returns self, the complex conjugate of any int.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  from_bytes(...) from builtins.type</span><br><span class=\"line\"> |      int.from_bytes(bytes, byteorder, *, signed=False) -&gt; int</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      Return the integer represented by the given array of bytes.</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      The bytes argument must be a bytes-like object (e.g. bytes or bytearray).</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      The byteorder argument determines the byte order used to represent the</span><br><span class=\"line\"> |      integer.  If byteorder is &apos;big&apos;, the most significant byte is at the</span><br><span class=\"line\"> |      beginning of the byte array.  If byteorder is &apos;little&apos;, the most</span><br><span class=\"line\"> |      significant byte is at the end of the byte array.  To request the native</span><br><span class=\"line\"> |      byte order of the host system, use `sys.byteorder&apos; as the byte order value.</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      The signed keyword-only argument indicates whether two&apos;s complement is</span><br><span class=\"line\"> |      used to represent the integer.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  to_bytes(...)</span><br><span class=\"line\"> |      int.to_bytes(length, byteorder, *, signed=False) -&gt; bytes</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      Return an array of bytes representing an integer.</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      The integer is represented using length bytes.  An OverflowError is</span><br><span class=\"line\"> |      raised if the integer is not representable with the given number of</span><br><span class=\"line\"> |      bytes.</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      The byteorder argument determines the byte order used to represent the</span><br><span class=\"line\"> |      integer.  If byteorder is &apos;big&apos;, the most significant byte is at the</span><br><span class=\"line\"> |      beginning of the byte array.  If byteorder is &apos;little&apos;, the most</span><br><span class=\"line\"> |      significant byte is at the end of the byte array.  To request the native</span><br><span class=\"line\"> |      byte order of the host system, use `sys.byteorder&apos; as the byte order value.</span><br><span class=\"line\"> |      </span><br><span class=\"line\"> |      The signed keyword-only argument determines whether two&apos;s complement is</span><br><span class=\"line\"> |      used to represent the integer.  If signed is False and a negative integer</span><br><span class=\"line\"> |      is given, an OverflowError is raised.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Data descriptors defined here:</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  denominator</span><br><span class=\"line\"> |      the denominator of a rational number in lowest terms</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  imag</span><br><span class=\"line\"> |      the imaginary part of a complex number</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  numerator</span><br><span class=\"line\"> |      the numerator of a rational number in lowest terms</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  real</span><br><span class=\"line\"> |      the real part of a complex number</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n        </div>*</div></div></div>\n\n<p>파이썬 내부에서는 다음과 같이 표현식을 해석합니다. 먼저 <code>round(-2.01)</code> 값을 계산한 다음 해당 표현식의 결과에 대한 도움말(help)을 제공합니다.</p>\n<p>(도움말(OUTPUT)을 보면 <code>integer</code> 에 대해 참 많은 설명이 있습니다. 나중에 파이썬에서 객체, 메소드, 속성에 관해 배우고나면 위의 방대한 도움말 출력이 더 잘 이해가 될 것입니다.)</p>\n<p><code>round</code>는 짧은 docstring을 가진 매우 간단한 함수입니다. <code>help</code>는 <code>print</code> 함수와 같이 보다 복잡하고 다양한 기능을 가진 함수를 다룰 때 더 많은 도움을 줍니다. 다음 출력 결과가 지금은 이해가지 않아도 걱정하지 마세요… 지금은 이 도움말에서 새로운 점이 있는지 확인만 하셔도 됩니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(<span class=\"keyword\">print</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on built-<span class=\"keyword\">in</span> function <span class=\"keyword\">print</span> <span class=\"keyword\">in</span> module builtins:</span><br><span class=\"line\"></span><br><span class=\"line\">print(...)</span><br><span class=\"line\">    print(value, ..., sep=<span class=\"string\">' '</span>, end=<span class=\"string\">'\\n'</span>, file=sys.stdout, flush=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    Prints the values to a stream, <span class=\"keyword\">or</span> to sys.stdout by default.</span><br><span class=\"line\">    Optional keyword arguments:</span><br><span class=\"line\">    file:  a file-like object (stream); defaults to the current sys.stdout.</span><br><span class=\"line\">    sep:   string inserted between values, default a space.</span><br><span class=\"line\">    end:   string appended after the last value, default a newline.</span><br><span class=\"line\">    flush: whether to forcibly flush the stream.</span><br></pre></td></tr></table></figure>\n\n<p>뭔가 발견하셨나요? 예를 들어 print가 <code>sep</code>라는 인자를 취할 수 있다는 것을 알 수 있습니다. 그리고 설명을 통해 인자들 사이에 넣는 문자열이라는 것을 알 수 있습니다.</p>\n<h2 id=\"함수정의-Defining-functions\"><a href=\"#함수정의-Defining-functions\" class=\"headerlink\" title=\"함수정의(Defining functions)\"></a>함수정의(Defining functions)</h2><p>내장 함수(builtin function)는 훌륭하지만, 상황에 따라 나만의 함수가 필요하기도 합니다. 아래의 간단한 예제를 살펴보겠습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">least_difference</span><span class=\"params\">(a, b, c)</span>:</span></span><br><span class=\"line\">  diff1 = abs(a - b)</span><br><span class=\"line\">  diff2 = abs(b - c)</span><br><span class=\"line\">  diff3 = abs(a - c)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min(diff1, diff2, diff3)</span><br></pre></td></tr></table></figure>\n\n<p>이 코드는 <code>a</code>, <code>b</code>와 <code>c</code>라는 세 개의 매개변수를 취하는 <code>least_difference</code>라는 함수를 생성합니다.</p>\n<p>함수는 <code>def</code> 라는 키워드의 헤더로 시작합니다. <code>:</code> 다음에 들여쓰기 된 코드 블록(즉, 2번째 줄부터)은 함수가 호출 될 때 실행됩니다.</p>\n<p><code>return</code>은 함수와 관련된 또다른 고유한 키워드입니다. 파이썬에서 <code>return</code> 문을 만나면 함수를 즉시 종료하고 (return의)오른쪽에있는 값을 전달합니다.</p>\n<p><code>least_difference()</code>가 어떤 기능을 하는지 아시겠나요? 확실하지 않은 경우 몇 가지 예를 통해 언제든지 시도해 볼 수 있습니다.</p>\n<div class=\"tabs\" id=\"df_examples\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#df_examples-1\"><i class=\"fa fa-eye\"></i>EXAMPLE 1</a></li><li class=\"tab\"><a href=\"#df_examples-2\"><i class=\"fa fa-eye\"></i>EXAMPLE 2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"df_examples-1\"><div class=\"note info\">\n          <p><strong>함수에 인자를 넣어서 확인해 볼 수 있습니다</strong></p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(</span><br><span class=\"line\">  least_difference(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>),</span><br><span class=\"line\">  least_difference(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">  least_difference(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>), <span class=\"comment\"># Python allows trailing commas in argument lists. How nice is that?</span></span><br><span class=\"line\">)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n        </div>\n<div class=\"note success\">\n          <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">9 0 1</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n        </div></div><div class=\"tab-pane\" id=\"df_examples-2\"><div class=\"note info\">\n          <p><strong>혹은 <code>help()</code> 함수를 사용해서 설명을 읽어볼 수 있습니다</strong></p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(least_difference)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n        </div>\n<div class=\"note warning\">\n          <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on function least_difference in module __main__:</span><br><span class=\"line\"></span><br><span class=\"line\">least_difference(a, b, c)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>아쉽게도 파이썬은 제가 작성한 코드를 읽고 설명을 작성할 만큼 똑똑하지 못한 것을 볼 수 있습니다.하지만 우리는 함수를 작성하며 이 함수에 대한 설명을 추가할 수 있습니다. 이를 <b>docstring</b> 이라고 합니다\n        </div></div></div></div>\n\n<h3 id=\"Docstring\"><a href=\"#Docstring\" class=\"headerlink\" title=\"Docstring\"></a>Docstring</h3><div class=\"tabs\" id=\"docstring\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#docstring-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#docstring-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"docstring-1\"><div class=\"note primary\">\n          <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">least_difference</span><span class=\"params\">(a, b, c)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"Return the smallest difference between any two numbers</span></span><br><span class=\"line\"><span class=\"string\">  among a, b and c.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &gt;&gt;&gt; least_difference(1, 5, -5)</span></span><br><span class=\"line\"><span class=\"string\">  4</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\">  diff1 = abs(a - b)</span><br><span class=\"line\">  diff2 = abs(b - c)</span><br><span class=\"line\">  diff3 = abs(a - c)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min(diff1, diff2, diff3)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure><p>docstring은 함수 바로 뒤에 삼중 따옴표 <code>&quot;&quot;&quot;</code>로 묶인 문자열(여러 줄로 작성 가능)입니다. 이 함수에 대한 <code>help()</code>를 호출하면 docstring이 표시됩니다.</p>\n        </div></div><div class=\"tab-pane\" id=\"docstring-2\"><div class=\"note default\">\n          <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(least_difference)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on function least_difference in module __main__:</span><br><span class=\"line\"></span><br><span class=\"line\">least_difference(a, b, c)</span><br><span class=\"line\">  Return the smallest difference between any two numbers</span><br><span class=\"line\">  among a, b and c.</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt;&gt;&gt; least_difference(1, 5, -5)</span><br><span class=\"line\">  4</span><br></pre></td></tr></table></figure>\n        </div>\n\n<div class=\"note info\">\n          <p><strong><span style=\"color=blue\">참고</span></strong><br>docstring의 마지막 두 줄은 예제 함수의 호출과 결과입니다.<br>(<code>&gt;&gt;&gt;</code>는 파이썬 대화형 셸(interactive shells)에서 사용되는 명령 프롬프트에 대한 참조입니다.) 파이썬은 예제 호출을 실행하지 않습니다.<br>이는 독자의 이익을 위해서입니다. 함수의 docstring에 보편적으로 하나 이상의 예제 호출을 포함하지 않지만, 설명을 읽는 사람이 함수의 기능을 이해하도록 돕는 데 매우 효과적 일 수 있습니다.<br>실제 예를 보려면 numpy 함수 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL251bXB5L251bXB5L2Jsb2IvdjEuMTQuMi9udW1weS9saWIvdHdvZGltX2Jhc2UucHkjTDE0MC1MMTk0\" title=\"https://github.com/numpy/numpy/blob/v1.14.2/numpy/lib/twodim_base.py#L140-L194\">np.eye에 대한 설명서<i class=\"fa fa-external-link\"></i></span>를 참조하십시오.</p>\n        </div></div></div></div>\n\n<p>훌륭한 프로그래머들은 docstring을 사용합니다. 만약 그 코드를 사용하고 버릴 계획이 아니라면 말이죠(이는 드문 경우입니다).<br>여러분도 docstring을 작성하는 습관을 들이시길 바랍니다.</p>\n<h2 id=\"반환값이-없는-함수들-Functions-that-don’t-return\"><a href=\"#반환값이-없는-함수들-Functions-that-don’t-return\" class=\"headerlink\" title=\"반환값이 없는 함수들(Functions that don’t return)\"></a>반환값이 없는 함수들(Functions that don’t return)</h2><p>만약 우리가 작성한 함수(function)에 <code>return</code> 키워드를 작성하지 않으면 어떻게 될까요?</p>\n<div class=\"tabs\" id=\"return_example\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#return_example-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#return_example-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"return_example-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">least_difference</span><span class=\"params\">(a, b, c)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"Return the smallest difference between any two numbers</span></span><br><span class=\"line\"><span class=\"string\">  among a, b and c.</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\">  diff1 = abs(a - b)</span><br><span class=\"line\">  diff2 = abs(b - c)</span><br><span class=\"line\">  diff3 = abs(a - c)</span><br><span class=\"line\">  min(diff1, diff2, diff3)</span><br><span class=\"line\"></span><br><span class=\"line\">  print(</span><br><span class=\"line\">    least_difference(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>),</span><br><span class=\"line\">    least_difference(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">    least_difference(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>),</span><br><span class=\"line\">  )</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"return_example-2\"><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">None None None</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<p>파이썬은 그러한 함수 정의를 허용합니다. 그 함수들의 호출 한 결과는 <code>None</code>이라는 특별한 값을 가집니다. (이는 다른 언어의 “null”개념과 유사합니다.)</p>\n<p><code>return</code> 문이 없으면 <code>least_difference</code> 는 완전히 무의미해 보이지만 이 함수를 통해 아무 것도 반환하지 않고 유용한 작업을 수행 할 수 있습니다.<br>우리는 이러한 함수를 2개나 봤습니다: <code>print()</code>와 <code>help()</code>함수는 아무 것도 반환하지 않았습니다.<br>우리는 함수들의 부작용(side effect - 화면에 텍스트를 넣는 것)을 위해서만 호출합니다. 유용한 부작용의 다른 예는 파일에 쓰거나 입력을 수정하는 것을 포함합니다.</p>\n<div class=\"tabs\" id=\"mystery\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#mystery-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#mystery-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"mystery-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">mystery = print()</span><br><span class=\"line\">print(mystery)</span><br><span class=\"line\">      </span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"mystery-2\"><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">None</span><br><span class=\"line\">      </span><br></pre></td></tr></table></figure></div></div></div></div></div></div>\n\n<h2 id=\"기본-매개변수-Default-arguments\"><a href=\"#기본-매개변수-Default-arguments\" class=\"headerlink\" title=\"기본 매개변수(Default arguments)\"></a>기본 매개변수(Default arguments)</h2><p><code>help(print)</code> 를 호출하면 <code>print</code> 함수에는 몇 가지의 선택적 매개변수들(optinal arguments)이 있는 것을 볼 수 있습니다.<br>예를 들어, 출력하고자 하는 값들 사이에 우리가 원하는 특별한 <code>sep</code> 값을 지정할 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, sep=<span class=\"string\">' &lt; '</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 &lt; 2 &lt; 3</span><br></pre></td></tr></table></figure>\n\n<p>만약 특정한 값을 명시하지 않으면, <code>sep</code> 에는 기본값인 <code>&#39; &#39;</code>(공백) 이 들어갑니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 2 3</span><br></pre></td></tr></table></figure>\n\n<p>우리가 정의한 함수에 선택적 매개변수를 기본값으로 추가하는 것은 꽤 간단합니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greet</span><span class=\"params\">(who=<span class=\"string\">\"Colin\"</span>)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Hello,\"</span>, who)</span><br><span class=\"line\"></span><br><span class=\"line\">greet()</span><br><span class=\"line\">greet(who=<span class=\"string\">\"Kaggle\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># (In this case, we don't need to specify the name of the argument, because it's unambiguous.)</span></span><br><span class=\"line\">greet(<span class=\"string\">\"world\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Hello, colin</span><br><span class=\"line\">Hello, Kaggle</span><br><span class=\"line\">Hello, world</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"함수들에-적용되는-함수들-Functions-Applied-to-Functions\"><a href=\"#함수들에-적용되는-함수들-Functions-Applied-to-Functions\" class=\"headerlink\" title=\"함수들에 적용되는 함수들(Functions Applied to Functions)\"></a>함수들에 적용되는 함수들(Functions Applied to Functions)</h2><p>처음에는 매우 추상적이라고 느낄 수 있지만 매우 매우 유용한 기술이 있습니다.<br>함수는 다른 함수의 매개변수로 사용될 수 있습니다. 몇 가지 예를 들어 보면 다음과 같습니다.</p>\n<div class=\"tabs\" id=\"functions_example\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#functions_example-1\"><i class=\"fa fa-eye\"></i>EXAMPLE 1</a></li><li class=\"tab\"><a href=\"#functions_example-2\"><i class=\"fa fa-eye\"></i>EXAMPLE 2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"functions_example-1\"><div class=\"tabs\" id=\"squared_call\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#squared_call-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#squared_call-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"squared_call-1\"><div class=\"note primary\">\n          <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mult_by_five</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">5</span> * x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span><span class=\"params\">(fn, arg)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"Call fn on arg\"\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn(arg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">squared_call</span><span class=\"params\">(fn, arg)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"Call fn on the result of calling fn on arg\"\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn(fn(arg))</span><br><span class=\"line\"></span><br><span class=\"line\">print(</span><br><span class=\"line\">  call(mult_by_five, <span class=\"number\">1</span>),</span><br><span class=\"line\">  squared_call(mult_by_five, <span class=\"number\">1</span>),</span><br><span class=\"line\">  sep=<span class=\"string\">'\\n'</span>, <span class=\"comment\"># '\\n' is the newline character - it starts a new line</span></span><br><span class=\"line\">)</span><br><span class=\"line\">      </span><br></pre></td></tr></table></figure>\n        </div></div><div class=\"tab-pane\" id=\"squared_call-2\"><div class=\"note success\">\n          <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">25</span><br></pre></td></tr></table></figure><p>다른 함수에서 작동하는 함수를 “Higher order function”이라고합니다.<br>아마 지금 당장은 잘 사용하지 않으시겠지만 파이썬에 내장된 매우 유용한 고차 함수들(higher order function)이 있습니다.</p>\n        </div></div></div></div></div><div class=\"tab-pane\" id=\"functions_example-2\"><div class=\"tabs\" id=\"max\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#max-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#max-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"max-1\"><div class=\"note primary\">\n          <p><code>max</code> 함수에 대한 흥미로운 예제입니다,</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mod_5</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"Return the remainder of x after dividing by 5\"\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> x % <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(</span><br><span class=\"line\">  <span class=\"string\">'Which number is biggest?'</span>,</span><br><span class=\"line\">  max(<span class=\"number\">100</span>, <span class=\"number\">51</span>, <span class=\"number\">14</span>),</span><br><span class=\"line\">  <span class=\"string\">'Which number is the biggest modulo 5?'</span>,</span><br><span class=\"line\">  max(<span class=\"number\">100</span>, <span class=\"number\">51</span>, <span class=\"number\">14</span>, key=mod_5),</span><br><span class=\"line\">  sep=<span class=\"string\">'\\n'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n        </div></div><div class=\"tab-pane\" id=\"max-2\"><div class=\"note success\">\n          <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Which number is biggest?</span><br><span class=\"line\">100</span><br><span class=\"line\">Which number is the biggest modulo 5?</span><br><span class=\"line\">14</span><br></pre></td></tr></table></figure><p>기본적으로 <code>max</code> 함수는 가장 큰 인수를 반환합니다.<br>그러나 선택적 <code>key</code> 인자를 사용하여 함수를 전달하면 <code>key(x)</code> (일명 ‘argmax’)를 최대화하는 인자 <code>x</code>를 반환합니다.</p>\n        </div></div></div></div></div></div></div>\n\n<p><br><br><br></p>\n<h1 id=\"연습문제-Your-Turn\"><a href=\"#연습문제-Your-Turn\" class=\"headerlink\" title=\"연습문제(Your Turn)\"></a>연습문제(Your Turn)</h1><p>함수(Function)는 파이썬 프로그래밍의 새로운 세상을 열어줍니다. <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE1OA==\" title=\"https://www.kaggle.com/kernels/fork/1275158\">second Python programming exercise<i class=\"fa fa-external-link\"></i></span></strong></p>\n"},{"title":"(Hexo_NexT_Theme) Hexo 블로그에 Google Adsense 설정_1","date":"2019-07-17T05:09:11.000Z","subtitle":"Hexo-next-theme 설정","_content":"\n{% note info %}\nHexo-NexT-Theme 에 구글 애드센스를 추가하는 방법에 대해 알아보겠습니다!\n{% endnote %}\n\n{% fi /img/adsense/adsense_home.png %}\n\n홈페이지에 접속하여 구글 계정으로 로그인하고 구글 애드센스에 가입하는 방법은 인터넷에 검색하면 금방 찾으실 수 있습니다.\n\n간략하게 설명드리자면 구글 검색엔진에 등록하는 것과 비슷한 방식으로 <u>광고를 등록하고자 하는 웹사이트 URL를 입력</u>하고 <u>이메일 주소를 입력</u>하면 됩니다.\n\n중요한 것은 **애드센스 활성화** 를 하기 위해서는 HTML 문서를 수정해야 하는데 하나하나 모든 포스트의 HTML 문서를 수정하는 것은 시간 낭비 같습니다.\n(만약 `hexo clean`으로 초기화 하고 다시 `hexo generate` 하게되면 헛고생 한게 되니...)\n`hexo generate`를 통해 markdown 문서와 여러 javascript 파일들을 통해 포스트를 생성하기 때문에 **javascript** 를 손보면 해결될 것 같은 느낌이듭니다.\n\n## `google_adsense.ejs` 파일 생성\n\n```\n/themes/hexo-theme-next/layout/_custom/google_adsense.ejs\n```\n\n{% fi /img/adsense/theme_layout.png %}\n\n테마가 설치된 경로의 `layout`폴더에 `_custom` 폴더가 없다면 생성하시고 있으시면 그 안에 `google_adsense.ejs` 파일을 새로 생성합니다.\n\n## Adsense 코드 복사\n\n생성된  `google_adsense.ejs` 파일에 사이트 검토를 위한 소스 코드를 복사 붙여 넣기합니다. (아래는 예시로 google_ad_client의 키 값이 없습니다)\n\n{% code lang:javascript %}\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<script>\n  (adsbygoogle = window.adsbygoogle || []).push({\n    google_ad_client: \"your key\",\n    enable_page_level_ads: true\n  });\n</script>\n{% endcode %}\n\n## `_layout.swig` 파일의 <head> 수정\n\n`_layout.swig` 파일이 블로그 포스트의 전체적인 레이아웃을 담당하고 있는 것을 알 수 있습니다.\n여기 <head></head> 태그 안에 저희가 생성한 javascript 파일을 넣으면 됩니다.\n\n```html\n  <!-- Google AdSense start -->\n  {% include '_custom/google_adsense.ejs' %}\n  <!-- Google AdSense end -->\n```\n\n## `hexo generate` 후 확인하기\n\n`hexo g -d` 한 후 블로그의 소스코드 보기를 통해 저희가 작성한 코드가 잘 적용되어 있는지 확인할 수 있습니다.\n구글 애드센스 사이트 검증을 요청하면 아래와 같은 화면을 보실 수 있습니다.\n\n{% fi /img/adsense/adsense_wait.png %}\n","source":"_posts/20190717-hexo-adsense-1.md","raw":"---\ntitle: (Hexo_NexT_Theme) Hexo 블로그에 Google Adsense 설정_1\ndate: 2019-07-17 14:09:11\ncategories:\n  - BLOG\n  - HEXO-NEXT-THEME\ntags: [헥소, 블로그, 테마, adsense, hexo, blog, next-theme, github page]\nsubtitle: Hexo-next-theme 설정\n---\n\n{% note info %}\nHexo-NexT-Theme 에 구글 애드센스를 추가하는 방법에 대해 알아보겠습니다!\n{% endnote %}\n\n{% fi /img/adsense/adsense_home.png %}\n\n홈페이지에 접속하여 구글 계정으로 로그인하고 구글 애드센스에 가입하는 방법은 인터넷에 검색하면 금방 찾으실 수 있습니다.\n\n간략하게 설명드리자면 구글 검색엔진에 등록하는 것과 비슷한 방식으로 <u>광고를 등록하고자 하는 웹사이트 URL를 입력</u>하고 <u>이메일 주소를 입력</u>하면 됩니다.\n\n중요한 것은 **애드센스 활성화** 를 하기 위해서는 HTML 문서를 수정해야 하는데 하나하나 모든 포스트의 HTML 문서를 수정하는 것은 시간 낭비 같습니다.\n(만약 `hexo clean`으로 초기화 하고 다시 `hexo generate` 하게되면 헛고생 한게 되니...)\n`hexo generate`를 통해 markdown 문서와 여러 javascript 파일들을 통해 포스트를 생성하기 때문에 **javascript** 를 손보면 해결될 것 같은 느낌이듭니다.\n\n## `google_adsense.ejs` 파일 생성\n\n```\n/themes/hexo-theme-next/layout/_custom/google_adsense.ejs\n```\n\n{% fi /img/adsense/theme_layout.png %}\n\n테마가 설치된 경로의 `layout`폴더에 `_custom` 폴더가 없다면 생성하시고 있으시면 그 안에 `google_adsense.ejs` 파일을 새로 생성합니다.\n\n## Adsense 코드 복사\n\n생성된  `google_adsense.ejs` 파일에 사이트 검토를 위한 소스 코드를 복사 붙여 넣기합니다. (아래는 예시로 google_ad_client의 키 값이 없습니다)\n\n{% code lang:javascript %}\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<script>\n  (adsbygoogle = window.adsbygoogle || []).push({\n    google_ad_client: \"your key\",\n    enable_page_level_ads: true\n  });\n</script>\n{% endcode %}\n\n## `_layout.swig` 파일의 <head> 수정\n\n`_layout.swig` 파일이 블로그 포스트의 전체적인 레이아웃을 담당하고 있는 것을 알 수 있습니다.\n여기 <head></head> 태그 안에 저희가 생성한 javascript 파일을 넣으면 됩니다.\n\n```html\n  <!-- Google AdSense start -->\n  {% include '_custom/google_adsense.ejs' %}\n  <!-- Google AdSense end -->\n```\n\n## `hexo generate` 후 확인하기\n\n`hexo g -d` 한 후 블로그의 소스코드 보기를 통해 저희가 작성한 코드가 잘 적용되어 있는지 확인할 수 있습니다.\n구글 애드센스 사이트 검증을 요청하면 아래와 같은 화면을 보실 수 있습니다.\n\n{% fi /img/adsense/adsense_wait.png %}\n","slug":"hexo-adsense-1","published":1,"updated":"2019-07-27T09:32:53.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt86e002926469ekr5xy9","content":"<div class=\"note info\">\n            <p>Hexo-NexT-Theme 에 구글 애드센스를 추가하는 방법에 대해 알아보겠습니다!</p>\n          </div>\n\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_home.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<p>홈페이지에 접속하여 구글 계정으로 로그인하고 구글 애드센스에 가입하는 방법은 인터넷에 검색하면 금방 찾으실 수 있습니다.</p>\n<p>간략하게 설명드리자면 구글 검색엔진에 등록하는 것과 비슷한 방식으로 <u>광고를 등록하고자 하는 웹사이트 URL를 입력</u>하고 <u>이메일 주소를 입력</u>하면 됩니다.</p>\n<p>중요한 것은 <strong>애드센스 활성화</strong> 를 하기 위해서는 HTML 문서를 수정해야 하는데 하나하나 모든 포스트의 HTML 문서를 수정하는 것은 시간 낭비 같습니다.<br>(만약 <code>hexo clean</code>으로 초기화 하고 다시 <code>hexo generate</code> 하게되면 헛고생 한게 되니…)<br><code>hexo generate</code>를 통해 markdown 문서와 여러 javascript 파일들을 통해 포스트를 생성하기 때문에 <strong>javascript</strong> 를 손보면 해결될 것 같은 느낌이듭니다.</p>\n<h2 id=\"google-adsense-ejs-파일-생성\"><a href=\"#google-adsense-ejs-파일-생성\" class=\"headerlink\" title=\"google_adsense.ejs 파일 생성\"></a><code>google_adsense.ejs</code> 파일 생성</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/themes/hexo-theme-next/layout/_custom/google_adsense.ejs</span><br></pre></td></tr></table></figure>\n\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/theme_layout.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<p>테마가 설치된 경로의 <code>layout</code>폴더에 <code>_custom</code> 폴더가 없다면 생성하시고 있으시면 그 안에 <code>google_adsense.ejs</code> 파일을 새로 생성합니다.</p>\n<h2 id=\"Adsense-코드-복사\"><a href=\"#Adsense-코드-복사\" class=\"headerlink\" title=\"Adsense 코드 복사\"></a>Adsense 코드 복사</h2><p>생성된  <code>google_adsense.ejs</code> 파일에 사이트 검토를 위한 소스 코드를 복사 붙여 넣기합니다. (아래는 예시로 google_ad_client의 키 값이 없습니다)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  (adsbygoogle = <span class=\"built_in\">window</span>.adsbygoogle || []).push(&#123;</span><br><span class=\"line\">    google_ad_client: <span class=\"string\">\"your key\"</span>,</span><br><span class=\"line\">    enable_page_level_ads: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"layout-swig-파일의-수정\"><a href=\"#layout-swig-파일의-수정\" class=\"headerlink\" title=\"_layout.swig 파일의  수정\"></a><code>_layout.swig</code> 파일의 <head><meta name=\"generator\" content=\"Hexo 3.9.0\"> 수정</head></h2><p><code>_layout.swig</code> 파일이 블로그 포스트의 전체적인 레이아웃을 담당하고 있는 것을 알 수 있습니다.<br>여기 <head><meta name=\"generator\" content=\"Hexo 3.9.0\"></head> 태그 안에 저희가 생성한 javascript 파일을 넣으면 됩니다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Google AdSense start --&gt;</span></span><br><span class=\"line\">&#123;% include '_custom/google_adsense.ejs' %&#125;</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Google AdSense end --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-generate-후-확인하기\"><a href=\"#hexo-generate-후-확인하기\" class=\"headerlink\" title=\"hexo generate 후 확인하기\"></a><code>hexo generate</code> 후 확인하기</h2><p><code>hexo g -d</code> 한 후 블로그의 소스코드 보기를 통해 저희가 작성한 코드가 잘 적용되어 있는지 확인할 수 있습니다.<br>구글 애드센스 사이트 검증을 요청하면 아래와 같은 화면을 보실 수 있습니다.</p>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_wait.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<div class=\"note info\">\n            <p>Hexo-NexT-Theme 에 구글 애드센스를 추가하는 방법에 대해 알아보겠습니다!</p>\n          </div>\n\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_home.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<p>홈페이지에 접속하여 구글 계정으로 로그인하고 구글 애드센스에 가입하는 방법은 인터넷에 검색하면 금방 찾으실 수 있습니다.</p>\n<p>간략하게 설명드리자면 구글 검색엔진에 등록하는 것과 비슷한 방식으로 <u>광고를 등록하고자 하는 웹사이트 URL를 입력</u>하고 <u>이메일 주소를 입력</u>하면 됩니다.</p>\n<p>중요한 것은 <strong>애드센스 활성화</strong> 를 하기 위해서는 HTML 문서를 수정해야 하는데 하나하나 모든 포스트의 HTML 문서를 수정하는 것은 시간 낭비 같습니다.<br>(만약 <code>hexo clean</code>으로 초기화 하고 다시 <code>hexo generate</code> 하게되면 헛고생 한게 되니…)<br><code>hexo generate</code>를 통해 markdown 문서와 여러 javascript 파일들을 통해 포스트를 생성하기 때문에 <strong>javascript</strong> 를 손보면 해결될 것 같은 느낌이듭니다.</p>\n<h2 id=\"google-adsense-ejs-파일-생성\"><a href=\"#google-adsense-ejs-파일-생성\" class=\"headerlink\" title=\"google_adsense.ejs 파일 생성\"></a><code>google_adsense.ejs</code> 파일 생성</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/themes/hexo-theme-next/layout/_custom/google_adsense.ejs</span><br></pre></td></tr></table></figure>\n\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/theme_layout.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<p>테마가 설치된 경로의 <code>layout</code>폴더에 <code>_custom</code> 폴더가 없다면 생성하시고 있으시면 그 안에 <code>google_adsense.ejs</code> 파일을 새로 생성합니다.</p>\n<h2 id=\"Adsense-코드-복사\"><a href=\"#Adsense-코드-복사\" class=\"headerlink\" title=\"Adsense 코드 복사\"></a>Adsense 코드 복사</h2><p>생성된  <code>google_adsense.ejs</code> 파일에 사이트 검토를 위한 소스 코드를 복사 붙여 넣기합니다. (아래는 예시로 google_ad_client의 키 값이 없습니다)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  (adsbygoogle = <span class=\"built_in\">window</span>.adsbygoogle || []).push(&#123;</span><br><span class=\"line\">    google_ad_client: <span class=\"string\">\"your key\"</span>,</span><br><span class=\"line\">    enable_page_level_ads: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"layout-swig-파일의-수정\"><a href=\"#layout-swig-파일의-수정\" class=\"headerlink\" title=\"_layout.swig 파일의  수정\"></a><code>_layout.swig</code> 파일의 <head><meta name=\"generator\" content=\"Hexo 3.9.0\"> 수정</head></h2><p><code>_layout.swig</code> 파일이 블로그 포스트의 전체적인 레이아웃을 담당하고 있는 것을 알 수 있습니다.<br>여기 <head><meta name=\"generator\" content=\"Hexo 3.9.0\"></head> 태그 안에 저희가 생성한 javascript 파일을 넣으면 됩니다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Google AdSense start --&gt;</span></span><br><span class=\"line\">&#123;% include '_custom/google_adsense.ejs' %&#125;</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Google AdSense end --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo-generate-후-확인하기\"><a href=\"#hexo-generate-후-확인하기\" class=\"headerlink\" title=\"hexo generate 후 확인하기\"></a><code>hexo generate</code> 후 확인하기</h2><p><code>hexo g -d</code> 한 후 블로그의 소스코드 보기를 통해 저희가 작성한 코드가 잘 적용되어 있는지 확인할 수 있습니다.<br>구글 애드센스 사이트 검증을 요청하면 아래와 같은 화면을 보실 수 있습니다.</p>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_wait.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n"},{"title":"(파이썬) 03 Booleans and Conditionals","date":"2019-07-17T02:45:34.000Z","subtitle":"Kaggle 홈페이지 Python 강좌 참고","_content":"\n# Reference\n\n- Kaggle 홈페이지 - [Kaggle](https://www.kaggle.com)\n- 5강 'Booleans and Conditionals' - [Python Micro-Course Home Page](https://www.kaggle.com/colinmorris/booleans-and-conditionals)\n\n------\n\n<br>\n\n# 불리언(Booleans)\n\n파이썬에는 `True`와 `False` 중 하나의 값을 가지는 `bool` 타입의 변수가 있습니다.\n\n{% tabs bool_type %}\n<!-- tab CODE @code -->\n  {% code lang:python %}\n  x = True\n  print(x)\n  print(type(x)){% endcode %}\n<!-- endtab -->\n\n<!-- tab CODE @code -->\n  {% code lang:terminal %}\n  True\n  <class 'bool'>{% endcode %}\n<!-- endtab -->\n{% endtabs %}\n\n보통 코드에 `True`나 `False` 값을 바로 넣기보다 **불리언 연산자들(boolean operators)** 를 통해 boolean 값을 얻습니다. 이 연산자들은 질문에 대한 참/거짓을 알려줍니다. 아래 표와 예제들을 통해 이 연산자들을 알아보겠습니다.\n\n## 비교 연산자들(Comparison Operations)\n\n| Operation | Description                   |      | Operation | Description                      |\n| :-------- | :---------------------------- | :--- | :-------- | :------------------------------- |\n| `a == b`  | `a` equal to `b`              |      | `a != b`  | `a` not equal to `b`             |\n| `a < b`   | `a` less than `b`             |      | `a > b`   | `a` greater than `b`             |\n| `a <= b`  | `a` less than or equal to `b` |      | `a >= b`  | `a` greater than or equal to `b` |\n\n\n{% note info no-icon %}\n  {% code lang:python %}\n    def can_run_for_president(age):\n        \"\"\"Can someone of the given age run for president in the US?\"\"\"\n        # 미국 헌법에는 35세 이상이여야 한다고 명시되어 있습니다\"\n        return age >= 35\n\n    print(\"Can a 19-year-old run for president?\", can_run_for_president(19))\n    print(\"Can a 45-year-old run for president?\", can_run_for_president(45)){% endcode %}\n\n  {% code %}\n    Can a 19-year-old run for president? False\n    Can a 45-year-old run for president? True{% endcode %}\n{% endnote %}\n\n비교 연산자는 조금 영리한거 같지만...\n\n{% note success %}\n  {% code lang:python %}\n  3.0 == 3{% endcode %}\n\n  {% code %}\n  True{% endcode %}\n{% endnote %}\n\n꼭 그런거 같진 않습니다...\n\n{% note danger %}\n  {% code lang:python %}\n  '3' == 3{% endcode %}\n\n  {% code %}\n  False{% endcode %}\n{% endnote %}\n\n비교 연산자들이 앞서 보았던 산술 연산자들(arithmetic operators)과 더해지면 무한한 범위의 수학적 테스트들을 표현하는게 가능합니다.\n\n{% tabs example_1, 1 %}\n<!-- tab CODE @code -->\n  {% note primary %}\n\n    예를 들어, 2 로 나눈 나머지가 1 인지 확인하여 숫자가 홀수 인지를 검사할 수 있습니다.\n\n    {% code lang:python %}\n      def is_odd(n):\n        return (n % 2) == 1\n      print(\"Is 100 odd?\", is_odd(100))\n      print(\"Is -1 odd?\", is_odd(-1)){% endcode %}\n  {% endnote %}\n<!-- endtab -->\n\n<!-- tab OUTPUT @terminal -->\n  {% note success %}\n    {% code %}\n      Is 100 odd? Fasle\n      Is -1 odd? True{% endcode %}\n\n    비교 연산자를 사용할 때 `=` 대신 `==` 을 사용한다는 것을 기억하십시오. 만약 `n == 2` 라고 적는 다면 n의 값을 묻는 것이고, `n = 2` 라고 적으면 n에 할당된 값을 변경하는 것입니다.\n  {% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n\n## 불리언 값 연산(Combining Boolean Values)\n\n파이썬은 보통의 \"and\", \"or\"과 \"not\" 개념을 사용하여 boolean 값들을 연산하는 기능을 제공합니다. 사실 boolean 관련 파이썬 연산자들은 저게 전부입니다: `and`, `or`, `not`\n\n이것으로 우리는 `can_run_for_president` 함수를 조금 더 정확하게 만들 수 있습니다.\n\n{% note info no-icon %}\n  {% code lang:python %}\n    def can_run_for_president(age, is_natural_born_citizen):\n        \"\"\"Can someone of the given age and citizenship status run for president in the US?\"\"\"\n        # 미국 헌법에는 미국에서 태어난 시민이고 35세 이상이여야 한다고 명시되어 있습니다\"\n        return is_natural_born_citizen and (age >= 35)\n\n    print(can_run_for_president(19, True))\n    print(can_run_for_president(55, False))\n    print(can_run_for_president(55, True)){% endcode %}\n\n  {% code %}\n    False\n    False\n    True{% endcode %}\n{% endnote %}\n\n간단하게, 아래 표현식의 결과를 예상할 수 있나요?\n\n{% tabs example_2, 1 %}\n<!-- tab CODE @code -->\n  {% code lang:python %}\n    True or True and False{% endcode %}\n<!-- endtab -->\n\n<!-- tab ANSWER @terminal -->\n  {% code %}\n    True{% endcode %}\n<!-- endtab -->\n{% endtabs %}\n\n파이썬에는 위와 같은 표현식에서 우선순위 규칙(precedence rule)에 따라 연산의 순서를 결정합니다. 예를 들어, `and` 는 `or` 보다 우선순위에 있기 때문에 첫번째 표현식은 참(True)이 됩니다. 만약 왼쪽에서 오른쪽으로 연산했다면 `True or True` 를 먼저 실행한 다음(결과는 `True`), 그 결과를 `False`와 `and` 연산하여 최종 값인 `False`  를 얻었을 것입니다.\n\n우선순위([order of precedence](https://docs.python.org/3/reference/expressions.html#operator-precedence))를 외우려고 할 수도 있지만 괄호를 사용하는 것이 더 안전한 방법입니다. 이는 버그를 방지하는데 도움이 될 뿐만이 아니라 코드를 읽는 모든 사람이 이해하기 수월해 집니다.\n\n예를 들어, 아래의 코드를 살펴보세요.\n\n```python\nprepared_for_weather = have_umbrella or rain_level < 5 and have_hood or not rain_level > 0 and is_workday\n```\n\n오늘 날씨에 ...\n\n\n- 만약 우산을 가지고 있다면...\n- 혹은 만약 비가 많이 오는게 아니고 내가 후드를 가지고 있다면...\n- 아니면 비가 내리지 않고 일하는 날이 아니라면 준비되었는지 말해줍니다\n\n위 파이썬 코드는 버그가 있을뿐만 아니라 읽기에도 힘듭니다. 괄호를 추가해서 두 가지의 문제점을 해결해 보겠습니다:\n\n```python\nprepared_for_weather = have_umbrella or (rain_level < 5 and have_hood) or not (rain_level > 0 and is_workday)\n```\n\n{% tabs parentheses %}\n<!-- tab Single_parenthese @eye -->\n  {% note primary no-icon%}\n    각각 괄호로 묶어 주겠습니다.\n\n    {% code lang:python %}\n      prepared_for_weather = have_umbrella or (rain_level < 5 and have_hood) or not (rain_level > 0 and is_workday){% endcode %}\n  {% endnote %}\n<!-- endtab -->\n\n<!-- tab More_parenthese @eye -->\n  {% note primary no-icon%}\n    가독성을 높이기 위해 괄호를 더 사용해도 좋습니다\n\n    {% code lang:python %}\n      prepared_for_weather = have_umbrella or ((rain_level < 5) and have_hood) or (not (rain_level > 0 and is_workday)){% endcode %}\n  {% endnote %}\n<!-- endtab -->\n\n<!-- tab Multiple_lines @eye -->\n  {% note primary no-icon%}\n    혹은 위에서 언급한 3가지 조건을 강조하기 위해 여러 줄로 작성해도 됩니다.\n\n    {% code lang:python %}\n    prepared_for_weather = (\n      have_umbrella\n      or ((rain_level < 5) and have_hood)\n      or (not (rain_level > 0 and is_workday))\n    ){% endcode %}\n  {% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n<br><br><br>\n# 조건문(Conditionals)\n\n불리언(boolean)은 그 자체만으로도 매우 유용하지만 `if`, `elif`, `else` 키워드를 사용하는 조건문과 함께 사용되면 진가를 발휘됩니다.\n\n조건문 혹은, `if-then` 문을 사용하면 프로그래머는 일정 불리언 조건(참/거짓 조건)에 따라 특정 코드를 실행할 수 있게 됩니다. 파이썬 조건문의 기본 예제는 다음과 같습니다.\n\n```python\ndef inspect(x):\n    if x == 0:\n        print(x, \"is zero\")\n    elif x > 0:\n        print(x, \"is positive\")\n    elif x < 0:\n        print(x, \"is negative\")\n    else:\n        print(x, \"is unlike anything I've ever seen...\")\n\ninspect(0)\ninspect(-15)\n```\n```terminal\n0 is zero\n-15 is negative\n```\n\n파이썬의 `if`와 `else`는 다른 언어에서 주로 사용하는 것과 같습니다; `elif` 는 조금 독특한 키워드로 `else if` 를 축약한 단어입니다. 조건문에서 `elif` 와 `else` 는 선택사항입니다. `elif` 는 얼마든지 추가하고 싶은만큼 추가하실 수 있습니다.\n\n콜론(`:`)과 공백을 사용하여 별도의 코드 블록을 나타내는 것을 기억하시길 바랍니다. 이는 함수를 정의 할 때와 유사합니다; 함수의 헤더는 `:`로 끝나고 다음 줄은 4칸 들여 쓰기됩니다. 모든 들여쓰기 된 줄들은 다음 <u>들여쓰기가 안된 줄</u>을 만날 때까지 하나의 함수에 속하게 됩니다.\n\n```PYTHON\ndef f(x):\n    if x > 0:\n        print(\"Only printed when x is positive; x =\", x)\n        print(\"Also only printed when x is positive; x =\", x)\n    print(\"Always printed, regardless of x's value; x =\", x)\n\nf(1)\nf(0)\n```\n```terminal\nOnly printed when x is positive; x = 1\nAlso only printed when x is positive; x = 1\nAlways printed, regardless of x's value; x = 1\nAlways printed, regardless of x's value; x = 0\n```\n\n## 불리언 변환(Boolean conversion)\n\n우리는 앞서 int 형으로 바꿔주는 `int()` 와, float 형으로 바꾸는 `float()` 봤기 때문에, bool 형으로 바꿔주는 `bool()` 이라는 함수가 있다는 것이 별로 놀랍지 않습니다.\n\n```PYTHON\nprint(bool(1)) # all numbers are treated as true, except 0\nprint(bool(0))\nprint(bool(\"asf\")) # all strings are treated as true, except the empty string \"\"\nprint(bool(\"\"))\n# Generally empty sequences (strings, lists, and other types we've yet to see like lists and tuples)\n# are \"falsey\" and the rest are \"truthy\"\n```\n```\nTrue\nFalse\nTrue\nFalse\n```\n\nboolean이 예상되는 조건문에서 non-boolean 객체를 사용할 수 있습니다. 파이썬은 암시적으로 그에 상응하는 boolean 값으로 처리 할 것입니다 :\n\n```PYTHON\nif 0:\n    print(0)\nelif \"spam\":\n    print(\"spam\")\n```\n```\nspam\n```\n\n## 조건식(일명 '삼항연산(ternary)')\n\n\n어떤 조건에 따라 두 개의 값 중 하나를 변수의 값으로 설정하는 것은 매우 흔한 패턴입니다.\n\n{% note %}\n  {% code lang:python %}\n  def quiz_message(grade):\n    if grade < 50:\n        outcome = 'failed'\n    else:\n        outcome = 'passed'\n    print('You', outcome, 'the quiz with a grade of', grade)\n\n  quiz_message(80)\n  {% endcode %}\n  {% code %}\n  You passed the quiz with a grade of 80\n  {% endcode %}\n{% endnote %}\n\n파이썬에는 이러한 경우에 문장을 단순화 시킬 수 있는 단일 라인 조건식 구문(syntax)을 지원합니다.\n\n{% note success %}\n  {% code lang:python %}\n  def quiz_message(grade):\n      outcome = 'failed' if grade < 50 else 'passed'\n      print('You', outcome, 'the quiz with a grade of', grade)\n\n  quiz_message(45)\n  {% endcode %}\n  {% code %}\n  You failed the quiz with a grade of 45\n  {% endcode %}\n{% endnote %}\n\n보시면 다른 언어에 있는 삼항 연산자와 비슷하다는 것을 알 수 있습니다. 예를 들어, javascript에서 라면 우리는 위의 표현을 `var outcome = grade <50? 'failed': 'passed'` 로 작성할 것입니다. (하지만 가독성 측면에서 파이썬이 더 우수하다고 생각합니다.)\n\n\n<br><br><br>\n# 연습문제(Your Turn)\n\nbooleans and conditionals -> **[third Python programming exercise](https://www.kaggle.com/kernels/fork/1275165)**\n","source":"_posts/20190717-03-booleans-and-conditionals.md","raw":"---\ntitle: (파이썬) 03 Booleans and Conditionals\ndate: 2019-07-17 11:45:34\ncategories:\n  - LANGUAGE\n  - PYTHON\ntags: [파이썬, 캐글, 튜토리얼, kaggle, programming language, python, language, booleans, conditionals, tutorial]\nsubtitle: Kaggle 홈페이지 Python 강좌 참고\n---\n\n# Reference\n\n- Kaggle 홈페이지 - [Kaggle](https://www.kaggle.com)\n- 5강 'Booleans and Conditionals' - [Python Micro-Course Home Page](https://www.kaggle.com/colinmorris/booleans-and-conditionals)\n\n------\n\n<br>\n\n# 불리언(Booleans)\n\n파이썬에는 `True`와 `False` 중 하나의 값을 가지는 `bool` 타입의 변수가 있습니다.\n\n{% tabs bool_type %}\n<!-- tab CODE @code -->\n  {% code lang:python %}\n  x = True\n  print(x)\n  print(type(x)){% endcode %}\n<!-- endtab -->\n\n<!-- tab CODE @code -->\n  {% code lang:terminal %}\n  True\n  <class 'bool'>{% endcode %}\n<!-- endtab -->\n{% endtabs %}\n\n보통 코드에 `True`나 `False` 값을 바로 넣기보다 **불리언 연산자들(boolean operators)** 를 통해 boolean 값을 얻습니다. 이 연산자들은 질문에 대한 참/거짓을 알려줍니다. 아래 표와 예제들을 통해 이 연산자들을 알아보겠습니다.\n\n## 비교 연산자들(Comparison Operations)\n\n| Operation | Description                   |      | Operation | Description                      |\n| :-------- | :---------------------------- | :--- | :-------- | :------------------------------- |\n| `a == b`  | `a` equal to `b`              |      | `a != b`  | `a` not equal to `b`             |\n| `a < b`   | `a` less than `b`             |      | `a > b`   | `a` greater than `b`             |\n| `a <= b`  | `a` less than or equal to `b` |      | `a >= b`  | `a` greater than or equal to `b` |\n\n\n{% note info no-icon %}\n  {% code lang:python %}\n    def can_run_for_president(age):\n        \"\"\"Can someone of the given age run for president in the US?\"\"\"\n        # 미국 헌법에는 35세 이상이여야 한다고 명시되어 있습니다\"\n        return age >= 35\n\n    print(\"Can a 19-year-old run for president?\", can_run_for_president(19))\n    print(\"Can a 45-year-old run for president?\", can_run_for_president(45)){% endcode %}\n\n  {% code %}\n    Can a 19-year-old run for president? False\n    Can a 45-year-old run for president? True{% endcode %}\n{% endnote %}\n\n비교 연산자는 조금 영리한거 같지만...\n\n{% note success %}\n  {% code lang:python %}\n  3.0 == 3{% endcode %}\n\n  {% code %}\n  True{% endcode %}\n{% endnote %}\n\n꼭 그런거 같진 않습니다...\n\n{% note danger %}\n  {% code lang:python %}\n  '3' == 3{% endcode %}\n\n  {% code %}\n  False{% endcode %}\n{% endnote %}\n\n비교 연산자들이 앞서 보았던 산술 연산자들(arithmetic operators)과 더해지면 무한한 범위의 수학적 테스트들을 표현하는게 가능합니다.\n\n{% tabs example_1, 1 %}\n<!-- tab CODE @code -->\n  {% note primary %}\n\n    예를 들어, 2 로 나눈 나머지가 1 인지 확인하여 숫자가 홀수 인지를 검사할 수 있습니다.\n\n    {% code lang:python %}\n      def is_odd(n):\n        return (n % 2) == 1\n      print(\"Is 100 odd?\", is_odd(100))\n      print(\"Is -1 odd?\", is_odd(-1)){% endcode %}\n  {% endnote %}\n<!-- endtab -->\n\n<!-- tab OUTPUT @terminal -->\n  {% note success %}\n    {% code %}\n      Is 100 odd? Fasle\n      Is -1 odd? True{% endcode %}\n\n    비교 연산자를 사용할 때 `=` 대신 `==` 을 사용한다는 것을 기억하십시오. 만약 `n == 2` 라고 적는 다면 n의 값을 묻는 것이고, `n = 2` 라고 적으면 n에 할당된 값을 변경하는 것입니다.\n  {% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n\n## 불리언 값 연산(Combining Boolean Values)\n\n파이썬은 보통의 \"and\", \"or\"과 \"not\" 개념을 사용하여 boolean 값들을 연산하는 기능을 제공합니다. 사실 boolean 관련 파이썬 연산자들은 저게 전부입니다: `and`, `or`, `not`\n\n이것으로 우리는 `can_run_for_president` 함수를 조금 더 정확하게 만들 수 있습니다.\n\n{% note info no-icon %}\n  {% code lang:python %}\n    def can_run_for_president(age, is_natural_born_citizen):\n        \"\"\"Can someone of the given age and citizenship status run for president in the US?\"\"\"\n        # 미국 헌법에는 미국에서 태어난 시민이고 35세 이상이여야 한다고 명시되어 있습니다\"\n        return is_natural_born_citizen and (age >= 35)\n\n    print(can_run_for_president(19, True))\n    print(can_run_for_president(55, False))\n    print(can_run_for_president(55, True)){% endcode %}\n\n  {% code %}\n    False\n    False\n    True{% endcode %}\n{% endnote %}\n\n간단하게, 아래 표현식의 결과를 예상할 수 있나요?\n\n{% tabs example_2, 1 %}\n<!-- tab CODE @code -->\n  {% code lang:python %}\n    True or True and False{% endcode %}\n<!-- endtab -->\n\n<!-- tab ANSWER @terminal -->\n  {% code %}\n    True{% endcode %}\n<!-- endtab -->\n{% endtabs %}\n\n파이썬에는 위와 같은 표현식에서 우선순위 규칙(precedence rule)에 따라 연산의 순서를 결정합니다. 예를 들어, `and` 는 `or` 보다 우선순위에 있기 때문에 첫번째 표현식은 참(True)이 됩니다. 만약 왼쪽에서 오른쪽으로 연산했다면 `True or True` 를 먼저 실행한 다음(결과는 `True`), 그 결과를 `False`와 `and` 연산하여 최종 값인 `False`  를 얻었을 것입니다.\n\n우선순위([order of precedence](https://docs.python.org/3/reference/expressions.html#operator-precedence))를 외우려고 할 수도 있지만 괄호를 사용하는 것이 더 안전한 방법입니다. 이는 버그를 방지하는데 도움이 될 뿐만이 아니라 코드를 읽는 모든 사람이 이해하기 수월해 집니다.\n\n예를 들어, 아래의 코드를 살펴보세요.\n\n```python\nprepared_for_weather = have_umbrella or rain_level < 5 and have_hood or not rain_level > 0 and is_workday\n```\n\n오늘 날씨에 ...\n\n\n- 만약 우산을 가지고 있다면...\n- 혹은 만약 비가 많이 오는게 아니고 내가 후드를 가지고 있다면...\n- 아니면 비가 내리지 않고 일하는 날이 아니라면 준비되었는지 말해줍니다\n\n위 파이썬 코드는 버그가 있을뿐만 아니라 읽기에도 힘듭니다. 괄호를 추가해서 두 가지의 문제점을 해결해 보겠습니다:\n\n```python\nprepared_for_weather = have_umbrella or (rain_level < 5 and have_hood) or not (rain_level > 0 and is_workday)\n```\n\n{% tabs parentheses %}\n<!-- tab Single_parenthese @eye -->\n  {% note primary no-icon%}\n    각각 괄호로 묶어 주겠습니다.\n\n    {% code lang:python %}\n      prepared_for_weather = have_umbrella or (rain_level < 5 and have_hood) or not (rain_level > 0 and is_workday){% endcode %}\n  {% endnote %}\n<!-- endtab -->\n\n<!-- tab More_parenthese @eye -->\n  {% note primary no-icon%}\n    가독성을 높이기 위해 괄호를 더 사용해도 좋습니다\n\n    {% code lang:python %}\n      prepared_for_weather = have_umbrella or ((rain_level < 5) and have_hood) or (not (rain_level > 0 and is_workday)){% endcode %}\n  {% endnote %}\n<!-- endtab -->\n\n<!-- tab Multiple_lines @eye -->\n  {% note primary no-icon%}\n    혹은 위에서 언급한 3가지 조건을 강조하기 위해 여러 줄로 작성해도 됩니다.\n\n    {% code lang:python %}\n    prepared_for_weather = (\n      have_umbrella\n      or ((rain_level < 5) and have_hood)\n      or (not (rain_level > 0 and is_workday))\n    ){% endcode %}\n  {% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n<br><br><br>\n# 조건문(Conditionals)\n\n불리언(boolean)은 그 자체만으로도 매우 유용하지만 `if`, `elif`, `else` 키워드를 사용하는 조건문과 함께 사용되면 진가를 발휘됩니다.\n\n조건문 혹은, `if-then` 문을 사용하면 프로그래머는 일정 불리언 조건(참/거짓 조건)에 따라 특정 코드를 실행할 수 있게 됩니다. 파이썬 조건문의 기본 예제는 다음과 같습니다.\n\n```python\ndef inspect(x):\n    if x == 0:\n        print(x, \"is zero\")\n    elif x > 0:\n        print(x, \"is positive\")\n    elif x < 0:\n        print(x, \"is negative\")\n    else:\n        print(x, \"is unlike anything I've ever seen...\")\n\ninspect(0)\ninspect(-15)\n```\n```terminal\n0 is zero\n-15 is negative\n```\n\n파이썬의 `if`와 `else`는 다른 언어에서 주로 사용하는 것과 같습니다; `elif` 는 조금 독특한 키워드로 `else if` 를 축약한 단어입니다. 조건문에서 `elif` 와 `else` 는 선택사항입니다. `elif` 는 얼마든지 추가하고 싶은만큼 추가하실 수 있습니다.\n\n콜론(`:`)과 공백을 사용하여 별도의 코드 블록을 나타내는 것을 기억하시길 바랍니다. 이는 함수를 정의 할 때와 유사합니다; 함수의 헤더는 `:`로 끝나고 다음 줄은 4칸 들여 쓰기됩니다. 모든 들여쓰기 된 줄들은 다음 <u>들여쓰기가 안된 줄</u>을 만날 때까지 하나의 함수에 속하게 됩니다.\n\n```PYTHON\ndef f(x):\n    if x > 0:\n        print(\"Only printed when x is positive; x =\", x)\n        print(\"Also only printed when x is positive; x =\", x)\n    print(\"Always printed, regardless of x's value; x =\", x)\n\nf(1)\nf(0)\n```\n```terminal\nOnly printed when x is positive; x = 1\nAlso only printed when x is positive; x = 1\nAlways printed, regardless of x's value; x = 1\nAlways printed, regardless of x's value; x = 0\n```\n\n## 불리언 변환(Boolean conversion)\n\n우리는 앞서 int 형으로 바꿔주는 `int()` 와, float 형으로 바꾸는 `float()` 봤기 때문에, bool 형으로 바꿔주는 `bool()` 이라는 함수가 있다는 것이 별로 놀랍지 않습니다.\n\n```PYTHON\nprint(bool(1)) # all numbers are treated as true, except 0\nprint(bool(0))\nprint(bool(\"asf\")) # all strings are treated as true, except the empty string \"\"\nprint(bool(\"\"))\n# Generally empty sequences (strings, lists, and other types we've yet to see like lists and tuples)\n# are \"falsey\" and the rest are \"truthy\"\n```\n```\nTrue\nFalse\nTrue\nFalse\n```\n\nboolean이 예상되는 조건문에서 non-boolean 객체를 사용할 수 있습니다. 파이썬은 암시적으로 그에 상응하는 boolean 값으로 처리 할 것입니다 :\n\n```PYTHON\nif 0:\n    print(0)\nelif \"spam\":\n    print(\"spam\")\n```\n```\nspam\n```\n\n## 조건식(일명 '삼항연산(ternary)')\n\n\n어떤 조건에 따라 두 개의 값 중 하나를 변수의 값으로 설정하는 것은 매우 흔한 패턴입니다.\n\n{% note %}\n  {% code lang:python %}\n  def quiz_message(grade):\n    if grade < 50:\n        outcome = 'failed'\n    else:\n        outcome = 'passed'\n    print('You', outcome, 'the quiz with a grade of', grade)\n\n  quiz_message(80)\n  {% endcode %}\n  {% code %}\n  You passed the quiz with a grade of 80\n  {% endcode %}\n{% endnote %}\n\n파이썬에는 이러한 경우에 문장을 단순화 시킬 수 있는 단일 라인 조건식 구문(syntax)을 지원합니다.\n\n{% note success %}\n  {% code lang:python %}\n  def quiz_message(grade):\n      outcome = 'failed' if grade < 50 else 'passed'\n      print('You', outcome, 'the quiz with a grade of', grade)\n\n  quiz_message(45)\n  {% endcode %}\n  {% code %}\n  You failed the quiz with a grade of 45\n  {% endcode %}\n{% endnote %}\n\n보시면 다른 언어에 있는 삼항 연산자와 비슷하다는 것을 알 수 있습니다. 예를 들어, javascript에서 라면 우리는 위의 표현을 `var outcome = grade <50? 'failed': 'passed'` 로 작성할 것입니다. (하지만 가독성 측면에서 파이썬이 더 우수하다고 생각합니다.)\n\n\n<br><br><br>\n# 연습문제(Your Turn)\n\nbooleans and conditionals -> **[third Python programming exercise](https://www.kaggle.com/kernels/fork/1275165)**\n","slug":"03-booleans-and-conditionals","published":1,"updated":"2019-07-22T07:07:55.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt86k002d2646yzsawt2j","content":"<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>Kaggle 홈페이지 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbQ==\" title=\"https://www.kaggle.com\">Kaggle<i class=\"fa fa-external-link\"></i></span></li>\n<li>5강 ‘Booleans and Conditionals’ - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jb2xpbm1vcnJpcy9ib29sZWFucy1hbmQtY29uZGl0aW9uYWxz\" title=\"https://www.kaggle.com/colinmorris/booleans-and-conditionals\">Python Micro-Course Home Page<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<hr>\n<br>\n\n<h1 id=\"불리언-Booleans\"><a href=\"#불리언-Booleans\" class=\"headerlink\" title=\"불리언(Booleans)\"></a>불리언(Booleans)</h1><p>파이썬에는 <code>True</code>와 <code>False</code> 중 하나의 값을 가지는 <code>bool</code> 타입의 변수가 있습니다.</p>\n<div class=\"tabs\" id=\"bool_type\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#bool_type-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#bool_type-2\"><i class=\"fa fa-code\"></i>CODE</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"bool_type-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"literal\">True</span></span><br><span class=\"line\">print(x)</span><br><span class=\"line\">print(type(x))</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"bool_type-2\"><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">True</span><br><span class=\"line\">&lt;class &apos;bool&apos;&gt;</span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>보통 코드에 <code>True</code>나 <code>False</code> 값을 바로 넣기보다 <strong>불리언 연산자들(boolean operators)</strong> 를 통해 boolean 값을 얻습니다. 이 연산자들은 질문에 대한 참/거짓을 알려줍니다. 아래 표와 예제들을 통해 이 연산자들을 알아보겠습니다.</p>\n<h2 id=\"비교-연산자들-Comparison-Operations\"><a href=\"#비교-연산자들-Comparison-Operations\" class=\"headerlink\" title=\"비교 연산자들(Comparison Operations)\"></a>비교 연산자들(Comparison Operations)</h2><table>\n<thead>\n<tr>\n<th align=\"left\">Operation</th>\n<th align=\"left\">Description</th>\n<th align=\"left\"></th>\n<th align=\"left\">Operation</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>a == b</code></td>\n<td align=\"left\"><code>a</code> equal to <code>b</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>a != b</code></td>\n<td align=\"left\"><code>a</code> not equal to <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a &lt; b</code></td>\n<td align=\"left\"><code>a</code> less than <code>b</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>a &gt; b</code></td>\n<td align=\"left\"><code>a</code> greater than <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a &lt;= b</code></td>\n<td align=\"left\"><code>a</code> less than or equal to <code>b</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>a &gt;= b</code></td>\n<td align=\"left\"><code>a</code> greater than or equal to <code>b</code></td>\n</tr>\n</tbody></table>\n<div class=\"note info no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">can_run_for_president</span><span class=\"params\">(age)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Can someone of the given age run for president in the US?\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 미국 헌법에는 35세 이상이여야 한다고 명시되어 있습니다\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> age &gt;= <span class=\"number\">35</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"Can a 19-year-old run for president?\"</span>, can_run_for_president(<span class=\"number\">19</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"Can a 45-year-old run for president?\"</span>, can_run_for_president(<span class=\"number\">45</span>))</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Can a 19-year-old run for president? False</span><br><span class=\"line\">Can a 45-year-old run for president? True</span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>비교 연산자는 조금 영리한거 같지만…</p>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.0</span> == <span class=\"number\">3</span></span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>꼭 그런거 같진 않습니다…</p>\n<div class=\"note danger\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'3'</span> == <span class=\"number\">3</span></span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">False</span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>비교 연산자들이 앞서 보았던 산술 연산자들(arithmetic operators)과 더해지면 무한한 범위의 수학적 테스트들을 표현하는게 가능합니다.</p>\n<div class=\"tabs\" id=\"example_1\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_1-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#example_1-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_1-1\"><div class=\"note primary\">\n            <p>예를 들어, 2 로 나눈 나머지가 1 인지 확인하여 숫자가 홀수 인지를 검사할 수 있습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_odd</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (n % <span class=\"number\">2</span>) == <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">\"Is 100 odd?\"</span>, is_odd(<span class=\"number\">100</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"Is -1 odd?\"</span>, is_odd(<span class=\"number\">-1</span>))</span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_1-2\"><div class=\"note success\">\n            <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Is 100 odd? Fasle</span><br><span class=\"line\">Is -1 odd? True</span><br></pre></td></tr></table></figure><p>비교 연산자를 사용할 때 <code>=</code> 대신 <code>==</code> 을 사용한다는 것을 기억하십시오. 만약 <code>n == 2</code> 라고 적는 다면 n의 값을 묻는 것이고, <code>n = 2</code> 라고 적으면 n에 할당된 값을 변경하는 것입니다.</p>\n          </div></div></div></div>\n\n\n<h2 id=\"불리언-값-연산-Combining-Boolean-Values\"><a href=\"#불리언-값-연산-Combining-Boolean-Values\" class=\"headerlink\" title=\"불리언 값 연산(Combining Boolean Values)\"></a>불리언 값 연산(Combining Boolean Values)</h2><p>파이썬은 보통의 “and”, “or”과 “not” 개념을 사용하여 boolean 값들을 연산하는 기능을 제공합니다. 사실 boolean 관련 파이썬 연산자들은 저게 전부입니다: <code>and</code>, <code>or</code>, <code>not</code></p>\n<p>이것으로 우리는 <code>can_run_for_president</code> 함수를 조금 더 정확하게 만들 수 있습니다.</p>\n<div class=\"note info no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">can_run_for_president</span><span class=\"params\">(age, is_natural_born_citizen)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Can someone of the given age and citizenship status run for president in the US?\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 미국 헌법에는 미국에서 태어난 시민이고 35세 이상이여야 한다고 명시되어 있습니다\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> is_natural_born_citizen <span class=\"keyword\">and</span> (age &gt;= <span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(can_run_for_president(<span class=\"number\">19</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\">print(can_run_for_president(<span class=\"number\">55</span>, <span class=\"literal\">False</span>))</span><br><span class=\"line\">print(can_run_for_president(<span class=\"number\">55</span>, <span class=\"literal\">True</span>))</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">False</span><br><span class=\"line\">False</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>간단하게, 아래 표현식의 결과를 예상할 수 있나요?</p>\n<div class=\"tabs\" id=\"example_2\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_2-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#example_2-2\"><i class=\"fa fa-terminal\"></i>ANSWER</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_2-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"example_2-2\"><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">True</span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>파이썬에는 위와 같은 표현식에서 우선순위 규칙(precedence rule)에 따라 연산의 순서를 결정합니다. 예를 들어, <code>and</code> 는 <code>or</code> 보다 우선순위에 있기 때문에 첫번째 표현식은 참(True)이 됩니다. 만약 왼쪽에서 오른쪽으로 연산했다면 <code>True or True</code> 를 먼저 실행한 다음(결과는 <code>True</code>), 그 결과를 <code>False</code>와 <code>and</code> 연산하여 최종 값인 <code>False</code>  를 얻었을 것입니다.</p>\n<p>우선순위(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9yZWZlcmVuY2UvZXhwcmVzc2lvbnMuaHRtbCNvcGVyYXRvci1wcmVjZWRlbmNl\" title=\"https://docs.python.org/3/reference/expressions.html#operator-precedence\">order of precedence<i class=\"fa fa-external-link\"></i></span>)를 외우려고 할 수도 있지만 괄호를 사용하는 것이 더 안전한 방법입니다. 이는 버그를 방지하는데 도움이 될 뿐만이 아니라 코드를 읽는 모든 사람이 이해하기 수월해 집니다.</p>\n<p>예를 들어, 아래의 코드를 살펴보세요.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">prepared_for_weather = have_umbrella <span class=\"keyword\">or</span> rain_level &lt; <span class=\"number\">5</span> <span class=\"keyword\">and</span> have_hood <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> rain_level &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> is_workday</span><br></pre></td></tr></table></figure>\n\n<p>오늘 날씨에 …</p>\n<ul>\n<li>만약 우산을 가지고 있다면…</li>\n<li>혹은 만약 비가 많이 오는게 아니고 내가 후드를 가지고 있다면…</li>\n<li>아니면 비가 내리지 않고 일하는 날이 아니라면 준비되었는지 말해줍니다</li>\n</ul>\n<p>위 파이썬 코드는 버그가 있을뿐만 아니라 읽기에도 힘듭니다. 괄호를 추가해서 두 가지의 문제점을 해결해 보겠습니다:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">prepared_for_weather = have_umbrella <span class=\"keyword\">or</span> (rain_level &lt; <span class=\"number\">5</span> <span class=\"keyword\">and</span> have_hood) <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> (rain_level &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> is_workday)</span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"parentheses\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#parentheses-1\"><i class=\"fa fa-eye\"></i>Single_parenthese</a></li><li class=\"tab\"><a href=\"#parentheses-2\"><i class=\"fa fa-eye\"></i>More_parenthese</a></li><li class=\"tab\"><a href=\"#parentheses-3\"><i class=\"fa fa-eye\"></i>Multiple_lines</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"parentheses-1\"><div class=\"note primary no-icon\">\n            <p>각각 괄호로 묶어 주겠습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">prepared_for_weather = have_umbrella <span class=\"keyword\">or</span> (rain_level &lt; <span class=\"number\">5</span> <span class=\"keyword\">and</span> have_hood) <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> (rain_level &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> is_workday)</span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"parentheses-2\"><div class=\"note primary no-icon\">\n            <p>가독성을 높이기 위해 괄호를 더 사용해도 좋습니다</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">prepared_for_weather = have_umbrella <span class=\"keyword\">or</span> ((rain_level &lt; <span class=\"number\">5</span>) <span class=\"keyword\">and</span> have_hood) <span class=\"keyword\">or</span> (<span class=\"keyword\">not</span> (rain_level &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> is_workday))</span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"parentheses-3\"><div class=\"note primary no-icon\">\n            <p>혹은 위에서 언급한 3가지 조건을 강조하기 위해 여러 줄로 작성해도 됩니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">prepared_for_weather = (</span><br><span class=\"line\">  have_umbrella</span><br><span class=\"line\">  <span class=\"keyword\">or</span> ((rain_level &lt; <span class=\"number\">5</span>) <span class=\"keyword\">and</span> have_hood)</span><br><span class=\"line\">  <span class=\"keyword\">or</span> (<span class=\"keyword\">not</span> (rain_level &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> is_workday))</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<p><br><br><br></p>\n<h1 id=\"조건문-Conditionals\"><a href=\"#조건문-Conditionals\" class=\"headerlink\" title=\"조건문(Conditionals)\"></a>조건문(Conditionals)</h1><p>불리언(boolean)은 그 자체만으로도 매우 유용하지만 <code>if</code>, <code>elif</code>, <code>else</code> 키워드를 사용하는 조건문과 함께 사용되면 진가를 발휘됩니다.</p>\n<p>조건문 혹은, <code>if-then</code> 문을 사용하면 프로그래머는 일정 불리언 조건(참/거짓 조건)에 따라 특정 코드를 실행할 수 있게 됩니다. 파이썬 조건문의 기본 예제는 다음과 같습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inspect</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(x, <span class=\"string\">\"is zero\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(x, <span class=\"string\">\"is positive\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> x &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(x, <span class=\"string\">\"is negative\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(x, <span class=\"string\">\"is unlike anything I've ever seen...\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">inspect(<span class=\"number\">0</span>)</span><br><span class=\"line\">inspect(<span class=\"number\">-15</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0 is zero</span><br><span class=\"line\">-15 is negative</span><br></pre></td></tr></table></figure>\n\n<p>파이썬의 <code>if</code>와 <code>else</code>는 다른 언어에서 주로 사용하는 것과 같습니다; <code>elif</code> 는 조금 독특한 키워드로 <code>else if</code> 를 축약한 단어입니다. 조건문에서 <code>elif</code> 와 <code>else</code> 는 선택사항입니다. <code>elif</code> 는 얼마든지 추가하고 싶은만큼 추가하실 수 있습니다.</p>\n<p>콜론(<code>:</code>)과 공백을 사용하여 별도의 코드 블록을 나타내는 것을 기억하시길 바랍니다. 이는 함수를 정의 할 때와 유사합니다; 함수의 헤더는 <code>:</code>로 끝나고 다음 줄은 4칸 들여 쓰기됩니다. 모든 들여쓰기 된 줄들은 다음 <u>들여쓰기가 안된 줄</u>을 만날 때까지 하나의 함수에 속하게 됩니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"Only printed when x is positive; x =\"</span>, x)</span><br><span class=\"line\">        print(<span class=\"string\">\"Also only printed when x is positive; x =\"</span>, x)</span><br><span class=\"line\">    print(<span class=\"string\">\"Always printed, regardless of x's value; x =\"</span>, x)</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>)</span><br><span class=\"line\">f(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Only printed when x is positive; x = 1</span><br><span class=\"line\">Also only printed when x is positive; x = 1</span><br><span class=\"line\">Always printed, regardless of x&apos;s value; x = 1</span><br><span class=\"line\">Always printed, regardless of x&apos;s value; x = 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"불리언-변환-Boolean-conversion\"><a href=\"#불리언-변환-Boolean-conversion\" class=\"headerlink\" title=\"불리언 변환(Boolean conversion)\"></a>불리언 변환(Boolean conversion)</h2><p>우리는 앞서 int 형으로 바꿔주는 <code>int()</code> 와, float 형으로 바꾸는 <code>float()</code> 봤기 때문에, bool 형으로 바꿔주는 <code>bool()</code> 이라는 함수가 있다는 것이 별로 놀랍지 않습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(bool(<span class=\"number\">1</span>)) <span class=\"comment\"># all numbers are treated as true, except 0</span></span><br><span class=\"line\">print(bool(<span class=\"number\">0</span>))</span><br><span class=\"line\">print(bool(<span class=\"string\">\"asf\"</span>)) <span class=\"comment\"># all strings are treated as true, except the empty string \"\"</span></span><br><span class=\"line\">print(bool(<span class=\"string\">\"\"</span>))</span><br><span class=\"line\"><span class=\"comment\"># Generally empty sequences (strings, lists, and other types we've yet to see like lists and tuples)</span></span><br><span class=\"line\"><span class=\"comment\"># are \"falsey\" and the rest are \"truthy\"</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">True</span><br><span class=\"line\">False</span><br><span class=\"line\">True</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure>\n\n<p>boolean이 예상되는 조건문에서 non-boolean 객체를 사용할 수 있습니다. 파이썬은 암시적으로 그에 상응하는 boolean 값으로 처리 할 것입니다 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    print(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"string\">\"spam\"</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"spam\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">spam</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"조건식-일명-‘삼항연산-ternary-’\"><a href=\"#조건식-일명-‘삼항연산-ternary-’\" class=\"headerlink\" title=\"조건식(일명 ‘삼항연산(ternary)’)\"></a>조건식(일명 ‘삼항연산(ternary)’)</h2><p>어떤 조건에 따라 두 개의 값 중 하나를 변수의 값으로 설정하는 것은 매우 흔한 패턴입니다.</p>\n<div class=\"note \">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quiz_message</span><span class=\"params\">(grade)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> grade &lt; <span class=\"number\">50</span>:</span><br><span class=\"line\">      outcome = <span class=\"string\">'failed'</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      outcome = <span class=\"string\">'passed'</span></span><br><span class=\"line\">  print(<span class=\"string\">'You'</span>, outcome, <span class=\"string\">'the quiz with a grade of'</span>, grade)</span><br><span class=\"line\"></span><br><span class=\"line\">quiz_message(<span class=\"number\">80</span>)</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">You passed the quiz with a grade of 80</span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>파이썬에는 이러한 경우에 문장을 단순화 시킬 수 있는 단일 라인 조건식 구문(syntax)을 지원합니다.</p>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quiz_message</span><span class=\"params\">(grade)</span>:</span></span><br><span class=\"line\">    outcome = <span class=\"string\">'failed'</span> <span class=\"keyword\">if</span> grade &lt; <span class=\"number\">50</span> <span class=\"keyword\">else</span> <span class=\"string\">'passed'</span></span><br><span class=\"line\">    print(<span class=\"string\">'You'</span>, outcome, <span class=\"string\">'the quiz with a grade of'</span>, grade)</span><br><span class=\"line\"></span><br><span class=\"line\">quiz_message(<span class=\"number\">45</span>)</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">You failed the quiz with a grade of 45</span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>보시면 다른 언어에 있는 삼항 연산자와 비슷하다는 것을 알 수 있습니다. 예를 들어, javascript에서 라면 우리는 위의 표현을 <code>var outcome = grade &lt;50? &#39;failed&#39;: &#39;passed&#39;</code> 로 작성할 것입니다. (하지만 가독성 측면에서 파이썬이 더 우수하다고 생각합니다.)</p>\n<p><br><br><br></p>\n<h1 id=\"연습문제-Your-Turn\"><a href=\"#연습문제-Your-Turn\" class=\"headerlink\" title=\"연습문제(Your Turn)\"></a>연습문제(Your Turn)</h1><p>booleans and conditionals -&gt; <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE2NQ==\" title=\"https://www.kaggle.com/kernels/fork/1275165\">third Python programming exercise<i class=\"fa fa-external-link\"></i></span></strong></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>Kaggle 홈페이지 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbQ==\" title=\"https://www.kaggle.com\">Kaggle<i class=\"fa fa-external-link\"></i></span></li>\n<li>5강 ‘Booleans and Conditionals’ - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jb2xpbm1vcnJpcy9ib29sZWFucy1hbmQtY29uZGl0aW9uYWxz\" title=\"https://www.kaggle.com/colinmorris/booleans-and-conditionals\">Python Micro-Course Home Page<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<hr>\n<br>\n\n<h1 id=\"불리언-Booleans\"><a href=\"#불리언-Booleans\" class=\"headerlink\" title=\"불리언(Booleans)\"></a>불리언(Booleans)</h1><p>파이썬에는 <code>True</code>와 <code>False</code> 중 하나의 값을 가지는 <code>bool</code> 타입의 변수가 있습니다.</p>\n<div class=\"tabs\" id=\"bool_type\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#bool_type-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#bool_type-2\"><i class=\"fa fa-code\"></i>CODE</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"bool_type-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"literal\">True</span></span><br><span class=\"line\">print(x)</span><br><span class=\"line\">print(type(x))</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"bool_type-2\"><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">True</span><br><span class=\"line\">&lt;class &apos;bool&apos;&gt;</span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>보통 코드에 <code>True</code>나 <code>False</code> 값을 바로 넣기보다 <strong>불리언 연산자들(boolean operators)</strong> 를 통해 boolean 값을 얻습니다. 이 연산자들은 질문에 대한 참/거짓을 알려줍니다. 아래 표와 예제들을 통해 이 연산자들을 알아보겠습니다.</p>\n<h2 id=\"비교-연산자들-Comparison-Operations\"><a href=\"#비교-연산자들-Comparison-Operations\" class=\"headerlink\" title=\"비교 연산자들(Comparison Operations)\"></a>비교 연산자들(Comparison Operations)</h2><table>\n<thead>\n<tr>\n<th align=\"left\">Operation</th>\n<th align=\"left\">Description</th>\n<th align=\"left\"></th>\n<th align=\"left\">Operation</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>a == b</code></td>\n<td align=\"left\"><code>a</code> equal to <code>b</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>a != b</code></td>\n<td align=\"left\"><code>a</code> not equal to <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a &lt; b</code></td>\n<td align=\"left\"><code>a</code> less than <code>b</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>a &gt; b</code></td>\n<td align=\"left\"><code>a</code> greater than <code>b</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>a &lt;= b</code></td>\n<td align=\"left\"><code>a</code> less than or equal to <code>b</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>a &gt;= b</code></td>\n<td align=\"left\"><code>a</code> greater than or equal to <code>b</code></td>\n</tr>\n</tbody></table>\n<div class=\"note info no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">can_run_for_president</span><span class=\"params\">(age)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Can someone of the given age run for president in the US?\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 미국 헌법에는 35세 이상이여야 한다고 명시되어 있습니다\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> age &gt;= <span class=\"number\">35</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"Can a 19-year-old run for president?\"</span>, can_run_for_president(<span class=\"number\">19</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"Can a 45-year-old run for president?\"</span>, can_run_for_president(<span class=\"number\">45</span>))</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Can a 19-year-old run for president? False</span><br><span class=\"line\">Can a 45-year-old run for president? True</span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>비교 연산자는 조금 영리한거 같지만…</p>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3.0</span> == <span class=\"number\">3</span></span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>꼭 그런거 같진 않습니다…</p>\n<div class=\"note danger\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'3'</span> == <span class=\"number\">3</span></span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">False</span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>비교 연산자들이 앞서 보았던 산술 연산자들(arithmetic operators)과 더해지면 무한한 범위의 수학적 테스트들을 표현하는게 가능합니다.</p>\n<div class=\"tabs\" id=\"example_1\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_1-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#example_1-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_1-1\"><div class=\"note primary\">\n            <p>예를 들어, 2 로 나눈 나머지가 1 인지 확인하여 숫자가 홀수 인지를 검사할 수 있습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_odd</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (n % <span class=\"number\">2</span>) == <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">\"Is 100 odd?\"</span>, is_odd(<span class=\"number\">100</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"Is -1 odd?\"</span>, is_odd(<span class=\"number\">-1</span>))</span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_1-2\"><div class=\"note success\">\n            <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Is 100 odd? Fasle</span><br><span class=\"line\">Is -1 odd? True</span><br></pre></td></tr></table></figure><p>비교 연산자를 사용할 때 <code>=</code> 대신 <code>==</code> 을 사용한다는 것을 기억하십시오. 만약 <code>n == 2</code> 라고 적는 다면 n의 값을 묻는 것이고, <code>n = 2</code> 라고 적으면 n에 할당된 값을 변경하는 것입니다.</p>\n          </div></div></div></div>\n\n\n<h2 id=\"불리언-값-연산-Combining-Boolean-Values\"><a href=\"#불리언-값-연산-Combining-Boolean-Values\" class=\"headerlink\" title=\"불리언 값 연산(Combining Boolean Values)\"></a>불리언 값 연산(Combining Boolean Values)</h2><p>파이썬은 보통의 “and”, “or”과 “not” 개념을 사용하여 boolean 값들을 연산하는 기능을 제공합니다. 사실 boolean 관련 파이썬 연산자들은 저게 전부입니다: <code>and</code>, <code>or</code>, <code>not</code></p>\n<p>이것으로 우리는 <code>can_run_for_president</code> 함수를 조금 더 정확하게 만들 수 있습니다.</p>\n<div class=\"note info no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">can_run_for_president</span><span class=\"params\">(age, is_natural_born_citizen)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Can someone of the given age and citizenship status run for president in the US?\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 미국 헌법에는 미국에서 태어난 시민이고 35세 이상이여야 한다고 명시되어 있습니다\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> is_natural_born_citizen <span class=\"keyword\">and</span> (age &gt;= <span class=\"number\">35</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(can_run_for_president(<span class=\"number\">19</span>, <span class=\"literal\">True</span>))</span><br><span class=\"line\">print(can_run_for_president(<span class=\"number\">55</span>, <span class=\"literal\">False</span>))</span><br><span class=\"line\">print(can_run_for_president(<span class=\"number\">55</span>, <span class=\"literal\">True</span>))</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">False</span><br><span class=\"line\">False</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>간단하게, 아래 표현식의 결과를 예상할 수 있나요?</p>\n<div class=\"tabs\" id=\"example_2\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_2-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#example_2-2\"><i class=\"fa fa-terminal\"></i>ANSWER</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_2-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span> <span class=\"keyword\">or</span> <span class=\"literal\">True</span> <span class=\"keyword\">and</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"example_2-2\"><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">True</span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>파이썬에는 위와 같은 표현식에서 우선순위 규칙(precedence rule)에 따라 연산의 순서를 결정합니다. 예를 들어, <code>and</code> 는 <code>or</code> 보다 우선순위에 있기 때문에 첫번째 표현식은 참(True)이 됩니다. 만약 왼쪽에서 오른쪽으로 연산했다면 <code>True or True</code> 를 먼저 실행한 다음(결과는 <code>True</code>), 그 결과를 <code>False</code>와 <code>and</code> 연산하여 최종 값인 <code>False</code>  를 얻었을 것입니다.</p>\n<p>우선순위(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9yZWZlcmVuY2UvZXhwcmVzc2lvbnMuaHRtbCNvcGVyYXRvci1wcmVjZWRlbmNl\" title=\"https://docs.python.org/3/reference/expressions.html#operator-precedence\">order of precedence<i class=\"fa fa-external-link\"></i></span>)를 외우려고 할 수도 있지만 괄호를 사용하는 것이 더 안전한 방법입니다. 이는 버그를 방지하는데 도움이 될 뿐만이 아니라 코드를 읽는 모든 사람이 이해하기 수월해 집니다.</p>\n<p>예를 들어, 아래의 코드를 살펴보세요.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">prepared_for_weather = have_umbrella <span class=\"keyword\">or</span> rain_level &lt; <span class=\"number\">5</span> <span class=\"keyword\">and</span> have_hood <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> rain_level &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> is_workday</span><br></pre></td></tr></table></figure>\n\n<p>오늘 날씨에 …</p>\n<ul>\n<li>만약 우산을 가지고 있다면…</li>\n<li>혹은 만약 비가 많이 오는게 아니고 내가 후드를 가지고 있다면…</li>\n<li>아니면 비가 내리지 않고 일하는 날이 아니라면 준비되었는지 말해줍니다</li>\n</ul>\n<p>위 파이썬 코드는 버그가 있을뿐만 아니라 읽기에도 힘듭니다. 괄호를 추가해서 두 가지의 문제점을 해결해 보겠습니다:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">prepared_for_weather = have_umbrella <span class=\"keyword\">or</span> (rain_level &lt; <span class=\"number\">5</span> <span class=\"keyword\">and</span> have_hood) <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> (rain_level &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> is_workday)</span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"parentheses\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#parentheses-1\"><i class=\"fa fa-eye\"></i>Single_parenthese</a></li><li class=\"tab\"><a href=\"#parentheses-2\"><i class=\"fa fa-eye\"></i>More_parenthese</a></li><li class=\"tab\"><a href=\"#parentheses-3\"><i class=\"fa fa-eye\"></i>Multiple_lines</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"parentheses-1\"><div class=\"note primary no-icon\">\n            <p>각각 괄호로 묶어 주겠습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">prepared_for_weather = have_umbrella <span class=\"keyword\">or</span> (rain_level &lt; <span class=\"number\">5</span> <span class=\"keyword\">and</span> have_hood) <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> (rain_level &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> is_workday)</span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"parentheses-2\"><div class=\"note primary no-icon\">\n            <p>가독성을 높이기 위해 괄호를 더 사용해도 좋습니다</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">prepared_for_weather = have_umbrella <span class=\"keyword\">or</span> ((rain_level &lt; <span class=\"number\">5</span>) <span class=\"keyword\">and</span> have_hood) <span class=\"keyword\">or</span> (<span class=\"keyword\">not</span> (rain_level &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> is_workday))</span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"parentheses-3\"><div class=\"note primary no-icon\">\n            <p>혹은 위에서 언급한 3가지 조건을 강조하기 위해 여러 줄로 작성해도 됩니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">prepared_for_weather = (</span><br><span class=\"line\">  have_umbrella</span><br><span class=\"line\">  <span class=\"keyword\">or</span> ((rain_level &lt; <span class=\"number\">5</span>) <span class=\"keyword\">and</span> have_hood)</span><br><span class=\"line\">  <span class=\"keyword\">or</span> (<span class=\"keyword\">not</span> (rain_level &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> is_workday))</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<p><br><br><br></p>\n<h1 id=\"조건문-Conditionals\"><a href=\"#조건문-Conditionals\" class=\"headerlink\" title=\"조건문(Conditionals)\"></a>조건문(Conditionals)</h1><p>불리언(boolean)은 그 자체만으로도 매우 유용하지만 <code>if</code>, <code>elif</code>, <code>else</code> 키워드를 사용하는 조건문과 함께 사용되면 진가를 발휘됩니다.</p>\n<p>조건문 혹은, <code>if-then</code> 문을 사용하면 프로그래머는 일정 불리언 조건(참/거짓 조건)에 따라 특정 코드를 실행할 수 있게 됩니다. 파이썬 조건문의 기본 예제는 다음과 같습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inspect</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(x, <span class=\"string\">\"is zero\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(x, <span class=\"string\">\"is positive\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> x &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(x, <span class=\"string\">\"is negative\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(x, <span class=\"string\">\"is unlike anything I've ever seen...\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">inspect(<span class=\"number\">0</span>)</span><br><span class=\"line\">inspect(<span class=\"number\">-15</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0 is zero</span><br><span class=\"line\">-15 is negative</span><br></pre></td></tr></table></figure>\n\n<p>파이썬의 <code>if</code>와 <code>else</code>는 다른 언어에서 주로 사용하는 것과 같습니다; <code>elif</code> 는 조금 독특한 키워드로 <code>else if</code> 를 축약한 단어입니다. 조건문에서 <code>elif</code> 와 <code>else</code> 는 선택사항입니다. <code>elif</code> 는 얼마든지 추가하고 싶은만큼 추가하실 수 있습니다.</p>\n<p>콜론(<code>:</code>)과 공백을 사용하여 별도의 코드 블록을 나타내는 것을 기억하시길 바랍니다. 이는 함수를 정의 할 때와 유사합니다; 함수의 헤더는 <code>:</code>로 끝나고 다음 줄은 4칸 들여 쓰기됩니다. 모든 들여쓰기 된 줄들은 다음 <u>들여쓰기가 안된 줄</u>을 만날 때까지 하나의 함수에 속하게 됩니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"Only printed when x is positive; x =\"</span>, x)</span><br><span class=\"line\">        print(<span class=\"string\">\"Also only printed when x is positive; x =\"</span>, x)</span><br><span class=\"line\">    print(<span class=\"string\">\"Always printed, regardless of x's value; x =\"</span>, x)</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>)</span><br><span class=\"line\">f(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Only printed when x is positive; x = 1</span><br><span class=\"line\">Also only printed when x is positive; x = 1</span><br><span class=\"line\">Always printed, regardless of x&apos;s value; x = 1</span><br><span class=\"line\">Always printed, regardless of x&apos;s value; x = 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"불리언-변환-Boolean-conversion\"><a href=\"#불리언-변환-Boolean-conversion\" class=\"headerlink\" title=\"불리언 변환(Boolean conversion)\"></a>불리언 변환(Boolean conversion)</h2><p>우리는 앞서 int 형으로 바꿔주는 <code>int()</code> 와, float 형으로 바꾸는 <code>float()</code> 봤기 때문에, bool 형으로 바꿔주는 <code>bool()</code> 이라는 함수가 있다는 것이 별로 놀랍지 않습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(bool(<span class=\"number\">1</span>)) <span class=\"comment\"># all numbers are treated as true, except 0</span></span><br><span class=\"line\">print(bool(<span class=\"number\">0</span>))</span><br><span class=\"line\">print(bool(<span class=\"string\">\"asf\"</span>)) <span class=\"comment\"># all strings are treated as true, except the empty string \"\"</span></span><br><span class=\"line\">print(bool(<span class=\"string\">\"\"</span>))</span><br><span class=\"line\"><span class=\"comment\"># Generally empty sequences (strings, lists, and other types we've yet to see like lists and tuples)</span></span><br><span class=\"line\"><span class=\"comment\"># are \"falsey\" and the rest are \"truthy\"</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">True</span><br><span class=\"line\">False</span><br><span class=\"line\">True</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure>\n\n<p>boolean이 예상되는 조건문에서 non-boolean 객체를 사용할 수 있습니다. 파이썬은 암시적으로 그에 상응하는 boolean 값으로 처리 할 것입니다 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    print(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"string\">\"spam\"</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"spam\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">spam</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"조건식-일명-‘삼항연산-ternary-’\"><a href=\"#조건식-일명-‘삼항연산-ternary-’\" class=\"headerlink\" title=\"조건식(일명 ‘삼항연산(ternary)’)\"></a>조건식(일명 ‘삼항연산(ternary)’)</h2><p>어떤 조건에 따라 두 개의 값 중 하나를 변수의 값으로 설정하는 것은 매우 흔한 패턴입니다.</p>\n<div class=\"note \">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quiz_message</span><span class=\"params\">(grade)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> grade &lt; <span class=\"number\">50</span>:</span><br><span class=\"line\">      outcome = <span class=\"string\">'failed'</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      outcome = <span class=\"string\">'passed'</span></span><br><span class=\"line\">  print(<span class=\"string\">'You'</span>, outcome, <span class=\"string\">'the quiz with a grade of'</span>, grade)</span><br><span class=\"line\"></span><br><span class=\"line\">quiz_message(<span class=\"number\">80</span>)</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">You passed the quiz with a grade of 80</span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>파이썬에는 이러한 경우에 문장을 단순화 시킬 수 있는 단일 라인 조건식 구문(syntax)을 지원합니다.</p>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quiz_message</span><span class=\"params\">(grade)</span>:</span></span><br><span class=\"line\">    outcome = <span class=\"string\">'failed'</span> <span class=\"keyword\">if</span> grade &lt; <span class=\"number\">50</span> <span class=\"keyword\">else</span> <span class=\"string\">'passed'</span></span><br><span class=\"line\">    print(<span class=\"string\">'You'</span>, outcome, <span class=\"string\">'the quiz with a grade of'</span>, grade)</span><br><span class=\"line\"></span><br><span class=\"line\">quiz_message(<span class=\"number\">45</span>)</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">You failed the quiz with a grade of 45</span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>보시면 다른 언어에 있는 삼항 연산자와 비슷하다는 것을 알 수 있습니다. 예를 들어, javascript에서 라면 우리는 위의 표현을 <code>var outcome = grade &lt;50? &#39;failed&#39;: &#39;passed&#39;</code> 로 작성할 것입니다. (하지만 가독성 측면에서 파이썬이 더 우수하다고 생각합니다.)</p>\n<p><br><br><br></p>\n<h1 id=\"연습문제-Your-Turn\"><a href=\"#연습문제-Your-Turn\" class=\"headerlink\" title=\"연습문제(Your Turn)\"></a>연습문제(Your Turn)</h1><p>booleans and conditionals -&gt; <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE2NQ==\" title=\"https://www.kaggle.com/kernels/fork/1275165\">third Python programming exercise<i class=\"fa fa-external-link\"></i></span></strong></p>\n"},{"title":"(Hexo_NexT_Theme) Hexo SEO - 검색 엔진 최적화","date":"2019-07-17T04:10:11.000Z","subtitle":"Hexo-next-theme 설정","_content":"\n{% note info %}\n지금 이 순간에도 전세계적으로 수 많은 웹사이트, 웹페이지가 생성되기 때문에 그 중 나의 블로그를 혼자서 다른 사람들에게 노출시키는 것은 매우 어렵습니다.\n사람들이 많이 찾는 곳, 즉 트래픽이 많이 몰리는 곳에 위치해야 사람들이 스쳐지나가기라도 하지 않을까요?\n그렇다면 사람들이 무언가를 검색하고자 할때, 주로 어디를 찾을까요?\n한국의 경우 네이버, 대부분의 해외에서는 구글을 가장 먼저 떠올릴 것입니다.\n{% endnote %}\n----\n\n# SEO(Search Engine Optimization)\n\nSEO 즉, 검색엔진 최적화란 무엇인지 왜 중요한지에 대해 간단히 알아보겠습니다.\n\n## What is SEO\n\n{% note default %}\n**검색엔진 최적화** 란, 검색엔진이 자료를 수집하고 순위를 매기는 방식 및 알고리즘에 맞게 웹 페이지를 구성하여 검색 결과 상위에 나올 수 있도록 하는 작업을 말합니다.\n\n> 검색엔진 알고리즘은 사이트 회사의 핵심 보안 사항으로 정확하게 알 수 있는 방법이 없다고 합니다. 즉, 구글과 네이버의 검색엔진 알고리즘이 다르기 때문에 우선순위나 배치가 다른 기준을 적용합니다. 다만 사람들이 오랫동안 검색엔진을 연구한 결과들로 최적화에 대한 다양한 방법론이 소개되고 있을 뿐입니다.\n\n{% endnote %}\n\n## Why SEO\n\n{% fi /img/Ads_SEO.png, Ads vs SEO,,, 80% %}\n\n{% label danger@검색광고(Ads) %}를 사용한다면 검색엔진의 상단에 노출되어 상대적으로 유리하지만 사용자가 광고를 클릭할 때마다 비용이 발생합니다.\n개인적으로 소소하게 웹페이지를 운영하는 저희에게는 부담이되는 것은 사실입니다.\n\n반면 {% label success@SEO, 검색엔진 최적화 %}를 통해 비용을 들이지 않고 자연스럽게 검색엔진 사용자들을 사이트로 접근하게 유도할 수 있습니다.\n물론 검색광고에 비해 즉각적인 피드백 없이 긴 시간의 기다림이 필요할 수도 있습니다. (꾸준히 관리하다보면 언젠가는 찾는 사람이 많아 지겠죠!)\n\n<br>\n\n{% note info %}\n제가 사용하는 Hexo에도 SEO와 관련된 플러그인이 많이 있습니다.\n제 블로그에 적용시킨 플러그인들을 소개시켜 드리겠습니다.\n{% endnote %}\n\n# Hexo-Plugin\n\n제가 사용하는 Hexo-NexT-Theme 에는 기본적인 SEO 설정을 간편하게 해주는 기능을 제공하고 있습니다.\n`자세한 설명은 https://theme-next.org/docs/theme-settings/seo 에서 확인할 수 있습니다`\n{% label primary@theme config file %} 즉, 테마가 설치된 경로의 `_config.yml` 에서 SEO 를 검색하면 보실 수 있습니다.\n{% fi /img/seo_setting.png,,, 70% %}\n\n자동으로 표준 링크를 생성해주는 **canonical**, 검색엔진 최적화를 위한 **seo** 기능을 활성화 했습니다.\n그리고 블로그의 포스트들에 있는 외부 링크들이 크롤러에 의해 수집되지 않도록 (nofollow 속성과 비슷) **exturl** 기능도 활성화 했습니다.\n\n구글의 웹마스터(webmaster)를 사용했지만 이미지에서는 verification key 값은 지웠습니다.\n아래는 구글 검색엔진의 원활한 크롤링을 위해 추가로 설치한 RSS, sitemap, robotstxt 설치방법 입니다.\n\n## hexo-generator-feed\n\n**npm (Node Package Manager)** 으로 편하게 설치할 수 있습니다.\n\n**설치**\n\n{% code lang:termial %}\nnpm install hexo-generator-feed --save\n{% endcode %}\n\n**사용**\n{% label info@site config file %}인 `_config.yml` 에 파일을 아래 내용을 추가합니다.\n피드의 종류를 정할 수 있는데 만약 네이터 웹마스터툴을 사용하실 계획이라면 default 인 Atom 말고 RSS2를 권장합니다.\n\n{% code lang:termial %}\nfeed:\n  type: rss2     #피드의 종류(atom/rss2)\n  path: rss2.xml  #피드가 생성될 경로\n  limit: 20      #최신 포스트의 개수(0 또는 false 설정시 모든 포스트)\n{% endcode %}\n\n\n## hexo-generator-seo-friendly-sitemap\n\n**설치**\n\n{% code lang:termial %}\nnpm install hexo-generator-seo-friendly-sitemap --save\n{% endcode %}\n\n**사용**\n똑같이 {% label info@site config file %}인 `_config.yml` 에 파일을 아래 내용을 추가합니다.\n\n{% code lang:termial %}\nsitemap:\n  path: sitemap.xml   #생성될 경로\n  tag: false          #sitemap에 tag 포함 여부\n  category: false     #sitemap에 category 포함 여부\n{% endcode %}\n\n\n## hexo-generator-robotstxt\n\n**설치**\n\n{% code lang:termial %}\nnpm install hexo-generator-robotstxt --save\n{% endcode %}\n\n**사용**\n똑같이 {% label info@site config file %}인 `_config.yml` 에 파일을 아래 내용을 추가합니다.\n\n{% code lang:termial %}\nrobotstxt:\n  useragent: \"*\"\n  allow:\n    - /\n  sitemap:\n{% endcode %}\n\n<br><br>\n# Sign up for Google Search console\n\n{% fi /img/signUp_url.png,,, 60% %}\n\n<p style=\"text-align:center;\">블로그의 주소를 입력하고 넘어갑니다</p>\n\n{% fi /img/url_config.png,,, 60% %}\n\nHTML태그의 content 안의 내용을 앞서 설명한 `_config.yml` 파일 안의 `google_site_verification` 옆에 붙여 넣습니다\n\n이제 터미널에서 **generate** 하고 **deploy** 해주시면 됩니다\n\n{% code lang:terminal %}\nhexo g -d\n{% endcode %}\n\n<p style=\"text-align:center;\">RSS와 sitemap이 등록되 있는 것을 확인할 수 있습니다</p>\n\n{% fi /img/sitemap.png %}\n\n\n<br><br>\n\n# Reference\n\n[Hexo SEO - 하루 만에 검색 엔진 최적화 시키기](https://iseongho.github.io/posts/hexo-seo)\n","source":"_posts/20190717-hexo-seo.md","raw":"---\ntitle: (Hexo_NexT_Theme) Hexo SEO - 검색 엔진 최적화\ndate: 2019-07-17 13:10:11\ncategories:\n  - BLOG\n  - HEXO-NEXT-THEME\ntags: [헥소, 블로그, SEO, 테마, hexo, blog, next-theme, github page]\nsubtitle: Hexo-next-theme 설정\n---\n\n{% note info %}\n지금 이 순간에도 전세계적으로 수 많은 웹사이트, 웹페이지가 생성되기 때문에 그 중 나의 블로그를 혼자서 다른 사람들에게 노출시키는 것은 매우 어렵습니다.\n사람들이 많이 찾는 곳, 즉 트래픽이 많이 몰리는 곳에 위치해야 사람들이 스쳐지나가기라도 하지 않을까요?\n그렇다면 사람들이 무언가를 검색하고자 할때, 주로 어디를 찾을까요?\n한국의 경우 네이버, 대부분의 해외에서는 구글을 가장 먼저 떠올릴 것입니다.\n{% endnote %}\n----\n\n# SEO(Search Engine Optimization)\n\nSEO 즉, 검색엔진 최적화란 무엇인지 왜 중요한지에 대해 간단히 알아보겠습니다.\n\n## What is SEO\n\n{% note default %}\n**검색엔진 최적화** 란, 검색엔진이 자료를 수집하고 순위를 매기는 방식 및 알고리즘에 맞게 웹 페이지를 구성하여 검색 결과 상위에 나올 수 있도록 하는 작업을 말합니다.\n\n> 검색엔진 알고리즘은 사이트 회사의 핵심 보안 사항으로 정확하게 알 수 있는 방법이 없다고 합니다. 즉, 구글과 네이버의 검색엔진 알고리즘이 다르기 때문에 우선순위나 배치가 다른 기준을 적용합니다. 다만 사람들이 오랫동안 검색엔진을 연구한 결과들로 최적화에 대한 다양한 방법론이 소개되고 있을 뿐입니다.\n\n{% endnote %}\n\n## Why SEO\n\n{% fi /img/Ads_SEO.png, Ads vs SEO,,, 80% %}\n\n{% label danger@검색광고(Ads) %}를 사용한다면 검색엔진의 상단에 노출되어 상대적으로 유리하지만 사용자가 광고를 클릭할 때마다 비용이 발생합니다.\n개인적으로 소소하게 웹페이지를 운영하는 저희에게는 부담이되는 것은 사실입니다.\n\n반면 {% label success@SEO, 검색엔진 최적화 %}를 통해 비용을 들이지 않고 자연스럽게 검색엔진 사용자들을 사이트로 접근하게 유도할 수 있습니다.\n물론 검색광고에 비해 즉각적인 피드백 없이 긴 시간의 기다림이 필요할 수도 있습니다. (꾸준히 관리하다보면 언젠가는 찾는 사람이 많아 지겠죠!)\n\n<br>\n\n{% note info %}\n제가 사용하는 Hexo에도 SEO와 관련된 플러그인이 많이 있습니다.\n제 블로그에 적용시킨 플러그인들을 소개시켜 드리겠습니다.\n{% endnote %}\n\n# Hexo-Plugin\n\n제가 사용하는 Hexo-NexT-Theme 에는 기본적인 SEO 설정을 간편하게 해주는 기능을 제공하고 있습니다.\n`자세한 설명은 https://theme-next.org/docs/theme-settings/seo 에서 확인할 수 있습니다`\n{% label primary@theme config file %} 즉, 테마가 설치된 경로의 `_config.yml` 에서 SEO 를 검색하면 보실 수 있습니다.\n{% fi /img/seo_setting.png,,, 70% %}\n\n자동으로 표준 링크를 생성해주는 **canonical**, 검색엔진 최적화를 위한 **seo** 기능을 활성화 했습니다.\n그리고 블로그의 포스트들에 있는 외부 링크들이 크롤러에 의해 수집되지 않도록 (nofollow 속성과 비슷) **exturl** 기능도 활성화 했습니다.\n\n구글의 웹마스터(webmaster)를 사용했지만 이미지에서는 verification key 값은 지웠습니다.\n아래는 구글 검색엔진의 원활한 크롤링을 위해 추가로 설치한 RSS, sitemap, robotstxt 설치방법 입니다.\n\n## hexo-generator-feed\n\n**npm (Node Package Manager)** 으로 편하게 설치할 수 있습니다.\n\n**설치**\n\n{% code lang:termial %}\nnpm install hexo-generator-feed --save\n{% endcode %}\n\n**사용**\n{% label info@site config file %}인 `_config.yml` 에 파일을 아래 내용을 추가합니다.\n피드의 종류를 정할 수 있는데 만약 네이터 웹마스터툴을 사용하실 계획이라면 default 인 Atom 말고 RSS2를 권장합니다.\n\n{% code lang:termial %}\nfeed:\n  type: rss2     #피드의 종류(atom/rss2)\n  path: rss2.xml  #피드가 생성될 경로\n  limit: 20      #최신 포스트의 개수(0 또는 false 설정시 모든 포스트)\n{% endcode %}\n\n\n## hexo-generator-seo-friendly-sitemap\n\n**설치**\n\n{% code lang:termial %}\nnpm install hexo-generator-seo-friendly-sitemap --save\n{% endcode %}\n\n**사용**\n똑같이 {% label info@site config file %}인 `_config.yml` 에 파일을 아래 내용을 추가합니다.\n\n{% code lang:termial %}\nsitemap:\n  path: sitemap.xml   #생성될 경로\n  tag: false          #sitemap에 tag 포함 여부\n  category: false     #sitemap에 category 포함 여부\n{% endcode %}\n\n\n## hexo-generator-robotstxt\n\n**설치**\n\n{% code lang:termial %}\nnpm install hexo-generator-robotstxt --save\n{% endcode %}\n\n**사용**\n똑같이 {% label info@site config file %}인 `_config.yml` 에 파일을 아래 내용을 추가합니다.\n\n{% code lang:termial %}\nrobotstxt:\n  useragent: \"*\"\n  allow:\n    - /\n  sitemap:\n{% endcode %}\n\n<br><br>\n# Sign up for Google Search console\n\n{% fi /img/signUp_url.png,,, 60% %}\n\n<p style=\"text-align:center;\">블로그의 주소를 입력하고 넘어갑니다</p>\n\n{% fi /img/url_config.png,,, 60% %}\n\nHTML태그의 content 안의 내용을 앞서 설명한 `_config.yml` 파일 안의 `google_site_verification` 옆에 붙여 넣습니다\n\n이제 터미널에서 **generate** 하고 **deploy** 해주시면 됩니다\n\n{% code lang:terminal %}\nhexo g -d\n{% endcode %}\n\n<p style=\"text-align:center;\">RSS와 sitemap이 등록되 있는 것을 확인할 수 있습니다</p>\n\n{% fi /img/sitemap.png %}\n\n\n<br><br>\n\n# Reference\n\n[Hexo SEO - 하루 만에 검색 엔진 최적화 시키기](https://iseongho.github.io/posts/hexo-seo)\n","slug":"hexo-seo","published":1,"updated":"2019-07-18T02:29:20.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt86r002g2646w0th1gxw","content":"<div class=\"note info\">\n            <p>지금 이 순간에도 전세계적으로 수 많은 웹사이트, 웹페이지가 생성되기 때문에 그 중 나의 블로그를 혼자서 다른 사람들에게 노출시키는 것은 매우 어렵습니다.<br>사람들이 많이 찾는 곳, 즉 트래픽이 많이 몰리는 곳에 위치해야 사람들이 스쳐지나가기라도 하지 않을까요?<br>그렇다면 사람들이 무언가를 검색하고자 할때, 주로 어디를 찾을까요?<br>한국의 경우 네이버, 대부분의 해외에서는 구글을 가장 먼저 떠올릴 것입니다.</p>\n          </div>\n<hr>\n<h1 id=\"SEO-Search-Engine-Optimization\"><a href=\"#SEO-Search-Engine-Optimization\" class=\"headerlink\" title=\"SEO(Search Engine Optimization)\"></a>SEO(Search Engine Optimization)</h1><p>SEO 즉, 검색엔진 최적화란 무엇인지 왜 중요한지에 대해 간단히 알아보겠습니다.</p>\n<h2 id=\"What-is-SEO\"><a href=\"#What-is-SEO\" class=\"headerlink\" title=\"What is SEO\"></a>What is SEO</h2><div class=\"note default\">\n            <p><strong>검색엔진 최적화</strong> 란, 검색엔진이 자료를 수집하고 순위를 매기는 방식 및 알고리즘에 맞게 웹 페이지를 구성하여 검색 결과 상위에 나올 수 있도록 하는 작업을 말합니다.</p><blockquote><p>검색엔진 알고리즘은 사이트 회사의 핵심 보안 사항으로 정확하게 알 수 있는 방법이 없다고 합니다. 즉, 구글과 네이버의 검색엔진 알고리즘이 다르기 때문에 우선순위나 배치가 다른 기준을 적용합니다. 다만 사람들이 오랫동안 검색엔진을 연구한 결과들로 최적화에 대한 다양한 방법론이 소개되고 있을 뿐입니다.</p></blockquote>\n          </div>\n\n<h2 id=\"Why-SEO\"><a href=\"#Why-SEO\" class=\"headerlink\" title=\"Why SEO\"></a>Why SEO</h2><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"Ads vs SEO\" data-src=\"/img/Ads_SEO.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<span class=\"label danger\">검색광고(Ads)</span>를 사용한다면 검색엔진의 상단에 노출되어 상대적으로 유리하지만 사용자가 광고를 클릭할 때마다 비용이 발생합니다.\n<p>개인적으로 소소하게 웹페이지를 운영하는 저희에게는 부담이되는 것은 사실입니다.</p>\n<p>반면 <span class=\"label success\">SEO, 검색엔진 최적화</span>를 통해 비용을 들이지 않고 자연스럽게 검색엔진 사용자들을 사이트로 접근하게 유도할 수 있습니다.<br>물론 검색광고에 비해 즉각적인 피드백 없이 긴 시간의 기다림이 필요할 수도 있습니다. (꾸준히 관리하다보면 언젠가는 찾는 사람이 많아 지겠죠!)</p>\n<br>\n\n<div class=\"note info\">\n            <p>제가 사용하는 Hexo에도 SEO와 관련된 플러그인이 많이 있습니다.<br>제 블로그에 적용시킨 플러그인들을 소개시켜 드리겠습니다.</p>\n          </div>\n\n<h1 id=\"Hexo-Plugin\"><a href=\"#Hexo-Plugin\" class=\"headerlink\" title=\"Hexo-Plugin\"></a>Hexo-Plugin</h1><p>제가 사용하는 Hexo-NexT-Theme 에는 기본적인 SEO 설정을 간편하게 해주는 기능을 제공하고 있습니다.<br><code>자세한 설명은 https://theme-next.org/docs/theme-settings/seo 에서 확인할 수 있습니다</code></p>\n<span class=\"label primary\">theme config file</span> 즉, 테마가 설치된 경로의 `_config.yml` 에서 SEO 를 검색하면 보실 수 있습니다.\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" style=\"max-width: none; width: 70%;\" data-src=\"/img/seo_setting.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<p>자동으로 표준 링크를 생성해주는 <strong>canonical</strong>, 검색엔진 최적화를 위한 <strong>seo</strong> 기능을 활성화 했습니다.<br>그리고 블로그의 포스트들에 있는 외부 링크들이 크롤러에 의해 수집되지 않도록 (nofollow 속성과 비슷) <strong>exturl</strong> 기능도 활성화 했습니다.</p>\n<p>구글의 웹마스터(webmaster)를 사용했지만 이미지에서는 verification key 값은 지웠습니다.<br>아래는 구글 검색엔진의 원활한 크롤링을 위해 추가로 설치한 RSS, sitemap, robotstxt 설치방법 입니다.</p>\n<h2 id=\"hexo-generator-feed\"><a href=\"#hexo-generator-feed\" class=\"headerlink\" title=\"hexo-generator-feed\"></a>hexo-generator-feed</h2><p><strong>npm (Node Package Manager)</strong> 으로 편하게 설치할 수 있습니다.</p>\n<p><strong>설치</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>사용</strong></p>\n<span class=\"label info\">site config file</span>인 `_config.yml` 에 파일을 아래 내용을 추가합니다.\n<p>피드의 종류를 정할 수 있는데 만약 네이터 웹마스터툴을 사용하실 계획이라면 default 인 Atom 말고 RSS2를 권장합니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">  type: rss2     #피드의 종류(atom/rss2)</span><br><span class=\"line\">  path: rss2.xml  #피드가 생성될 경로</span><br><span class=\"line\">  limit: 20      #최신 포스트의 개수(0 또는 false 설정시 모든 포스트)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"hexo-generator-seo-friendly-sitemap\"><a href=\"#hexo-generator-seo-friendly-sitemap\" class=\"headerlink\" title=\"hexo-generator-seo-friendly-sitemap\"></a>hexo-generator-seo-friendly-sitemap</h2><p><strong>설치</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>사용</strong><br>똑같이 <span class=\"label info\">site config file</span>인 <code>_config.yml</code> 에 파일을 아래 내용을 추가합니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml   #생성될 경로</span><br><span class=\"line\">  tag: false          #sitemap에 tag 포함 여부</span><br><span class=\"line\">  category: false     #sitemap에 category 포함 여부</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"hexo-generator-robotstxt\"><a href=\"#hexo-generator-robotstxt\" class=\"headerlink\" title=\"hexo-generator-robotstxt\"></a>hexo-generator-robotstxt</h2><p><strong>설치</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-robotstxt --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>사용</strong><br>똑같이 <span class=\"label info\">site config file</span>인 <code>_config.yml</code> 에 파일을 아래 내용을 추가합니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">robotstxt:</span><br><span class=\"line\">  useragent: &quot;*&quot;</span><br><span class=\"line\">  allow:</span><br><span class=\"line\">    - /</span><br><span class=\"line\">  sitemap:</span><br></pre></td></tr></table></figure>\n\n<p><br><br></p>\n<h1 id=\"Sign-up-for-Google-Search-console\"><a href=\"#Sign-up-for-Google-Search-console\" class=\"headerlink\" title=\"Sign up for Google Search console\"></a>Sign up for Google Search console</h1><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" style=\"max-width: none; width: 60%;\" data-src=\"/img/signUp_url.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<p style=\"text-align:center;\">블로그의 주소를 입력하고 넘어갑니다</p>\n\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" style=\"max-width: none; width: 60%;\" data-src=\"/img/url_config.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<p>HTML태그의 content 안의 내용을 앞서 설명한 <code>_config.yml</code> 파일 안의 <code>google_site_verification</code> 옆에 붙여 넣습니다</p>\n<p>이제 터미널에서 <strong>generate</strong> 하고 <strong>deploy</strong> 해주시면 됩니다</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n\n<p style=\"text-align:center;\">RSS와 sitemap이 등록되 있는 것을 확인할 수 있습니다</p>\n\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/sitemap.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n\n<p><br><br></p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc2Vvbmdoby5naXRodWIuaW8vcG9zdHMvaGV4by1zZW8=\" title=\"https://iseongho.github.io/posts/hexo-seo\">Hexo SEO - 하루 만에 검색 엔진 최적화 시키기<i class=\"fa fa-external-link\"></i></span></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<div class=\"note info\">\n            <p>지금 이 순간에도 전세계적으로 수 많은 웹사이트, 웹페이지가 생성되기 때문에 그 중 나의 블로그를 혼자서 다른 사람들에게 노출시키는 것은 매우 어렵습니다.<br>사람들이 많이 찾는 곳, 즉 트래픽이 많이 몰리는 곳에 위치해야 사람들이 스쳐지나가기라도 하지 않을까요?<br>그렇다면 사람들이 무언가를 검색하고자 할때, 주로 어디를 찾을까요?<br>한국의 경우 네이버, 대부분의 해외에서는 구글을 가장 먼저 떠올릴 것입니다.</p>\n          </div>\n<hr>\n<h1 id=\"SEO-Search-Engine-Optimization\"><a href=\"#SEO-Search-Engine-Optimization\" class=\"headerlink\" title=\"SEO(Search Engine Optimization)\"></a>SEO(Search Engine Optimization)</h1><p>SEO 즉, 검색엔진 최적화란 무엇인지 왜 중요한지에 대해 간단히 알아보겠습니다.</p>\n<h2 id=\"What-is-SEO\"><a href=\"#What-is-SEO\" class=\"headerlink\" title=\"What is SEO\"></a>What is SEO</h2><div class=\"note default\">\n            <p><strong>검색엔진 최적화</strong> 란, 검색엔진이 자료를 수집하고 순위를 매기는 방식 및 알고리즘에 맞게 웹 페이지를 구성하여 검색 결과 상위에 나올 수 있도록 하는 작업을 말합니다.</p><blockquote><p>검색엔진 알고리즘은 사이트 회사의 핵심 보안 사항으로 정확하게 알 수 있는 방법이 없다고 합니다. 즉, 구글과 네이버의 검색엔진 알고리즘이 다르기 때문에 우선순위나 배치가 다른 기준을 적용합니다. 다만 사람들이 오랫동안 검색엔진을 연구한 결과들로 최적화에 대한 다양한 방법론이 소개되고 있을 뿐입니다.</p></blockquote>\n          </div>\n\n<h2 id=\"Why-SEO\"><a href=\"#Why-SEO\" class=\"headerlink\" title=\"Why SEO\"></a>Why SEO</h2><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"Ads vs SEO\" data-src=\"/img/Ads_SEO.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<span class=\"label danger\">검색광고(Ads)</span>를 사용한다면 검색엔진의 상단에 노출되어 상대적으로 유리하지만 사용자가 광고를 클릭할 때마다 비용이 발생합니다.\n<p>개인적으로 소소하게 웹페이지를 운영하는 저희에게는 부담이되는 것은 사실입니다.</p>\n<p>반면 <span class=\"label success\">SEO, 검색엔진 최적화</span>를 통해 비용을 들이지 않고 자연스럽게 검색엔진 사용자들을 사이트로 접근하게 유도할 수 있습니다.<br>물론 검색광고에 비해 즉각적인 피드백 없이 긴 시간의 기다림이 필요할 수도 있습니다. (꾸준히 관리하다보면 언젠가는 찾는 사람이 많아 지겠죠!)</p>\n<br>\n\n<div class=\"note info\">\n            <p>제가 사용하는 Hexo에도 SEO와 관련된 플러그인이 많이 있습니다.<br>제 블로그에 적용시킨 플러그인들을 소개시켜 드리겠습니다.</p>\n          </div>\n\n<h1 id=\"Hexo-Plugin\"><a href=\"#Hexo-Plugin\" class=\"headerlink\" title=\"Hexo-Plugin\"></a>Hexo-Plugin</h1><p>제가 사용하는 Hexo-NexT-Theme 에는 기본적인 SEO 설정을 간편하게 해주는 기능을 제공하고 있습니다.<br><code>자세한 설명은 https://theme-next.org/docs/theme-settings/seo 에서 확인할 수 있습니다</code></p>\n<span class=\"label primary\">theme config file</span> 즉, 테마가 설치된 경로의 `_config.yml` 에서 SEO 를 검색하면 보실 수 있습니다.\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" style=\"max-width: none; width: 70%;\" data-src=\"/img/seo_setting.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<p>자동으로 표준 링크를 생성해주는 <strong>canonical</strong>, 검색엔진 최적화를 위한 <strong>seo</strong> 기능을 활성화 했습니다.<br>그리고 블로그의 포스트들에 있는 외부 링크들이 크롤러에 의해 수집되지 않도록 (nofollow 속성과 비슷) <strong>exturl</strong> 기능도 활성화 했습니다.</p>\n<p>구글의 웹마스터(webmaster)를 사용했지만 이미지에서는 verification key 값은 지웠습니다.<br>아래는 구글 검색엔진의 원활한 크롤링을 위해 추가로 설치한 RSS, sitemap, robotstxt 설치방법 입니다.</p>\n<h2 id=\"hexo-generator-feed\"><a href=\"#hexo-generator-feed\" class=\"headerlink\" title=\"hexo-generator-feed\"></a>hexo-generator-feed</h2><p><strong>npm (Node Package Manager)</strong> 으로 편하게 설치할 수 있습니다.</p>\n<p><strong>설치</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>사용</strong></p>\n<span class=\"label info\">site config file</span>인 `_config.yml` 에 파일을 아래 내용을 추가합니다.\n<p>피드의 종류를 정할 수 있는데 만약 네이터 웹마스터툴을 사용하실 계획이라면 default 인 Atom 말고 RSS2를 권장합니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">  type: rss2     #피드의 종류(atom/rss2)</span><br><span class=\"line\">  path: rss2.xml  #피드가 생성될 경로</span><br><span class=\"line\">  limit: 20      #최신 포스트의 개수(0 또는 false 설정시 모든 포스트)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"hexo-generator-seo-friendly-sitemap\"><a href=\"#hexo-generator-seo-friendly-sitemap\" class=\"headerlink\" title=\"hexo-generator-seo-friendly-sitemap\"></a>hexo-generator-seo-friendly-sitemap</h2><p><strong>설치</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>사용</strong><br>똑같이 <span class=\"label info\">site config file</span>인 <code>_config.yml</code> 에 파일을 아래 내용을 추가합니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml   #생성될 경로</span><br><span class=\"line\">  tag: false          #sitemap에 tag 포함 여부</span><br><span class=\"line\">  category: false     #sitemap에 category 포함 여부</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"hexo-generator-robotstxt\"><a href=\"#hexo-generator-robotstxt\" class=\"headerlink\" title=\"hexo-generator-robotstxt\"></a>hexo-generator-robotstxt</h2><p><strong>설치</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-robotstxt --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>사용</strong><br>똑같이 <span class=\"label info\">site config file</span>인 <code>_config.yml</code> 에 파일을 아래 내용을 추가합니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">robotstxt:</span><br><span class=\"line\">  useragent: &quot;*&quot;</span><br><span class=\"line\">  allow:</span><br><span class=\"line\">    - /</span><br><span class=\"line\">  sitemap:</span><br></pre></td></tr></table></figure>\n\n<p><br><br></p>\n<h1 id=\"Sign-up-for-Google-Search-console\"><a href=\"#Sign-up-for-Google-Search-console\" class=\"headerlink\" title=\"Sign up for Google Search console\"></a>Sign up for Google Search console</h1><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" style=\"max-width: none; width: 60%;\" data-src=\"/img/signUp_url.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<p style=\"text-align:center;\">블로그의 주소를 입력하고 넘어갑니다</p>\n\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" style=\"max-width: none; width: 60%;\" data-src=\"/img/url_config.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<p>HTML태그의 content 안의 내용을 앞서 설명한 <code>_config.yml</code> 파일 안의 <code>google_site_verification</code> 옆에 붙여 넣습니다</p>\n<p>이제 터미널에서 <strong>generate</strong> 하고 <strong>deploy</strong> 해주시면 됩니다</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n\n<p style=\"text-align:center;\">RSS와 sitemap이 등록되 있는 것을 확인할 수 있습니다</p>\n\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/sitemap.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n\n<p><br><br></p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc2Vvbmdoby5naXRodWIuaW8vcG9zdHMvaGV4by1zZW8=\" title=\"https://iseongho.github.io/posts/hexo-seo\">Hexo SEO - 하루 만에 검색 엔진 최적화 시키기<i class=\"fa fa-external-link\"></i></span></p>\n"},{"title":"(Hexo_NexT_Theme) 마우스를 따라 움직이는 배경","date":"2019-07-22T07:52:28.000Z","subtitle":"Hexo-next-theme live2D 적용","_content":"\n{% note info %}\n제 블로그에 적용되어 있는 테마는 Next 입니다. [theme-next](http://theme-next.iissnan.com/)\n틈틈히 테마를 커스터마이즈 하고 있습니다.\n\n이번 포스트에서는 배경에 마우스를 따라 움직이는 캐릭터를 적용하는 방법에 대해 적어 보겠습니다.\n{% endnote %}\n\n------\n\n# 설치(Installation)\n\n\n## hexo-helper-live2d\n\n블로그 디렉토리(기본 `hexo` 디렉토리)에서 Node Package Module(NPM)을 사용하여 `hexo-helper-live2d` 를 설치합니다.\n\n{% note success no-icon %}\n  {% code %}\n  npm install --save hexo-helper-live2d\n  {% endcode %}\n{% endnote %}\n\n\n## live2d-widget-model\n\n> 마음에 드는 모델의 assets을 가져와 적용할 수도 있지만, 그건 다음에 기회가 된다면 시도해 보기로 하겠습니다.\n\n아래의 기본적으로 제공해주는 Live2D 리소스 중에서 마음에 드는 모델을 골라 설치하겠습니다.\n\n{% spoiler 모델_리스트 %}\n  live2d-widget-model-chitose\n  live2d-widget-model-epsilon2_1\n  live2d-widget-model-gf\n  live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)\n  live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)\n  live2d-widget-model-haruto\n  live2d-widget-model-hibiki\n  live2d-widget-model-hijiki\n  live2d-widget-model-izumi\n  live2d-widget-model-koharu\n  live2d-widget-model-miku\n  live2d-widget-model-ni-j\n  live2d-widget-model-nico\n  live2d-widget-model-nietzsche\n  live2d-widget-model-nipsilon\n  live2d-widget-model-nito\n  live2d-widget-model-shizuku\n  live2d-widget-model-tororo\n  live2d-widget-model-tsumiki\n  live2d-widget-model-unitychan\n  live2d-widget-model-wanko\n  live2d-widget-model-z16\n{% endspoiler %}\n\n{% spoiler 모델_이미지_1 %}\n  **epsilon2_1**\n  {% fi /img/gif/Epsilon2.1.gif, epsilon,,, 60% %}\n  **gf**\n  {% fi /img/gif/gf.gif, gf,,, 60% %}\n  **haru**\n  {% fi /img/gif/haru.gif, haru,,, 60% %}\n  **haruto**\n  {% fi /img/gif/haruto.gif, haruto,,, 60% %}\n  **hibiki**\n  {% fi /img/gif/hibiki.gif, hibiki,,, 60% %}\n  **koharu**\n  {% fi /img/gif/koharu.gif, koharu,,, 60% %}\n  **miku**\n  {% fi /img/gif/miku.gif, miku,,, 60% %}\n{% endspoiler %}  \n{% spoiler 모델_이미지_2 %}\n  **ni-j**\n  {% fi /img/gif/ni-j.gif, ni-j,,, 60% %}\n  **nico**\n  {% fi /img/gif/nico.gif, nico,,, 60% %}\n  **nietzche**\n  {% fi /img/gif/nietzche.gif, nietzche,,, 60% %}\n  **nipsilon**\n  {% fi /img/gif/nipsilon.gif, nipsilon,,, 60% %}\n  **nito**\n  {% fi /img/gif/nito.gif, nito,,, 60% %}\n  **shizuku**\n  {% fi /img/gif/shizuku.gif, shizuku,,, 60% %}\n{% endspoiler %}    \n{% spoiler 모델_이미지_3 %}  \n  **tororo**\n  {% fi /img/gif/tororo.gif, tororo,,, 60% %}\n  **tsumiki**\n  {% fi /img/gif/tsumiki.gif, tsumiki,,, 60% %}\n  **Unitychan**\n  {% fi /img/gif/Unitychan.gif, unitychan,,, 60% %}\n  **wanko**\n  {% fi /img/gif/wanko.gif, wanko,,, 60% %}\n  **z16**\n  {% fi /img/gif/z16.gif, z16,,, 60% %}\n{% endspoiler %}\n\n고르셨다면 똑같이 npm을 사용하여 설치해 주도록 하겠습니다.\n\n{% note success no-icon %}\n  {% code %}\n  npm install {your model's package name}\n  {% endcode %}\n  저의 경우 wanko를 선택하였습니다.\n  {% code %}\n  npm install --save live2d-widget-model-wanko\n  {% endcode %}\n{% endnote %}\n\n-----\n\n# 설정(Config setting)\n\n\n블로그의 `_config.yml` 파일 혹은 테마의 `_config.yml` 중 편한 곳에 아래 속성을 추가합니다.\n`model` 의 `use` 부분에 사용할 모델명으로 수정하셔야 합니다.\n\n{% note success no-icon %}\n  {% code lang:yml %}\n  live2d:\n    enable: true\n    scriptFrom: local\n    pluginRootPath: live2dw/\n    pluginJsPath: lib/\n    pluginModelPath: assets/\n    tagMode: false\n    log: false\n    model:\n      use: live2d-widget-model-wanko #설치한 모델을 이곳에서 적용하셔야 합니다\n    display:\n      position: right\n      width: 150\n      height: 300\n    mobile:\n      show: true\n    react:\n      opacity: 0.7\n  {% endcode %}\n{% endnote %}\n\n더 자세한 설명은 깃허브에 가시면 보실 수 있습니다.[Detail settings](https://github.com/EYHN/hexo-helper-live2d#detail-settings)\n\n-----\n\n# 적용(Execute)\n\n`hexo clean` 을 통해 기존 작성되었던 public 폴더를 지워주시고 새롭게 `hexo generate` 실행하셔야 적용되는 것을 확인하실 수 있습니다.\n`hexo server` 로 로컬 환경에서 바로 확인하실 수도 있습니다.\n\n{% note success no-icon %}\n  **koharu** 모델을 한번 적용시켜 보았습니다.\n\n  {% fi /img/live2d_koharu.png, sample,,, 60% %}\n{% endnote %}\n\n<br>\n\n# Reference\n\n[Github : hexo-helper-live2d](https://github.com/EYHN/hexo-helper-live2d)\n","source":"_posts/20190722-hexo-live2d.md","raw":"---\ntitle: (Hexo_NexT_Theme) 마우스를 따라 움직이는 배경\ndate: 2019-07-22 16:52:28\ncategories:\n  - BLOG\n  - HEXO-NEXT-THEME\ntags: [헥소, 블로그, 테마, live2D, 움직이는, 배경, hexo, blog, next-theme, github page]\nsubtitle: Hexo-next-theme live2D 적용\n---\n\n{% note info %}\n제 블로그에 적용되어 있는 테마는 Next 입니다. [theme-next](http://theme-next.iissnan.com/)\n틈틈히 테마를 커스터마이즈 하고 있습니다.\n\n이번 포스트에서는 배경에 마우스를 따라 움직이는 캐릭터를 적용하는 방법에 대해 적어 보겠습니다.\n{% endnote %}\n\n------\n\n# 설치(Installation)\n\n\n## hexo-helper-live2d\n\n블로그 디렉토리(기본 `hexo` 디렉토리)에서 Node Package Module(NPM)을 사용하여 `hexo-helper-live2d` 를 설치합니다.\n\n{% note success no-icon %}\n  {% code %}\n  npm install --save hexo-helper-live2d\n  {% endcode %}\n{% endnote %}\n\n\n## live2d-widget-model\n\n> 마음에 드는 모델의 assets을 가져와 적용할 수도 있지만, 그건 다음에 기회가 된다면 시도해 보기로 하겠습니다.\n\n아래의 기본적으로 제공해주는 Live2D 리소스 중에서 마음에 드는 모델을 골라 설치하겠습니다.\n\n{% spoiler 모델_리스트 %}\n  live2d-widget-model-chitose\n  live2d-widget-model-epsilon2_1\n  live2d-widget-model-gf\n  live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)\n  live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)\n  live2d-widget-model-haruto\n  live2d-widget-model-hibiki\n  live2d-widget-model-hijiki\n  live2d-widget-model-izumi\n  live2d-widget-model-koharu\n  live2d-widget-model-miku\n  live2d-widget-model-ni-j\n  live2d-widget-model-nico\n  live2d-widget-model-nietzsche\n  live2d-widget-model-nipsilon\n  live2d-widget-model-nito\n  live2d-widget-model-shizuku\n  live2d-widget-model-tororo\n  live2d-widget-model-tsumiki\n  live2d-widget-model-unitychan\n  live2d-widget-model-wanko\n  live2d-widget-model-z16\n{% endspoiler %}\n\n{% spoiler 모델_이미지_1 %}\n  **epsilon2_1**\n  {% fi /img/gif/Epsilon2.1.gif, epsilon,,, 60% %}\n  **gf**\n  {% fi /img/gif/gf.gif, gf,,, 60% %}\n  **haru**\n  {% fi /img/gif/haru.gif, haru,,, 60% %}\n  **haruto**\n  {% fi /img/gif/haruto.gif, haruto,,, 60% %}\n  **hibiki**\n  {% fi /img/gif/hibiki.gif, hibiki,,, 60% %}\n  **koharu**\n  {% fi /img/gif/koharu.gif, koharu,,, 60% %}\n  **miku**\n  {% fi /img/gif/miku.gif, miku,,, 60% %}\n{% endspoiler %}  \n{% spoiler 모델_이미지_2 %}\n  **ni-j**\n  {% fi /img/gif/ni-j.gif, ni-j,,, 60% %}\n  **nico**\n  {% fi /img/gif/nico.gif, nico,,, 60% %}\n  **nietzche**\n  {% fi /img/gif/nietzche.gif, nietzche,,, 60% %}\n  **nipsilon**\n  {% fi /img/gif/nipsilon.gif, nipsilon,,, 60% %}\n  **nito**\n  {% fi /img/gif/nito.gif, nito,,, 60% %}\n  **shizuku**\n  {% fi /img/gif/shizuku.gif, shizuku,,, 60% %}\n{% endspoiler %}    \n{% spoiler 모델_이미지_3 %}  \n  **tororo**\n  {% fi /img/gif/tororo.gif, tororo,,, 60% %}\n  **tsumiki**\n  {% fi /img/gif/tsumiki.gif, tsumiki,,, 60% %}\n  **Unitychan**\n  {% fi /img/gif/Unitychan.gif, unitychan,,, 60% %}\n  **wanko**\n  {% fi /img/gif/wanko.gif, wanko,,, 60% %}\n  **z16**\n  {% fi /img/gif/z16.gif, z16,,, 60% %}\n{% endspoiler %}\n\n고르셨다면 똑같이 npm을 사용하여 설치해 주도록 하겠습니다.\n\n{% note success no-icon %}\n  {% code %}\n  npm install {your model's package name}\n  {% endcode %}\n  저의 경우 wanko를 선택하였습니다.\n  {% code %}\n  npm install --save live2d-widget-model-wanko\n  {% endcode %}\n{% endnote %}\n\n-----\n\n# 설정(Config setting)\n\n\n블로그의 `_config.yml` 파일 혹은 테마의 `_config.yml` 중 편한 곳에 아래 속성을 추가합니다.\n`model` 의 `use` 부분에 사용할 모델명으로 수정하셔야 합니다.\n\n{% note success no-icon %}\n  {% code lang:yml %}\n  live2d:\n    enable: true\n    scriptFrom: local\n    pluginRootPath: live2dw/\n    pluginJsPath: lib/\n    pluginModelPath: assets/\n    tagMode: false\n    log: false\n    model:\n      use: live2d-widget-model-wanko #설치한 모델을 이곳에서 적용하셔야 합니다\n    display:\n      position: right\n      width: 150\n      height: 300\n    mobile:\n      show: true\n    react:\n      opacity: 0.7\n  {% endcode %}\n{% endnote %}\n\n더 자세한 설명은 깃허브에 가시면 보실 수 있습니다.[Detail settings](https://github.com/EYHN/hexo-helper-live2d#detail-settings)\n\n-----\n\n# 적용(Execute)\n\n`hexo clean` 을 통해 기존 작성되었던 public 폴더를 지워주시고 새롭게 `hexo generate` 실행하셔야 적용되는 것을 확인하실 수 있습니다.\n`hexo server` 로 로컬 환경에서 바로 확인하실 수도 있습니다.\n\n{% note success no-icon %}\n  **koharu** 모델을 한번 적용시켜 보았습니다.\n\n  {% fi /img/live2d_koharu.png, sample,,, 60% %}\n{% endnote %}\n\n<br>\n\n# Reference\n\n[Github : hexo-helper-live2d](https://github.com/EYHN/hexo-helper-live2d)\n","slug":"hexo-live2d","published":1,"updated":"2019-07-22T09:15:53.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt86v002j2646qqrzxzo5","content":"<div class=\"note info\">\n            <p>제 블로그에 적용되어 있는 테마는 Next 입니다. <span class=\"exturl\" data-url=\"aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20v\" title=\"http://theme-next.iissnan.com/\">theme-next<i class=\"fa fa-external-link\"></i></span><br>틈틈히 테마를 커스터마이즈 하고 있습니다.</p><p>이번 포스트에서는 배경에 마우스를 따라 움직이는 캐릭터를 적용하는 방법에 대해 적어 보겠습니다.</p>\n          </div>\n\n<hr>\n<h1 id=\"설치-Installation\"><a href=\"#설치-Installation\" class=\"headerlink\" title=\"설치(Installation)\"></a>설치(Installation)</h1><h2 id=\"hexo-helper-live2d\"><a href=\"#hexo-helper-live2d\" class=\"headerlink\" title=\"hexo-helper-live2d\"></a>hexo-helper-live2d</h2><p>블로그 디렉토리(기본 <code>hexo</code> 디렉토리)에서 Node Package Module(NPM)을 사용하여 <code>hexo-helper-live2d</code> 를 설치합니다.</p>\n<div class=\"note success no-icon\">\n            <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n          </div>\n\n\n<h2 id=\"live2d-widget-model\"><a href=\"#live2d-widget-model\" class=\"headerlink\" title=\"live2d-widget-model\"></a>live2d-widget-model</h2><blockquote>\n<p>마음에 드는 모델의 assets을 가져와 적용할 수도 있지만, 그건 다음에 기회가 된다면 시도해 보기로 하겠습니다.</p>\n</blockquote>\n<p>아래의 기본적으로 제공해주는 Live2D 리소스 중에서 마음에 드는 모델을 골라 설치하겠습니다.</p>\n<div class=\"spoiler collapsed\"><div class=\"spoiler-title\">모델_리스트</div><div class=\"spoiler-content\"><p>live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16</p>\n</div></div>\n\n<div class=\"spoiler collapsed\"><div class=\"spoiler-title\">모델_이미지_1</div><div class=\"spoiler-content\"><p><strong>epsilon2_1</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"epsilon\" data-src=\"/img/gif/Epsilon2.1.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>gf</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"gf\" data-src=\"/img/gif/gf.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>haru</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"haru\" data-src=\"/img/gif/haru.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>haruto</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"haruto\" data-src=\"/img/gif/haruto.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>hibiki</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"hibiki\" data-src=\"/img/gif/hibiki.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>koharu</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"koharu\" data-src=\"/img/gif/koharu.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>miku</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"miku\" data-src=\"/img/gif/miku.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span></p>\n</div></div>  \n<div class=\"spoiler collapsed\"><div class=\"spoiler-title\">모델_이미지_2</div><div class=\"spoiler-content\"><p><strong>ni-j</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"ni-j\" data-src=\"/img/gif/ni-j.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>nico</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"nico\" data-src=\"/img/gif/nico.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>nietzche</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"nietzche\" data-src=\"/img/gif/nietzche.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>nipsilon</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"nipsilon\" data-src=\"/img/gif/nipsilon.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>nito</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"nito\" data-src=\"/img/gif/nito.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>shizuku</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"shizuku\" data-src=\"/img/gif/shizuku.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span></p>\n</div></div>    \n<div class=\"spoiler collapsed\"><div class=\"spoiler-title\">모델_이미지_3</div><div class=\"spoiler-content\"><p><strong>tororo</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"tororo\" data-src=\"/img/gif/tororo.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>tsumiki</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"tsumiki\" data-src=\"/img/gif/tsumiki.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>Unitychan</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"unitychan\" data-src=\"/img/gif/Unitychan.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>wanko</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"wanko\" data-src=\"/img/gif/wanko.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>z16</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"z16\" data-src=\"/img/gif/z16.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span></p>\n</div></div>\n\n<p>고르셨다면 똑같이 npm을 사용하여 설치해 주도록 하겠습니다.</p>\n<div class=\"note success no-icon\">\n            <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install &#123;your model&apos;s package name&#125;</span><br></pre></td></tr></table></figure>저의 경우 wanko를 선택하였습니다.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save live2d-widget-model-wanko</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"설정-Config-setting\"><a href=\"#설정-Config-setting\" class=\"headerlink\" title=\"설정(Config setting)\"></a>설정(Config setting)</h1><p>블로그의 <code>_config.yml</code> 파일 혹은 테마의 <code>_config.yml</code> 중 편한 곳에 아래 속성을 추가합니다.<br><code>model</code> 의 <code>use</code> 부분에 사용할 모델명으로 수정하셔야 합니다.</p>\n<div class=\"note success no-icon\">\n            <figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">live2d:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  scriptFrom:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  pluginRootPath:</span> <span class=\"string\">live2dw/</span></span><br><span class=\"line\"><span class=\"attr\">  pluginJsPath:</span> <span class=\"string\">lib/</span></span><br><span class=\"line\"><span class=\"attr\">  pluginModelPath:</span> <span class=\"string\">assets/</span></span><br><span class=\"line\"><span class=\"attr\">  tagMode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  log:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  model:</span></span><br><span class=\"line\"><span class=\"attr\">    use:</span> <span class=\"string\">live2d-widget-model-wanko</span> <span class=\"comment\">#설치한 모델을 이곳에서 적용하셔야 합니다</span></span><br><span class=\"line\"><span class=\"attr\">  display:</span></span><br><span class=\"line\"><span class=\"attr\">    position:</span> <span class=\"string\">right</span></span><br><span class=\"line\"><span class=\"attr\">    width:</span> <span class=\"number\">150</span></span><br><span class=\"line\"><span class=\"attr\">    height:</span> <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"attr\">  mobile:</span></span><br><span class=\"line\"><span class=\"attr\">    show:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  react:</span></span><br><span class=\"line\"><span class=\"attr\">    opacity:</span> <span class=\"number\">0.7</span></span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>더 자세한 설명은 깃허브에 가시면 보실 수 있습니다.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJkI2RldGFpbC1zZXR0aW5ncw==\" title=\"https://github.com/EYHN/hexo-helper-live2d#detail-settings\">Detail settings<i class=\"fa fa-external-link\"></i></span></p>\n<hr>\n<h1 id=\"적용-Execute\"><a href=\"#적용-Execute\" class=\"headerlink\" title=\"적용(Execute)\"></a>적용(Execute)</h1><p><code>hexo clean</code> 을 통해 기존 작성되었던 public 폴더를 지워주시고 새롭게 <code>hexo generate</code> 실행하셔야 적용되는 것을 확인하실 수 있습니다.<br><code>hexo server</code> 로 로컬 환경에서 바로 확인하실 수도 있습니다.</p>\n<div class=\"note success no-icon\">\n            <p><strong>koharu</strong> 모델을 한번 적용시켜 보았습니다.</p><p><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"sample\" data-src=\"/img/live2d_koharu.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span></p>\n          </div>\n\n<br>\n\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJk\" title=\"https://github.com/EYHN/hexo-helper-live2d\">Github : hexo-helper-live2d<i class=\"fa fa-external-link\"></i></span></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<div class=\"note info\">\n            <p>제 블로그에 적용되어 있는 테마는 Next 입니다. <span class=\"exturl\" data-url=\"aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20v\" title=\"http://theme-next.iissnan.com/\">theme-next<i class=\"fa fa-external-link\"></i></span><br>틈틈히 테마를 커스터마이즈 하고 있습니다.</p><p>이번 포스트에서는 배경에 마우스를 따라 움직이는 캐릭터를 적용하는 방법에 대해 적어 보겠습니다.</p>\n          </div>\n\n<hr>\n<h1 id=\"설치-Installation\"><a href=\"#설치-Installation\" class=\"headerlink\" title=\"설치(Installation)\"></a>설치(Installation)</h1><h2 id=\"hexo-helper-live2d\"><a href=\"#hexo-helper-live2d\" class=\"headerlink\" title=\"hexo-helper-live2d\"></a>hexo-helper-live2d</h2><p>블로그 디렉토리(기본 <code>hexo</code> 디렉토리)에서 Node Package Module(NPM)을 사용하여 <code>hexo-helper-live2d</code> 를 설치합니다.</p>\n<div class=\"note success no-icon\">\n            <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n          </div>\n\n\n<h2 id=\"live2d-widget-model\"><a href=\"#live2d-widget-model\" class=\"headerlink\" title=\"live2d-widget-model\"></a>live2d-widget-model</h2><blockquote>\n<p>마음에 드는 모델의 assets을 가져와 적용할 수도 있지만, 그건 다음에 기회가 된다면 시도해 보기로 하겠습니다.</p>\n</blockquote>\n<p>아래의 기본적으로 제공해주는 Live2D 리소스 중에서 마음에 드는 모델을 골라 설치하겠습니다.</p>\n<div class=\"spoiler collapsed\"><div class=\"spoiler-title\">모델_리스트</div><div class=\"spoiler-content\"><p>live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16</p>\n</div></div>\n\n<div class=\"spoiler collapsed\"><div class=\"spoiler-title\">모델_이미지_1</div><div class=\"spoiler-content\"><p><strong>epsilon2_1</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"epsilon\" data-src=\"/img/gif/Epsilon2.1.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>gf</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"gf\" data-src=\"/img/gif/gf.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>haru</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"haru\" data-src=\"/img/gif/haru.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>haruto</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"haruto\" data-src=\"/img/gif/haruto.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>hibiki</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"hibiki\" data-src=\"/img/gif/hibiki.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>koharu</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"koharu\" data-src=\"/img/gif/koharu.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>miku</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"miku\" data-src=\"/img/gif/miku.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span></p>\n</div></div>  \n<div class=\"spoiler collapsed\"><div class=\"spoiler-title\">모델_이미지_2</div><div class=\"spoiler-content\"><p><strong>ni-j</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"ni-j\" data-src=\"/img/gif/ni-j.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>nico</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"nico\" data-src=\"/img/gif/nico.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>nietzche</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"nietzche\" data-src=\"/img/gif/nietzche.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>nipsilon</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"nipsilon\" data-src=\"/img/gif/nipsilon.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>nito</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"nito\" data-src=\"/img/gif/nito.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>shizuku</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"shizuku\" data-src=\"/img/gif/shizuku.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span></p>\n</div></div>    \n<div class=\"spoiler collapsed\"><div class=\"spoiler-title\">모델_이미지_3</div><div class=\"spoiler-content\"><p><strong>tororo</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"tororo\" data-src=\"/img/gif/tororo.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>tsumiki</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"tsumiki\" data-src=\"/img/gif/tsumiki.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>Unitychan</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"unitychan\" data-src=\"/img/gif/Unitychan.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>wanko</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"wanko\" data-src=\"/img/gif/wanko.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span><br><strong>z16</strong><br><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"z16\" data-src=\"/img/gif/z16.gif\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span></p>\n</div></div>\n\n<p>고르셨다면 똑같이 npm을 사용하여 설치해 주도록 하겠습니다.</p>\n<div class=\"note success no-icon\">\n            <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install &#123;your model&apos;s package name&#125;</span><br></pre></td></tr></table></figure>저의 경우 wanko를 선택하였습니다.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save live2d-widget-model-wanko</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"설정-Config-setting\"><a href=\"#설정-Config-setting\" class=\"headerlink\" title=\"설정(Config setting)\"></a>설정(Config setting)</h1><p>블로그의 <code>_config.yml</code> 파일 혹은 테마의 <code>_config.yml</code> 중 편한 곳에 아래 속성을 추가합니다.<br><code>model</code> 의 <code>use</code> 부분에 사용할 모델명으로 수정하셔야 합니다.</p>\n<div class=\"note success no-icon\">\n            <figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">live2d:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  scriptFrom:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  pluginRootPath:</span> <span class=\"string\">live2dw/</span></span><br><span class=\"line\"><span class=\"attr\">  pluginJsPath:</span> <span class=\"string\">lib/</span></span><br><span class=\"line\"><span class=\"attr\">  pluginModelPath:</span> <span class=\"string\">assets/</span></span><br><span class=\"line\"><span class=\"attr\">  tagMode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  log:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  model:</span></span><br><span class=\"line\"><span class=\"attr\">    use:</span> <span class=\"string\">live2d-widget-model-wanko</span> <span class=\"comment\">#설치한 모델을 이곳에서 적용하셔야 합니다</span></span><br><span class=\"line\"><span class=\"attr\">  display:</span></span><br><span class=\"line\"><span class=\"attr\">    position:</span> <span class=\"string\">right</span></span><br><span class=\"line\"><span class=\"attr\">    width:</span> <span class=\"number\">150</span></span><br><span class=\"line\"><span class=\"attr\">    height:</span> <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"attr\">  mobile:</span></span><br><span class=\"line\"><span class=\"attr\">    show:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  react:</span></span><br><span class=\"line\"><span class=\"attr\">    opacity:</span> <span class=\"number\">0.7</span></span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>더 자세한 설명은 깃허브에 가시면 보실 수 있습니다.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJkI2RldGFpbC1zZXR0aW5ncw==\" title=\"https://github.com/EYHN/hexo-helper-live2d#detail-settings\">Detail settings<i class=\"fa fa-external-link\"></i></span></p>\n<hr>\n<h1 id=\"적용-Execute\"><a href=\"#적용-Execute\" class=\"headerlink\" title=\"적용(Execute)\"></a>적용(Execute)</h1><p><code>hexo clean</code> 을 통해 기존 작성되었던 public 폴더를 지워주시고 새롭게 <code>hexo generate</code> 실행하셔야 적용되는 것을 확인하실 수 있습니다.<br><code>hexo server</code> 로 로컬 환경에서 바로 확인하실 수도 있습니다.</p>\n<div class=\"note success no-icon\">\n            <p><strong>koharu</strong> 모델을 한번 적용시켜 보았습니다.</p><p><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"sample\" data-src=\"/img/live2d_koharu.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span></p>\n          </div>\n\n<br>\n\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJk\" title=\"https://github.com/EYHN/hexo-helper-live2d\">Github : hexo-helper-live2d<i class=\"fa fa-external-link\"></i></span></p>\n"},{"title":"(SW Expert Academy) 6196번 - 변수","date":"2019-07-28T08:16:23.000Z","subtitle":"파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법","_content":"\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n\n{% note success %}\n{% code lang:python %}\nx= input()\na = int(x)\n\nprint(4*a+3*10*a+2*100*a+1000*a)\n{% endcode %}\n{% endnote %}\n","source":"_posts/20190728-sw-6196.md","raw":"---\ntitle: (SW Expert Academy) 6196번 - 변수\ndate: 2019-07-28 17:16:23\ncategories: SW 아카데미\ntags: [삼성, 파이썬 ,SW Academy, python]\nsubtitle: 파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법\n---\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n\n{% note success %}\n{% code lang:python %}\nx= input()\na = int(x)\n\nprint(4*a+3*10*a+2*100*a+1000*a)\n{% endcode %}\n{% endnote %}\n","slug":"sw-6196","published":1,"updated":"2019-07-28T16:20:52.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt86z002n26463q5zkb2h","content":"<div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x= input()</span><br><span class=\"line\">a = int(x)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"number\">4</span>*a+<span class=\"number\">3</span>*<span class=\"number\">10</span>*a+<span class=\"number\">2</span>*<span class=\"number\">100</span>*a+<span class=\"number\">1000</span>*a)</span><br></pre></td></tr></table></figure>\n          </div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x= input()</span><br><span class=\"line\">a = int(x)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"number\">4</span>*a+<span class=\"number\">3</span>*<span class=\"number\">10</span>*a+<span class=\"number\">2</span>*<span class=\"number\">100</span>*a+<span class=\"number\">1000</span>*a)</span><br></pre></td></tr></table></figure>\n          </div>\n"},{"title":"(파이썬) 05 Loops and List Comprehensions","date":"2019-07-25T05:49:18.000Z","subtitle":"Kaggle 홈페이지 Python 강좌 참고","_content":"\n# Reference\n\n- Kaggle 홈페이지 - [Kaggle](https://www.kaggle.com)\n- 9강 'Loops and List Comprehensions' - [Python Micro-Course Home Page](https://www.kaggle.com/colinmorris/loops-and-list-comprehensions)\n\n> 영어 실력이 부족하여 문맥이 이해가 가지 않는 부분은 원문을 참고하시길 바랍니다...\n> 언젠가는 실력이 나아지기를...\n\n------\n\n<br>\n\n# 반복문(Loops)\n\nLoop는 반복적으로 코드를 실행해야 할 때 사용됩니다. 아래는 예제입니다:\n\n{% note no-icon %}\n{% code lang:python %}\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nfor planet in planets:\n    print(planet, end=' ') # 같은 줄에 출력합니다. {% endcode %}\n{% code %}\nMercury Venus Earth Mars Jupiter Saturn Uranus Neptune  {% endcode %}\n{% endnote %}\n\n`for` 반복문에는\n\n- 사용할 변수 이름 (이 경우 `planet`)\n- 반복할 값들의 집합 (이 경우 `planets`)\n\n\"`in`\" 이라는 단어를 사용하여 함께 연결합니다.\n\n\"`in`\"의 오른쪽에는 반복에 사용될 수 있다면 어떠한 객체라도 올 수 있습니다. 대체적으로 어떠한 그룹으로 생각될 수만 있다면 반복문에 사용될 수 있습니다.\n\n{% tabs loop_examples %}\n<!-- tab tuple @eye -->\n{% note no-icon %}\nlists 외에도 tuple의 요소들을 반복 할 수도 있습니다.\n\n{% code lang:python %}\nmultiplicands = (2, 2, 2, 3, 3, 5)\nproduct = 1\nfor mult in multiplicands:\n    product = product * mult\nproduct {% endcode %}\n{% code lang:python %}\n360 {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab string @eye -->\n{% note no-icon %}\nstring 의 각 character 마다 반복문을 돌릴 수 있습니다.\n\n{% code lang:python %}\ns = 'steganograpHy is the practicE of conceaLing a file, message, image, or video within another fiLe, message, image, Or video.'\nmsg = ''\n# s 문자열의 대문자들을 출력. 한번에 하나씩\nfor char in s:\n    if char.isupper():\n        print(char, end='')   {% endcode %}\n{% code lang:python %}\nHELLO {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n## range()\n\n`range()` 는 일련의 연속적인 숫자들을 반환하는 함수입니다. 이는 반복문을 작성하는데 매우 유용합니다.\n예를 들어, 우리가 어떤 행동을 5번 반복하고자 한다면 아래와 같이 작성하면 됩니다:\n\n{% note no-icon %}\n{% code lang:python %}\nfor i in range(5):\n    print(\"Doing important work. i =\", i) {% endcode %}\n{% code %}\nDoing important work. i = 0\nDoing important work. i = 1\nDoing important work. i = 2\nDoing important work. i = 3\nDoing important work. i = 4  {% endcode %}\n{% endnote %}\n\n## while loops\n\n파이썬에는 또 다른 반복문으로 특정 조건을 만족할 때까지 반복하는 `while` 이 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\ni = 0\nwhile i < 10:\n    print(i, end=' ')\n    i += 1  {% endcode %}\n{% code %}\n0 1 2 3 4 5 6 7 8 9  {% endcode %}\n{% endnote %}\n\n`while` 반복문의 인자는 boolean 문으로 평가되고, False로 평가 될 때까지 반복문이 실행됩니다.\n\n-----\n\n<br>\n\n# 리스트 내포(List Comprehensions)\n\n> 리스트 컴프리핸션 이라고 영문 그대로 읽는 경우가 더 많은 것 같습니다...\n\n리스트 내포는 파이썬에서 가장 사랑받고 독특한 특징 중 하나입니다. 자잘한 설명보다는 그냥 몇 가지 예제들을 보는 것이 보다 이해하기 쉬울 것 같습니다.\n\n{% tabs list_comprehensions %}\n<!-- tab WITH_LC @eye -->\n{% note no-icon %}\nList comprehension 줄여서 LC라고 하겠습니다. `**` 은 파이썬 산술 연산자에서 제곱을 의미합니다.\n\n{% code lang:python %}\nsquares = [n**2 for n in range(10)]\nsquares {% endcode %}\n{% code lang:python %}\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab WITHOUT_LC @eye -->\n{% note no-icon %}\nLC 없이 작성하면 아래와 같습니다.\n\n{% code lang:python %}\nsquares = []\nfor n in range(10):\n    squares.append(n**2)\nsquares  {% endcode %}\n{% code lang:python %}\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81] {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n`if` 조건을 추가 할 수도 있습니다:\n\n{% note no-icon %}\n{% code lang:python %}\nshort_planets = [planet for planet in planets if len(planet) < 6]\nshort_planets {% endcode %}\n{% code lang:python %}\n['Venus', 'Earth', 'Mars'] {% endcode %}\n{% endnote %}\n\n(SQL에 익숙하신 분이라면, \"WHERE\" 절과 비슷하다고 느끼셨을 겁니다.)\n다음은 `if` 조건으로 필터링하고 loop 변수에 일부 변환을 적용하는 예제입니다:\n\n{% tabs if_condition %}\n<!-- tab SINGLE_LINE @eye -->\n{% note no-icon %}\n대문자로 바꾸고 뒤에 '!'를 추가합니다.\n\n{% code lang:python %}\n# str.upper() 은 모두 대문자로 변환한 string을 반환합니다\nloud_short_planets = [planet.upper() + '!' for planet in planets if len(planet) < 6]\nloud_short_planets {% endcode %}\n{% code lang:python %}\n['VENUS!', 'EARTH!', 'MARS!'] {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab MULTI_LINE @eye -->\n{% note no-icon %}\n대부분의 경우 한줄로 작성하는 것을 선호하지만, 구조를 파악하기 쉽게 하기 위해 3줄로 나눠서 작성할 수도 있습니다.\n(SQL과 비교하자면, 각 줄은 SELECT, FROM, WHERE로 생각할 수 있겠군요)\n\n{% code lang:python %}\n[\n    planet.upper() + '!'\n    for planet in planets\n    if len(planet) < 6\n] {% endcode %}\n{% code lang:python %}\n['VENUS!', 'EARTH!', 'MARS!'] {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n표현식의 왼쪽에는 꼭 반복문의 변수를 포함할 필요가 없습니다(하지만 이런 경우는 매우 드뭅니다). 아래의 표현식이 어떤 결과를 출력할까요? \"output\" 탭을 눌러서 확인해 보세요.\n\n{% tabs if_example, 1 %}\n<!-- tab CODE @code -->\n{% code lang:python %}\n[32 for planet in planets] {% endcode %}\n<!-- endtab -->\n\n<!-- tab OUTPUT @terminal -->\n{% code lang:python %}\n[32, 32, 32, 32, 32, 32, 32, 32]  {% endcode %}\n<!-- endtab -->\n{% endtabs %}\n\n`min`, `max` 및 `sum` 과 같은 기능과 LC가 함께 사용되면 여러 줄로 작성된 코드를 한 줄의 매우 인상적인 코드로 표현할 수 있습니다.\n\n\n{% tabs LC_condition %}\n<!-- tab ORIGINAL_CODE @eye -->\n{% note no-icon %}\n예를 들어, 다음과 같이 음수의 개수를 세는 함수를 살펴보겠습니다:\n\n{% code lang:python %}\ndef count_negatives(nums):\n    \"\"\"Return the number of negative numbers in the given list.\n\n    >>> count_negatives([5, -1, -2, 0, 3])\n    2\n    \"\"\"\n    n_negative = 0\n    for num in nums:\n        if num < 0:\n            n_negative = n_negative + 1\n    return n_negative {% endcode %}\n\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab ONE_LINE_CODE @eye -->\n{% note no-icon %}\nLC를 사용하면 한 줄로 표현 가능합니다. 훨씬 보기 좋지 않은가요?\n\n{% code lang:python %}\ndef count_negatives(nums):\n    return len([num for num in nums if num < 0]) {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab SHORTER_CODE @eye -->\n{% note no-icon %}\n만약 조금이라도 더 짧은 코드를 원하신다면 다음과 같이 표현할 수도 있습니다.\n\n{% code lang:python %}\ndef count_negatives(nums):\n    # 기억하기: \"booleans and conditionals\" 연습문제에서, 파이썬의 별난 특징으로\n    # True + True + False + True 는 3으로 계산한다는 점을 응용.\n    return sum([num < 0 for num in nums]) {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n위 3가지 방법 중 어떤 것이 \"최고의\" 방법인지는 매우 주관적입니다. 보다 적은 코드로 문제를 해결하는 것이 항상 좋은 일이지만, [The Zen of Python](https://en.wikipedia.org/wiki/Zen_of_Python)에 적힌 다음 내용을 기억해 두는 것이 좋습니다.\n\n- Readability counts. 가독성이 중요합니다.\n- Explicit is better than implicit. 명확한 것이 암시적인 것보다 낫습니다.\n\n이러한 도구들을 사용하여 읽기 쉽고 간결한 프로그램을 짜도록 합시다. 하지만 둘 중 하나를 골라야하는 상황이 온다면, 다른 사람들이 읽고 이해하기 쉬운 코드를 짜는 것을 선호하도록 합시다.\n\n\n<br><br><br>\n# 연습문제(Your Turn)\n\n[loops and list comprehensions 예제](https://www.kaggle.com/kernels/fork/1275177)\n","source":"_posts/20190725-05-loops-and-list-comprehensions.md","raw":"---\ntitle: (파이썬) 05 Loops and List Comprehensions\ndate: 2019-07-25 14:49:18\ncategories:\n  - LANGUAGE\n  - PYTHON\ntags: [파이썬, 캐글, 튜토리얼, kaggle, programming language, python, language, loops, list comprehensions, tutorial]\nsubtitle: Kaggle 홈페이지 Python 강좌 참고\n---\n\n# Reference\n\n- Kaggle 홈페이지 - [Kaggle](https://www.kaggle.com)\n- 9강 'Loops and List Comprehensions' - [Python Micro-Course Home Page](https://www.kaggle.com/colinmorris/loops-and-list-comprehensions)\n\n> 영어 실력이 부족하여 문맥이 이해가 가지 않는 부분은 원문을 참고하시길 바랍니다...\n> 언젠가는 실력이 나아지기를...\n\n------\n\n<br>\n\n# 반복문(Loops)\n\nLoop는 반복적으로 코드를 실행해야 할 때 사용됩니다. 아래는 예제입니다:\n\n{% note no-icon %}\n{% code lang:python %}\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nfor planet in planets:\n    print(planet, end=' ') # 같은 줄에 출력합니다. {% endcode %}\n{% code %}\nMercury Venus Earth Mars Jupiter Saturn Uranus Neptune  {% endcode %}\n{% endnote %}\n\n`for` 반복문에는\n\n- 사용할 변수 이름 (이 경우 `planet`)\n- 반복할 값들의 집합 (이 경우 `planets`)\n\n\"`in`\" 이라는 단어를 사용하여 함께 연결합니다.\n\n\"`in`\"의 오른쪽에는 반복에 사용될 수 있다면 어떠한 객체라도 올 수 있습니다. 대체적으로 어떠한 그룹으로 생각될 수만 있다면 반복문에 사용될 수 있습니다.\n\n{% tabs loop_examples %}\n<!-- tab tuple @eye -->\n{% note no-icon %}\nlists 외에도 tuple의 요소들을 반복 할 수도 있습니다.\n\n{% code lang:python %}\nmultiplicands = (2, 2, 2, 3, 3, 5)\nproduct = 1\nfor mult in multiplicands:\n    product = product * mult\nproduct {% endcode %}\n{% code lang:python %}\n360 {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab string @eye -->\n{% note no-icon %}\nstring 의 각 character 마다 반복문을 돌릴 수 있습니다.\n\n{% code lang:python %}\ns = 'steganograpHy is the practicE of conceaLing a file, message, image, or video within another fiLe, message, image, Or video.'\nmsg = ''\n# s 문자열의 대문자들을 출력. 한번에 하나씩\nfor char in s:\n    if char.isupper():\n        print(char, end='')   {% endcode %}\n{% code lang:python %}\nHELLO {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n## range()\n\n`range()` 는 일련의 연속적인 숫자들을 반환하는 함수입니다. 이는 반복문을 작성하는데 매우 유용합니다.\n예를 들어, 우리가 어떤 행동을 5번 반복하고자 한다면 아래와 같이 작성하면 됩니다:\n\n{% note no-icon %}\n{% code lang:python %}\nfor i in range(5):\n    print(\"Doing important work. i =\", i) {% endcode %}\n{% code %}\nDoing important work. i = 0\nDoing important work. i = 1\nDoing important work. i = 2\nDoing important work. i = 3\nDoing important work. i = 4  {% endcode %}\n{% endnote %}\n\n## while loops\n\n파이썬에는 또 다른 반복문으로 특정 조건을 만족할 때까지 반복하는 `while` 이 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\ni = 0\nwhile i < 10:\n    print(i, end=' ')\n    i += 1  {% endcode %}\n{% code %}\n0 1 2 3 4 5 6 7 8 9  {% endcode %}\n{% endnote %}\n\n`while` 반복문의 인자는 boolean 문으로 평가되고, False로 평가 될 때까지 반복문이 실행됩니다.\n\n-----\n\n<br>\n\n# 리스트 내포(List Comprehensions)\n\n> 리스트 컴프리핸션 이라고 영문 그대로 읽는 경우가 더 많은 것 같습니다...\n\n리스트 내포는 파이썬에서 가장 사랑받고 독특한 특징 중 하나입니다. 자잘한 설명보다는 그냥 몇 가지 예제들을 보는 것이 보다 이해하기 쉬울 것 같습니다.\n\n{% tabs list_comprehensions %}\n<!-- tab WITH_LC @eye -->\n{% note no-icon %}\nList comprehension 줄여서 LC라고 하겠습니다. `**` 은 파이썬 산술 연산자에서 제곱을 의미합니다.\n\n{% code lang:python %}\nsquares = [n**2 for n in range(10)]\nsquares {% endcode %}\n{% code lang:python %}\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab WITHOUT_LC @eye -->\n{% note no-icon %}\nLC 없이 작성하면 아래와 같습니다.\n\n{% code lang:python %}\nsquares = []\nfor n in range(10):\n    squares.append(n**2)\nsquares  {% endcode %}\n{% code lang:python %}\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81] {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n`if` 조건을 추가 할 수도 있습니다:\n\n{% note no-icon %}\n{% code lang:python %}\nshort_planets = [planet for planet in planets if len(planet) < 6]\nshort_planets {% endcode %}\n{% code lang:python %}\n['Venus', 'Earth', 'Mars'] {% endcode %}\n{% endnote %}\n\n(SQL에 익숙하신 분이라면, \"WHERE\" 절과 비슷하다고 느끼셨을 겁니다.)\n다음은 `if` 조건으로 필터링하고 loop 변수에 일부 변환을 적용하는 예제입니다:\n\n{% tabs if_condition %}\n<!-- tab SINGLE_LINE @eye -->\n{% note no-icon %}\n대문자로 바꾸고 뒤에 '!'를 추가합니다.\n\n{% code lang:python %}\n# str.upper() 은 모두 대문자로 변환한 string을 반환합니다\nloud_short_planets = [planet.upper() + '!' for planet in planets if len(planet) < 6]\nloud_short_planets {% endcode %}\n{% code lang:python %}\n['VENUS!', 'EARTH!', 'MARS!'] {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab MULTI_LINE @eye -->\n{% note no-icon %}\n대부분의 경우 한줄로 작성하는 것을 선호하지만, 구조를 파악하기 쉽게 하기 위해 3줄로 나눠서 작성할 수도 있습니다.\n(SQL과 비교하자면, 각 줄은 SELECT, FROM, WHERE로 생각할 수 있겠군요)\n\n{% code lang:python %}\n[\n    planet.upper() + '!'\n    for planet in planets\n    if len(planet) < 6\n] {% endcode %}\n{% code lang:python %}\n['VENUS!', 'EARTH!', 'MARS!'] {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n표현식의 왼쪽에는 꼭 반복문의 변수를 포함할 필요가 없습니다(하지만 이런 경우는 매우 드뭅니다). 아래의 표현식이 어떤 결과를 출력할까요? \"output\" 탭을 눌러서 확인해 보세요.\n\n{% tabs if_example, 1 %}\n<!-- tab CODE @code -->\n{% code lang:python %}\n[32 for planet in planets] {% endcode %}\n<!-- endtab -->\n\n<!-- tab OUTPUT @terminal -->\n{% code lang:python %}\n[32, 32, 32, 32, 32, 32, 32, 32]  {% endcode %}\n<!-- endtab -->\n{% endtabs %}\n\n`min`, `max` 및 `sum` 과 같은 기능과 LC가 함께 사용되면 여러 줄로 작성된 코드를 한 줄의 매우 인상적인 코드로 표현할 수 있습니다.\n\n\n{% tabs LC_condition %}\n<!-- tab ORIGINAL_CODE @eye -->\n{% note no-icon %}\n예를 들어, 다음과 같이 음수의 개수를 세는 함수를 살펴보겠습니다:\n\n{% code lang:python %}\ndef count_negatives(nums):\n    \"\"\"Return the number of negative numbers in the given list.\n\n    >>> count_negatives([5, -1, -2, 0, 3])\n    2\n    \"\"\"\n    n_negative = 0\n    for num in nums:\n        if num < 0:\n            n_negative = n_negative + 1\n    return n_negative {% endcode %}\n\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab ONE_LINE_CODE @eye -->\n{% note no-icon %}\nLC를 사용하면 한 줄로 표현 가능합니다. 훨씬 보기 좋지 않은가요?\n\n{% code lang:python %}\ndef count_negatives(nums):\n    return len([num for num in nums if num < 0]) {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab SHORTER_CODE @eye -->\n{% note no-icon %}\n만약 조금이라도 더 짧은 코드를 원하신다면 다음과 같이 표현할 수도 있습니다.\n\n{% code lang:python %}\ndef count_negatives(nums):\n    # 기억하기: \"booleans and conditionals\" 연습문제에서, 파이썬의 별난 특징으로\n    # True + True + False + True 는 3으로 계산한다는 점을 응용.\n    return sum([num < 0 for num in nums]) {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n위 3가지 방법 중 어떤 것이 \"최고의\" 방법인지는 매우 주관적입니다. 보다 적은 코드로 문제를 해결하는 것이 항상 좋은 일이지만, [The Zen of Python](https://en.wikipedia.org/wiki/Zen_of_Python)에 적힌 다음 내용을 기억해 두는 것이 좋습니다.\n\n- Readability counts. 가독성이 중요합니다.\n- Explicit is better than implicit. 명확한 것이 암시적인 것보다 낫습니다.\n\n이러한 도구들을 사용하여 읽기 쉽고 간결한 프로그램을 짜도록 합시다. 하지만 둘 중 하나를 골라야하는 상황이 온다면, 다른 사람들이 읽고 이해하기 쉬운 코드를 짜는 것을 선호하도록 합시다.\n\n\n<br><br><br>\n# 연습문제(Your Turn)\n\n[loops and list comprehensions 예제](https://www.kaggle.com/kernels/fork/1275177)\n","slug":"05-loops-and-list-comprehensions","published":1,"updated":"2019-07-26T13:24:31.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt873002r2646rmk5e7ql","content":"<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>Kaggle 홈페이지 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbQ==\" title=\"https://www.kaggle.com\">Kaggle<i class=\"fa fa-external-link\"></i></span></li>\n<li>9강 ‘Loops and List Comprehensions’ - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jb2xpbm1vcnJpcy9sb29wcy1hbmQtbGlzdC1jb21wcmVoZW5zaW9ucw==\" title=\"https://www.kaggle.com/colinmorris/loops-and-list-comprehensions\">Python Micro-Course Home Page<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<blockquote>\n<p>영어 실력이 부족하여 문맥이 이해가 가지 않는 부분은 원문을 참고하시길 바랍니다…<br>언젠가는 실력이 나아지기를…</p>\n</blockquote>\n<hr>\n<br>\n\n<h1 id=\"반복문-Loops\"><a href=\"#반복문-Loops\" class=\"headerlink\" title=\"반복문(Loops)\"></a>반복문(Loops)</h1><p>Loop는 반복적으로 코드를 실행해야 할 때 사용됩니다. 아래는 예제입니다:</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets = [<span class=\"string\">'Mercury'</span>, <span class=\"string\">'Venus'</span>, <span class=\"string\">'Earth'</span>, <span class=\"string\">'Mars'</span>, <span class=\"string\">'Jupiter'</span>, <span class=\"string\">'Saturn'</span>, <span class=\"string\">'Uranus'</span>, <span class=\"string\">'Neptune'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> planet <span class=\"keyword\">in</span> planets:</span><br><span class=\"line\">    print(planet, end=<span class=\"string\">' '</span>) <span class=\"comment\"># 같은 줄에 출력합니다. </span></span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p><code>for</code> 반복문에는</p>\n<ul>\n<li>사용할 변수 이름 (이 경우 <code>planet</code>)</li>\n<li>반복할 값들의 집합 (이 경우 <code>planets</code>)</li>\n</ul>\n<p>“<code>in</code>“ 이라는 단어를 사용하여 함께 연결합니다.</p>\n<p>“<code>in</code>“의 오른쪽에는 반복에 사용될 수 있다면 어떠한 객체라도 올 수 있습니다. 대체적으로 어떠한 그룹으로 생각될 수만 있다면 반복문에 사용될 수 있습니다.</p>\n<div class=\"tabs\" id=\"loop_examples\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#loop_examples-1\"><i class=\"fa fa-eye\"></i>tuple</a></li><li class=\"tab\"><a href=\"#loop_examples-2\"><i class=\"fa fa-eye\"></i>string</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"loop_examples-1\"><div class=\"note no-icon\">\n            <p>lists 외에도 tuple의 요소들을 반복 할 수도 있습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">multiplicands = (<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">product = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> mult <span class=\"keyword\">in</span> multiplicands:</span><br><span class=\"line\">    product = product * mult</span><br><span class=\"line\">product </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">360</span> </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"loop_examples-2\"><div class=\"note no-icon\">\n            <p>string 의 각 character 마다 반복문을 돌릴 수 있습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">'steganograpHy is the practicE of conceaLing a file, message, image, or video within another fiLe, message, image, Or video.'</span></span><br><span class=\"line\">msg = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"comment\"># s 문자열의 대문자들을 출력. 한번에 하나씩</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> char.isupper():</span><br><span class=\"line\">        print(char, end=<span class=\"string\">''</span>)   </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">HELLO </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<h2 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range()\"></a>range()</h2><p><code>range()</code> 는 일련의 연속적인 숫자들을 반환하는 함수입니다. 이는 반복문을 작성하는데 매우 유용합니다.<br>예를 들어, 우리가 어떤 행동을 5번 반복하고자 한다면 아래와 같이 작성하면 됩니다:</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"Doing important work. i =\"</span>, i) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Doing important work. i = 0</span><br><span class=\"line\">Doing important work. i = 1</span><br><span class=\"line\">Doing important work. i = 2</span><br><span class=\"line\">Doing important work. i = 3</span><br><span class=\"line\">Doing important work. i = 4  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<h2 id=\"while-loops\"><a href=\"#while-loops\" class=\"headerlink\" title=\"while loops\"></a>while loops</h2><p>파이썬에는 또 다른 반복문으로 특정 조건을 만족할 때까지 반복하는 <code>while</code> 이 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    print(i, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">    i += <span class=\"number\">1</span>  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0 1 2 3 4 5 6 7 8 9  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p><code>while</code> 반복문의 인자는 boolean 문으로 평가되고, False로 평가 될 때까지 반복문이 실행됩니다.</p>\n<hr>\n<br>\n\n<h1 id=\"리스트-내포-List-Comprehensions\"><a href=\"#리스트-내포-List-Comprehensions\" class=\"headerlink\" title=\"리스트 내포(List Comprehensions)\"></a>리스트 내포(List Comprehensions)</h1><blockquote>\n<p>리스트 컴프리핸션 이라고 영문 그대로 읽는 경우가 더 많은 것 같습니다…</p>\n</blockquote>\n<p>리스트 내포는 파이썬에서 가장 사랑받고 독특한 특징 중 하나입니다. 자잘한 설명보다는 그냥 몇 가지 예제들을 보는 것이 보다 이해하기 쉬울 것 같습니다.</p>\n<div class=\"tabs\" id=\"list_comprehensions\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#list_comprehensions-1\"><i class=\"fa fa-eye\"></i>WITH_LC</a></li><li class=\"tab\"><a href=\"#list_comprehensions-2\"><i class=\"fa fa-eye\"></i>WITHOUT_LC</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"list_comprehensions-1\"><div class=\"note no-icon\">\n            <p>List comprehension 줄여서 LC라고 하겠습니다. <code>**</code> 은 파이썬 산술 연산자에서 제곱을 의미합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">squares = [n**<span class=\"number\">2</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">squares </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>]  </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"list_comprehensions-2\"><div class=\"note no-icon\">\n            <p>LC 없이 작성하면 아래와 같습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">squares = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    squares.append(n**<span class=\"number\">2</span>)</span><br><span class=\"line\">squares  </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>] </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<p><code>if</code> 조건을 추가 할 수도 있습니다:</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">short_planets = [planet <span class=\"keyword\">for</span> planet <span class=\"keyword\">in</span> planets <span class=\"keyword\">if</span> len(planet) &lt; <span class=\"number\">6</span>]</span><br><span class=\"line\">short_planets </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'Venus'</span>, <span class=\"string\">'Earth'</span>, <span class=\"string\">'Mars'</span>] </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>(SQL에 익숙하신 분이라면, “WHERE” 절과 비슷하다고 느끼셨을 겁니다.)<br>다음은 <code>if</code> 조건으로 필터링하고 loop 변수에 일부 변환을 적용하는 예제입니다:</p>\n<div class=\"tabs\" id=\"if_condition\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#if_condition-1\"><i class=\"fa fa-eye\"></i>SINGLE_LINE</a></li><li class=\"tab\"><a href=\"#if_condition-2\"><i class=\"fa fa-eye\"></i>MULTI_LINE</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"if_condition-1\"><div class=\"note no-icon\">\n            <p>대문자로 바꾸고 뒤에 ‘!’를 추가합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># str.upper() 은 모두 대문자로 변환한 string을 반환합니다</span></span><br><span class=\"line\">loud_short_planets = [planet.upper() + <span class=\"string\">'!'</span> <span class=\"keyword\">for</span> planet <span class=\"keyword\">in</span> planets <span class=\"keyword\">if</span> len(planet) &lt; <span class=\"number\">6</span>]</span><br><span class=\"line\">loud_short_planets </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'VENUS!'</span>, <span class=\"string\">'EARTH!'</span>, <span class=\"string\">'MARS!'</span>] </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"if_condition-2\"><div class=\"note no-icon\">\n            <p>대부분의 경우 한줄로 작성하는 것을 선호하지만, 구조를 파악하기 쉽게 하기 위해 3줄로 나눠서 작성할 수도 있습니다.<br>(SQL과 비교하자면, 각 줄은 SELECT, FROM, WHERE로 생각할 수 있겠군요)</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    planet.upper() + <span class=\"string\">'!'</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> planet <span class=\"keyword\">in</span> planets</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(planet) &lt; <span class=\"number\">6</span></span><br><span class=\"line\">] </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'VENUS!'</span>, <span class=\"string\">'EARTH!'</span>, <span class=\"string\">'MARS!'</span>] </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<p>표현식의 왼쪽에는 꼭 반복문의 변수를 포함할 필요가 없습니다(하지만 이런 경우는 매우 드뭅니다). 아래의 표현식이 어떤 결과를 출력할까요? “output” 탭을 눌러서 확인해 보세요.</p>\n<div class=\"tabs\" id=\"if_example\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#if_example-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#if_example-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"if_example-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">32</span> <span class=\"keyword\">for</span> planet <span class=\"keyword\">in</span> planets] </span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"if_example-2\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>]  </span><br></pre></td></tr></table></figure></div></div></div>\n\n<p><code>min</code>, <code>max</code> 및 <code>sum</code> 과 같은 기능과 LC가 함께 사용되면 여러 줄로 작성된 코드를 한 줄의 매우 인상적인 코드로 표현할 수 있습니다.</p>\n<div class=\"tabs\" id=\"lc_condition\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#lc_condition-1\"><i class=\"fa fa-eye\"></i>ORIGINAL_CODE</a></li><li class=\"tab\"><a href=\"#lc_condition-2\"><i class=\"fa fa-eye\"></i>ONE_LINE_CODE</a></li><li class=\"tab\"><a href=\"#lc_condition-3\"><i class=\"fa fa-eye\"></i>SHORTER_CODE</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"lc_condition-1\"><div class=\"note no-icon\">\n            <p>예를 들어, 다음과 같이 음수의 개수를 세는 함수를 살펴보겠습니다:</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_negatives</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Return the number of negative numbers in the given list.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; count_negatives([5, -1, -2, 0, 3])</span></span><br><span class=\"line\"><span class=\"string\">    2</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    n_negative = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            n_negative = n_negative + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n_negative </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"lc_condition-2\"><div class=\"note no-icon\">\n            <p>LC를 사용하면 한 줄로 표현 가능합니다. 훨씬 보기 좋지 않은가요?</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_negatives</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> len([num <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums <span class=\"keyword\">if</span> num &lt; <span class=\"number\">0</span>]) </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"lc_condition-3\"><div class=\"note no-icon\">\n            <p>만약 조금이라도 더 짧은 코드를 원하신다면 다음과 같이 표현할 수도 있습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_negatives</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 기억하기: \"booleans and conditionals\" 연습문제에서, 파이썬의 별난 특징으로</span></span><br><span class=\"line\">    <span class=\"comment\"># True + True + False + True 는 3으로 계산한다는 점을 응용.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum([num &lt; <span class=\"number\">0</span> <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums]) </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<p>위 3가지 방법 중 어떤 것이 “최고의” 방법인지는 매우 주관적입니다. 보다 적은 코드로 문제를 해결하는 것이 항상 좋은 일이지만, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWmVuX29mX1B5dGhvbg==\" title=\"https://en.wikipedia.org/wiki/Zen_of_Python\">The Zen of Python<i class=\"fa fa-external-link\"></i></span>에 적힌 다음 내용을 기억해 두는 것이 좋습니다.</p>\n<ul>\n<li>Readability counts. 가독성이 중요합니다.</li>\n<li>Explicit is better than implicit. 명확한 것이 암시적인 것보다 낫습니다.</li>\n</ul>\n<p>이러한 도구들을 사용하여 읽기 쉽고 간결한 프로그램을 짜도록 합시다. 하지만 둘 중 하나를 골라야하는 상황이 온다면, 다른 사람들이 읽고 이해하기 쉬운 코드를 짜는 것을 선호하도록 합시다.</p>\n<p><br><br><br></p>\n<h1 id=\"연습문제-Your-Turn\"><a href=\"#연습문제-Your-Turn\" class=\"headerlink\" title=\"연습문제(Your Turn)\"></a>연습문제(Your Turn)</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE3Nw==\" title=\"https://www.kaggle.com/kernels/fork/1275177\">loops and list comprehensions 예제<i class=\"fa fa-external-link\"></i></span></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>Kaggle 홈페이지 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbQ==\" title=\"https://www.kaggle.com\">Kaggle<i class=\"fa fa-external-link\"></i></span></li>\n<li>9강 ‘Loops and List Comprehensions’ - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jb2xpbm1vcnJpcy9sb29wcy1hbmQtbGlzdC1jb21wcmVoZW5zaW9ucw==\" title=\"https://www.kaggle.com/colinmorris/loops-and-list-comprehensions\">Python Micro-Course Home Page<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<blockquote>\n<p>영어 실력이 부족하여 문맥이 이해가 가지 않는 부분은 원문을 참고하시길 바랍니다…<br>언젠가는 실력이 나아지기를…</p>\n</blockquote>\n<hr>\n<br>\n\n<h1 id=\"반복문-Loops\"><a href=\"#반복문-Loops\" class=\"headerlink\" title=\"반복문(Loops)\"></a>반복문(Loops)</h1><p>Loop는 반복적으로 코드를 실행해야 할 때 사용됩니다. 아래는 예제입니다:</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets = [<span class=\"string\">'Mercury'</span>, <span class=\"string\">'Venus'</span>, <span class=\"string\">'Earth'</span>, <span class=\"string\">'Mars'</span>, <span class=\"string\">'Jupiter'</span>, <span class=\"string\">'Saturn'</span>, <span class=\"string\">'Uranus'</span>, <span class=\"string\">'Neptune'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> planet <span class=\"keyword\">in</span> planets:</span><br><span class=\"line\">    print(planet, end=<span class=\"string\">' '</span>) <span class=\"comment\"># 같은 줄에 출력합니다. </span></span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p><code>for</code> 반복문에는</p>\n<ul>\n<li>사용할 변수 이름 (이 경우 <code>planet</code>)</li>\n<li>반복할 값들의 집합 (이 경우 <code>planets</code>)</li>\n</ul>\n<p>“<code>in</code>“ 이라는 단어를 사용하여 함께 연결합니다.</p>\n<p>“<code>in</code>“의 오른쪽에는 반복에 사용될 수 있다면 어떠한 객체라도 올 수 있습니다. 대체적으로 어떠한 그룹으로 생각될 수만 있다면 반복문에 사용될 수 있습니다.</p>\n<div class=\"tabs\" id=\"loop_examples\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#loop_examples-1\"><i class=\"fa fa-eye\"></i>tuple</a></li><li class=\"tab\"><a href=\"#loop_examples-2\"><i class=\"fa fa-eye\"></i>string</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"loop_examples-1\"><div class=\"note no-icon\">\n            <p>lists 외에도 tuple의 요소들을 반복 할 수도 있습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">multiplicands = (<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">product = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> mult <span class=\"keyword\">in</span> multiplicands:</span><br><span class=\"line\">    product = product * mult</span><br><span class=\"line\">product </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">360</span> </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"loop_examples-2\"><div class=\"note no-icon\">\n            <p>string 의 각 character 마다 반복문을 돌릴 수 있습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">'steganograpHy is the practicE of conceaLing a file, message, image, or video within another fiLe, message, image, Or video.'</span></span><br><span class=\"line\">msg = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"comment\"># s 문자열의 대문자들을 출력. 한번에 하나씩</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> char.isupper():</span><br><span class=\"line\">        print(char, end=<span class=\"string\">''</span>)   </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">HELLO </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<h2 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range()\"></a>range()</h2><p><code>range()</code> 는 일련의 연속적인 숫자들을 반환하는 함수입니다. 이는 반복문을 작성하는데 매우 유용합니다.<br>예를 들어, 우리가 어떤 행동을 5번 반복하고자 한다면 아래와 같이 작성하면 됩니다:</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"Doing important work. i =\"</span>, i) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Doing important work. i = 0</span><br><span class=\"line\">Doing important work. i = 1</span><br><span class=\"line\">Doing important work. i = 2</span><br><span class=\"line\">Doing important work. i = 3</span><br><span class=\"line\">Doing important work. i = 4  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<h2 id=\"while-loops\"><a href=\"#while-loops\" class=\"headerlink\" title=\"while loops\"></a>while loops</h2><p>파이썬에는 또 다른 반복문으로 특정 조건을 만족할 때까지 반복하는 <code>while</code> 이 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    print(i, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">    i += <span class=\"number\">1</span>  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0 1 2 3 4 5 6 7 8 9  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p><code>while</code> 반복문의 인자는 boolean 문으로 평가되고, False로 평가 될 때까지 반복문이 실행됩니다.</p>\n<hr>\n<br>\n\n<h1 id=\"리스트-내포-List-Comprehensions\"><a href=\"#리스트-내포-List-Comprehensions\" class=\"headerlink\" title=\"리스트 내포(List Comprehensions)\"></a>리스트 내포(List Comprehensions)</h1><blockquote>\n<p>리스트 컴프리핸션 이라고 영문 그대로 읽는 경우가 더 많은 것 같습니다…</p>\n</blockquote>\n<p>리스트 내포는 파이썬에서 가장 사랑받고 독특한 특징 중 하나입니다. 자잘한 설명보다는 그냥 몇 가지 예제들을 보는 것이 보다 이해하기 쉬울 것 같습니다.</p>\n<div class=\"tabs\" id=\"list_comprehensions\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#list_comprehensions-1\"><i class=\"fa fa-eye\"></i>WITH_LC</a></li><li class=\"tab\"><a href=\"#list_comprehensions-2\"><i class=\"fa fa-eye\"></i>WITHOUT_LC</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"list_comprehensions-1\"><div class=\"note no-icon\">\n            <p>List comprehension 줄여서 LC라고 하겠습니다. <code>**</code> 은 파이썬 산술 연산자에서 제곱을 의미합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">squares = [n**<span class=\"number\">2</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">squares </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>]  </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"list_comprehensions-2\"><div class=\"note no-icon\">\n            <p>LC 없이 작성하면 아래와 같습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">squares = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    squares.append(n**<span class=\"number\">2</span>)</span><br><span class=\"line\">squares  </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>] </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<p><code>if</code> 조건을 추가 할 수도 있습니다:</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">short_planets = [planet <span class=\"keyword\">for</span> planet <span class=\"keyword\">in</span> planets <span class=\"keyword\">if</span> len(planet) &lt; <span class=\"number\">6</span>]</span><br><span class=\"line\">short_planets </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'Venus'</span>, <span class=\"string\">'Earth'</span>, <span class=\"string\">'Mars'</span>] </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>(SQL에 익숙하신 분이라면, “WHERE” 절과 비슷하다고 느끼셨을 겁니다.)<br>다음은 <code>if</code> 조건으로 필터링하고 loop 변수에 일부 변환을 적용하는 예제입니다:</p>\n<div class=\"tabs\" id=\"if_condition\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#if_condition-1\"><i class=\"fa fa-eye\"></i>SINGLE_LINE</a></li><li class=\"tab\"><a href=\"#if_condition-2\"><i class=\"fa fa-eye\"></i>MULTI_LINE</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"if_condition-1\"><div class=\"note no-icon\">\n            <p>대문자로 바꾸고 뒤에 ‘!’를 추가합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># str.upper() 은 모두 대문자로 변환한 string을 반환합니다</span></span><br><span class=\"line\">loud_short_planets = [planet.upper() + <span class=\"string\">'!'</span> <span class=\"keyword\">for</span> planet <span class=\"keyword\">in</span> planets <span class=\"keyword\">if</span> len(planet) &lt; <span class=\"number\">6</span>]</span><br><span class=\"line\">loud_short_planets </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'VENUS!'</span>, <span class=\"string\">'EARTH!'</span>, <span class=\"string\">'MARS!'</span>] </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"if_condition-2\"><div class=\"note no-icon\">\n            <p>대부분의 경우 한줄로 작성하는 것을 선호하지만, 구조를 파악하기 쉽게 하기 위해 3줄로 나눠서 작성할 수도 있습니다.<br>(SQL과 비교하자면, 각 줄은 SELECT, FROM, WHERE로 생각할 수 있겠군요)</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    planet.upper() + <span class=\"string\">'!'</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> planet <span class=\"keyword\">in</span> planets</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(planet) &lt; <span class=\"number\">6</span></span><br><span class=\"line\">] </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'VENUS!'</span>, <span class=\"string\">'EARTH!'</span>, <span class=\"string\">'MARS!'</span>] </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<p>표현식의 왼쪽에는 꼭 반복문의 변수를 포함할 필요가 없습니다(하지만 이런 경우는 매우 드뭅니다). 아래의 표현식이 어떤 결과를 출력할까요? “output” 탭을 눌러서 확인해 보세요.</p>\n<div class=\"tabs\" id=\"if_example\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#if_example-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#if_example-2\"><i class=\"fa fa-terminal\"></i>OUTPUT</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"if_example-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">32</span> <span class=\"keyword\">for</span> planet <span class=\"keyword\">in</span> planets] </span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"if_example-2\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>]  </span><br></pre></td></tr></table></figure></div></div></div>\n\n<p><code>min</code>, <code>max</code> 및 <code>sum</code> 과 같은 기능과 LC가 함께 사용되면 여러 줄로 작성된 코드를 한 줄의 매우 인상적인 코드로 표현할 수 있습니다.</p>\n<div class=\"tabs\" id=\"lc_condition\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#lc_condition-1\"><i class=\"fa fa-eye\"></i>ORIGINAL_CODE</a></li><li class=\"tab\"><a href=\"#lc_condition-2\"><i class=\"fa fa-eye\"></i>ONE_LINE_CODE</a></li><li class=\"tab\"><a href=\"#lc_condition-3\"><i class=\"fa fa-eye\"></i>SHORTER_CODE</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"lc_condition-1\"><div class=\"note no-icon\">\n            <p>예를 들어, 다음과 같이 음수의 개수를 세는 함수를 살펴보겠습니다:</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_negatives</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Return the number of negative numbers in the given list.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; count_negatives([5, -1, -2, 0, 3])</span></span><br><span class=\"line\"><span class=\"string\">    2</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    n_negative = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            n_negative = n_negative + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n_negative </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"lc_condition-2\"><div class=\"note no-icon\">\n            <p>LC를 사용하면 한 줄로 표현 가능합니다. 훨씬 보기 좋지 않은가요?</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_negatives</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> len([num <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums <span class=\"keyword\">if</span> num &lt; <span class=\"number\">0</span>]) </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"lc_condition-3\"><div class=\"note no-icon\">\n            <p>만약 조금이라도 더 짧은 코드를 원하신다면 다음과 같이 표현할 수도 있습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_negatives</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 기억하기: \"booleans and conditionals\" 연습문제에서, 파이썬의 별난 특징으로</span></span><br><span class=\"line\">    <span class=\"comment\"># True + True + False + True 는 3으로 계산한다는 점을 응용.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum([num &lt; <span class=\"number\">0</span> <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums]) </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<p>위 3가지 방법 중 어떤 것이 “최고의” 방법인지는 매우 주관적입니다. 보다 적은 코드로 문제를 해결하는 것이 항상 좋은 일이지만, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWmVuX29mX1B5dGhvbg==\" title=\"https://en.wikipedia.org/wiki/Zen_of_Python\">The Zen of Python<i class=\"fa fa-external-link\"></i></span>에 적힌 다음 내용을 기억해 두는 것이 좋습니다.</p>\n<ul>\n<li>Readability counts. 가독성이 중요합니다.</li>\n<li>Explicit is better than implicit. 명확한 것이 암시적인 것보다 낫습니다.</li>\n</ul>\n<p>이러한 도구들을 사용하여 읽기 쉽고 간결한 프로그램을 짜도록 합시다. 하지만 둘 중 하나를 골라야하는 상황이 온다면, 다른 사람들이 읽고 이해하기 쉬운 코드를 짜는 것을 선호하도록 합시다.</p>\n<p><br><br><br></p>\n<h1 id=\"연습문제-Your-Turn\"><a href=\"#연습문제-Your-Turn\" class=\"headerlink\" title=\"연습문제(Your Turn)\"></a>연습문제(Your Turn)</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE3Nw==\" title=\"https://www.kaggle.com/kernels/fork/1275177\">loops and list comprehensions 예제<i class=\"fa fa-external-link\"></i></span></p>\n"},{"title":"(Hexo_NexT_Theme) Hexo 블로그에 Google Adsense 설정_2","date":"2019-07-27T06:27:20.000Z","subtitle":"Hexo-next-theme 설정","_content":"\n\n{% note info %}\n지난 [Hexo 블로그에 Google Adsense 설정_1](https://taejin0527.github.io/2019/07/17/hexo-adsense-1/) 에 이어 설정하는 방법에 대해 알아보겠습니다.\n{% endnote %}\n\n# 지난 시간\n\n지난 7월 17일 Google Adsense를 신청 했었고 일반적으로 3일 정도 걸린다는 안내와는 다르게 10일이나 걸렸습니다. 승인이 늦게 나는 이유에 대해서는 여러 추측들이 있는 것 같지만 저는 앞선 포스트에서 알려드렸던 설정 외에는 건드린 것이 없고 그저 그 후로도 계속해서 새로운 글을 작성했습니다. 아마 저의 경우 게시글 수가 조금 부족했던 것이 그 이유가 아니였나 하고 생각해봅니다.\n\n{% fi /img/adsense/adsense_accept.png, Google Adsense 승인 메일, Google Adsense 승인 메일 %}\n\nGoogle Search Console이 [2018년 1월](https://en.wikipedia.org/wiki/Google_Search_Console)에 리뉴얼 되었듯이 Google Adsense 또한 조금 새롭게 바뀐 것 같았습니다. 처음 등록해보는 거라 미흡한 부분들이 있을 수도 있지만 제가 사용하는 Hexo_Next_Theme 에 직접 적용하며 하나씩 알아가 보겠습니다.\n\n# 기본 광고 설정\n\n- 메일의 **시작하기** 버튼을 클릭하거나 직접 Google Adsense 웹페이지에 접속하게 되면 아래 창을 만나게 됩니다.\n\n{% fi /img/adsense/adsense_activate.png, Google Adsense 시작하기, Google Adsense 시작하기 %}\n\n- 빠르게 광고 설정을 클릭하여 다음 화면으로 진행하도록 합니다.\n\n{% fi /img/adsense/adsense_auto.png, ,Google Adsense 승인 메일 %}\n\n- 이전에는 머신러닝을 활용한 자동 광고 생성이 없었던 것 같은데 사용자의 편의를 위해 새롭게 이 기능을 제공하는 것 같습니다.\n그보다 상단의 붉은 경고가 눈에 띄는군요.\n\n{% fi /img/adsense/adsense_warning.png, ,ads.txt 파일 경고 %}\n\n- ads.txt 라는 파일에 대해 잘 모르기 때문에 **자세히 알아보기** 버튼을 클릭해 보겠습니다.\n\n{% fi /img/adsense/adsense_adstxt_1.png, ,ads.txt 자세히 알아보기 %}\n\n- 실공급원과 부정적인 공급원을 구분하고 광고 소스를 목록화 하여 손해를 보지 않게 도와주는 텍스트 파일인 것 같습니다. 권장사항이지만 한다고 손해볼 것도 없으니 등록하도록 하겠습니다.\n위 안내글에서 언급되었듯이 직접 애드센스용 ads.txt를 생성할 수도 있지만, 앞선 붉은 경고문에서 **지금 해결하기** 버튼을 클릭하고 쉽게 다운받으실 수도 있습니다.\n(직접 작성하실 경우, **게시자 ID** 는 Adsense 홈페이지 -> 계정 -> 설정 -> 계정 정보에 있습니다.)\n\n{% fi /img/adsense/adsense_adstxt_2.png, ,ads.txt 문제해결 %}\n\n- 이렇게 직접 작성하거나 다운받은 ads.txt 파일을 블로그 테마의 source 폴더에 넣어 주시면 됩니다. (e.g `hexo/themes/next/source`)\n\n{% fi /img/adsense/adsense_adstxt_3.png %}\n\n- `hexo g -d` 를 통해 새롭게 추가한 파일을 블로그에 배포하시면 됩니다. 구글 크롤링 봇의 주기가 24시간이라고 하니, 아마 다음날 해당 문제는 해결될 것 같습니다.\n\n-----\n\n# 자동 광고 설정\n\n- 설명을 먼저 읽어보도록 하겠습니다.\n\n{% fi /img/adsense/adsense_auto_info_1.png %}\n\n- 사용자가 조금 더 콘텐츠에 집중할 수 있도록 항상 광고가 게시되는 것이 아니라 머신러닝 학습으로 최적의 순간(아마 조회수가 많은 포스트에 게시되지 않을까요?)에만 광고가 게시되는 것 같습니다.\n- 아직 방문자도 없고...ㅠ 광고가 게시되는 것을 직접 확인하고 싶어서 자동 광고는 다음으로 미룰까 했었는데 아래의 내용을 보고 적용하기로 결심했습니다.\n\n{% fi /img/adsense/adsense_auto_info_2.png %}\n\n- 즉, 수동으로 광고를 게제한 것과는 별개로 작동하는 것 같아 우선 자동 광고를 적용해보겠습니다.\n\n{% fi /img/adsense/adsense_auto_1.png %}\n\n{% fi /img/adsense/adsense_auto_2.png %}\n\n- 일단 기본값으로 모든 항목에 체크되어 있어서 그대로 진행하였습니다.\n\n{% fi /img/adsense/adsense_auto_3.png %}\n\n- 위 코드 역시 지난번 Google Adsense 등록할 때 `google_adsense.ejs` 파일을 생성하고 `_layout.swig`에 추가했던 내용과 동일한 것으로 너무 편하게(?) 완료를 누리시면 됩니다.\n\n{% fi /img/adsense/adsense_auto_4.png %}\n\n- 순식간에 끝나버렸습니다...ㅎ\n\n-----\n\n# 광고 단위 설정\n\n- **광고 단위** 탭을 누르면 다음과 같은 화면이 나옵니다.\n\n{% fi /img/adsense/adsense_man_1.png %}\n\n- 우선 저는 사이드바에 '디스플레이 광고' 를 게제할 생각입니다.\n\n디스플레이 광고에는 3가지 유형이 있습니다.\n\n- 사각형\n\n{% fi /img/adsense/adsense_man_2.png %}\n\n- 수평형\n\n{% fi /img/adsense/adsense_man_3.png %}\n\n- 수직형\n\n{% fi /img/adsense/adsense_man_4.png %}\n\n- 저는 수직형을 선택하여 진행하였습니다. 좌측 상단의 **광고 단위 이름** 을 지정하고 만들기를 누르시면 됩니다.\n\n{% fi /img/adsense/adsense_man_5.png %}\n\n- 마지막으로 소스 코드를 블로그 layout에 추가해 주시면 되겠습니다.\n\n- `ejs` 파일을 생성하는 방법과 `swig` 파일을 생성하는 방법 2가지가 있습니다. (두 파일의 차이점은 아직 잘 모르겠습니다.)\n  `ejs` 템플릿 엔진으로 광고를 게제하는 방법은 이전에 구글 애드센스를 처음 신청할 때 했던 방법과 비슷합니다.\n  `adsense_side.ejs` 파일을 생성하여 위 소스 코드를 넣어 놓고, `\\_marco` 디렉토리 안의 `_sidebar.swig` 파일에(끝에 추가하시면 됩니다) 적용하시면 됩니다.\n\n\n- 이번에는 색다르게 `swig` 파일을 생성하고 적용하여 보겠습니다.\n  먼저 `\\_third-party` 디렉토리에 `\\ad` 라는 폴더를 생성하겠습니다. 생성한 폴더에 `ads_side.swig` 라는 파일을 생성하고 여기에 소스 코드를 복사/붙여넣기 하시면 됩니다.\n\n{% fi /img/adsense/adsense_man_8.png %}\n\n- 앞선 `ejs` 방법과 똑같이 `\\_marco` 디렉토리 안의 `_sidebar.swig` 파일에(끝에 추가하시면 됩니다) 아래 사진에 적힌 것 처럼 작성해 주시면 됩니다.\n\n{% fi /img/adsense/adsense_man_9.png %}\n\n- `hexo g -d` 를 통해 블로그에 배포하시고 대략 30분 정도 지나면 적용된 것을 확인하실 수 있습니다.\n  디스플레이 광고 이외에도 다른 광고들은 비슷한 방식으로 적용하시면 되겠습니다. 혹시 나중에 기회가 된다면 따로 포스팅 하겠습니다.\n\n{% fi /img/adsense/adsense_man_10.png %}\n\n-----\n\n{% note warning %}\n{% fi /img/adsense/adsense_man_6.png %}\n\n* partial과 include 의 차이점을 아직 잘 모르겠지만... 주의하실 점은\n* 경로를 상대 경로로 지정해 주어야 하는점 `../custom/adsense_side.ejs` (못 읽으면 아래 사진 처럼 나오는 것 같습니다.)\n* sidebar 전체 `<div>` 태그 안에 광고를 넣어야 scroll 시 화면 따라 광고도 움직입니다.\n\n{% fi /img/adsense/adsense_man_7.png %}\n\n{% endnote %}\n","source":"_posts/20190727-hexo-adsense-2.md","raw":"---\ntitle: (Hexo_NexT_Theme) Hexo 블로그에 Google Adsense 설정_2\ndate: 2019-07-27 15:27:20\ncategories:\n  - BLOG\n  - HEXO-NEXT-THEME\ntags: [헥소, 블로그, 테마, adsense, hexo, blog, next-theme, github page]\nsubtitle: Hexo-next-theme 설정\n---\n\n\n{% note info %}\n지난 [Hexo 블로그에 Google Adsense 설정_1](https://taejin0527.github.io/2019/07/17/hexo-adsense-1/) 에 이어 설정하는 방법에 대해 알아보겠습니다.\n{% endnote %}\n\n# 지난 시간\n\n지난 7월 17일 Google Adsense를 신청 했었고 일반적으로 3일 정도 걸린다는 안내와는 다르게 10일이나 걸렸습니다. 승인이 늦게 나는 이유에 대해서는 여러 추측들이 있는 것 같지만 저는 앞선 포스트에서 알려드렸던 설정 외에는 건드린 것이 없고 그저 그 후로도 계속해서 새로운 글을 작성했습니다. 아마 저의 경우 게시글 수가 조금 부족했던 것이 그 이유가 아니였나 하고 생각해봅니다.\n\n{% fi /img/adsense/adsense_accept.png, Google Adsense 승인 메일, Google Adsense 승인 메일 %}\n\nGoogle Search Console이 [2018년 1월](https://en.wikipedia.org/wiki/Google_Search_Console)에 리뉴얼 되었듯이 Google Adsense 또한 조금 새롭게 바뀐 것 같았습니다. 처음 등록해보는 거라 미흡한 부분들이 있을 수도 있지만 제가 사용하는 Hexo_Next_Theme 에 직접 적용하며 하나씩 알아가 보겠습니다.\n\n# 기본 광고 설정\n\n- 메일의 **시작하기** 버튼을 클릭하거나 직접 Google Adsense 웹페이지에 접속하게 되면 아래 창을 만나게 됩니다.\n\n{% fi /img/adsense/adsense_activate.png, Google Adsense 시작하기, Google Adsense 시작하기 %}\n\n- 빠르게 광고 설정을 클릭하여 다음 화면으로 진행하도록 합니다.\n\n{% fi /img/adsense/adsense_auto.png, ,Google Adsense 승인 메일 %}\n\n- 이전에는 머신러닝을 활용한 자동 광고 생성이 없었던 것 같은데 사용자의 편의를 위해 새롭게 이 기능을 제공하는 것 같습니다.\n그보다 상단의 붉은 경고가 눈에 띄는군요.\n\n{% fi /img/adsense/adsense_warning.png, ,ads.txt 파일 경고 %}\n\n- ads.txt 라는 파일에 대해 잘 모르기 때문에 **자세히 알아보기** 버튼을 클릭해 보겠습니다.\n\n{% fi /img/adsense/adsense_adstxt_1.png, ,ads.txt 자세히 알아보기 %}\n\n- 실공급원과 부정적인 공급원을 구분하고 광고 소스를 목록화 하여 손해를 보지 않게 도와주는 텍스트 파일인 것 같습니다. 권장사항이지만 한다고 손해볼 것도 없으니 등록하도록 하겠습니다.\n위 안내글에서 언급되었듯이 직접 애드센스용 ads.txt를 생성할 수도 있지만, 앞선 붉은 경고문에서 **지금 해결하기** 버튼을 클릭하고 쉽게 다운받으실 수도 있습니다.\n(직접 작성하실 경우, **게시자 ID** 는 Adsense 홈페이지 -> 계정 -> 설정 -> 계정 정보에 있습니다.)\n\n{% fi /img/adsense/adsense_adstxt_2.png, ,ads.txt 문제해결 %}\n\n- 이렇게 직접 작성하거나 다운받은 ads.txt 파일을 블로그 테마의 source 폴더에 넣어 주시면 됩니다. (e.g `hexo/themes/next/source`)\n\n{% fi /img/adsense/adsense_adstxt_3.png %}\n\n- `hexo g -d` 를 통해 새롭게 추가한 파일을 블로그에 배포하시면 됩니다. 구글 크롤링 봇의 주기가 24시간이라고 하니, 아마 다음날 해당 문제는 해결될 것 같습니다.\n\n-----\n\n# 자동 광고 설정\n\n- 설명을 먼저 읽어보도록 하겠습니다.\n\n{% fi /img/adsense/adsense_auto_info_1.png %}\n\n- 사용자가 조금 더 콘텐츠에 집중할 수 있도록 항상 광고가 게시되는 것이 아니라 머신러닝 학습으로 최적의 순간(아마 조회수가 많은 포스트에 게시되지 않을까요?)에만 광고가 게시되는 것 같습니다.\n- 아직 방문자도 없고...ㅠ 광고가 게시되는 것을 직접 확인하고 싶어서 자동 광고는 다음으로 미룰까 했었는데 아래의 내용을 보고 적용하기로 결심했습니다.\n\n{% fi /img/adsense/adsense_auto_info_2.png %}\n\n- 즉, 수동으로 광고를 게제한 것과는 별개로 작동하는 것 같아 우선 자동 광고를 적용해보겠습니다.\n\n{% fi /img/adsense/adsense_auto_1.png %}\n\n{% fi /img/adsense/adsense_auto_2.png %}\n\n- 일단 기본값으로 모든 항목에 체크되어 있어서 그대로 진행하였습니다.\n\n{% fi /img/adsense/adsense_auto_3.png %}\n\n- 위 코드 역시 지난번 Google Adsense 등록할 때 `google_adsense.ejs` 파일을 생성하고 `_layout.swig`에 추가했던 내용과 동일한 것으로 너무 편하게(?) 완료를 누리시면 됩니다.\n\n{% fi /img/adsense/adsense_auto_4.png %}\n\n- 순식간에 끝나버렸습니다...ㅎ\n\n-----\n\n# 광고 단위 설정\n\n- **광고 단위** 탭을 누르면 다음과 같은 화면이 나옵니다.\n\n{% fi /img/adsense/adsense_man_1.png %}\n\n- 우선 저는 사이드바에 '디스플레이 광고' 를 게제할 생각입니다.\n\n디스플레이 광고에는 3가지 유형이 있습니다.\n\n- 사각형\n\n{% fi /img/adsense/adsense_man_2.png %}\n\n- 수평형\n\n{% fi /img/adsense/adsense_man_3.png %}\n\n- 수직형\n\n{% fi /img/adsense/adsense_man_4.png %}\n\n- 저는 수직형을 선택하여 진행하였습니다. 좌측 상단의 **광고 단위 이름** 을 지정하고 만들기를 누르시면 됩니다.\n\n{% fi /img/adsense/adsense_man_5.png %}\n\n- 마지막으로 소스 코드를 블로그 layout에 추가해 주시면 되겠습니다.\n\n- `ejs` 파일을 생성하는 방법과 `swig` 파일을 생성하는 방법 2가지가 있습니다. (두 파일의 차이점은 아직 잘 모르겠습니다.)\n  `ejs` 템플릿 엔진으로 광고를 게제하는 방법은 이전에 구글 애드센스를 처음 신청할 때 했던 방법과 비슷합니다.\n  `adsense_side.ejs` 파일을 생성하여 위 소스 코드를 넣어 놓고, `\\_marco` 디렉토리 안의 `_sidebar.swig` 파일에(끝에 추가하시면 됩니다) 적용하시면 됩니다.\n\n\n- 이번에는 색다르게 `swig` 파일을 생성하고 적용하여 보겠습니다.\n  먼저 `\\_third-party` 디렉토리에 `\\ad` 라는 폴더를 생성하겠습니다. 생성한 폴더에 `ads_side.swig` 라는 파일을 생성하고 여기에 소스 코드를 복사/붙여넣기 하시면 됩니다.\n\n{% fi /img/adsense/adsense_man_8.png %}\n\n- 앞선 `ejs` 방법과 똑같이 `\\_marco` 디렉토리 안의 `_sidebar.swig` 파일에(끝에 추가하시면 됩니다) 아래 사진에 적힌 것 처럼 작성해 주시면 됩니다.\n\n{% fi /img/adsense/adsense_man_9.png %}\n\n- `hexo g -d` 를 통해 블로그에 배포하시고 대략 30분 정도 지나면 적용된 것을 확인하실 수 있습니다.\n  디스플레이 광고 이외에도 다른 광고들은 비슷한 방식으로 적용하시면 되겠습니다. 혹시 나중에 기회가 된다면 따로 포스팅 하겠습니다.\n\n{% fi /img/adsense/adsense_man_10.png %}\n\n-----\n\n{% note warning %}\n{% fi /img/adsense/adsense_man_6.png %}\n\n* partial과 include 의 차이점을 아직 잘 모르겠지만... 주의하실 점은\n* 경로를 상대 경로로 지정해 주어야 하는점 `../custom/adsense_side.ejs` (못 읽으면 아래 사진 처럼 나오는 것 같습니다.)\n* sidebar 전체 `<div>` 태그 안에 광고를 넣어야 scroll 시 화면 따라 광고도 움직입니다.\n\n{% fi /img/adsense/adsense_man_7.png %}\n\n{% endnote %}\n","slug":"hexo-adsense-2","published":1,"updated":"2019-07-27T12:38:43.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt878002u2646nsyzr8eh","content":"<div class=\"note info\">\n            <p>지난 <a href=\"https://taejin0527.github.io/2019/07/17/hexo-adsense-1/\">Hexo 블로그에 Google Adsense 설정_1</a> 에 이어 설정하는 방법에 대해 알아보겠습니다.</p>\n          </div>\n\n<h1 id=\"지난-시간\"><a href=\"#지난-시간\" class=\"headerlink\" title=\"지난 시간\"></a>지난 시간</h1><p>지난 7월 17일 Google Adsense를 신청 했었고 일반적으로 3일 정도 걸린다는 안내와는 다르게 10일이나 걸렸습니다. 승인이 늦게 나는 이유에 대해서는 여러 추측들이 있는 것 같지만 저는 앞선 포스트에서 알려드렸던 설정 외에는 건드린 것이 없고 그저 그 후로도 계속해서 새로운 글을 작성했습니다. 아마 저의 경우 게시글 수가 조금 부족했던 것이 그 이유가 아니였나 하고 생각해봅니다.</p>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"Google Adsense 승인 메일\" title=\"Google Adsense 승인 메일\" data-src=\"/img/adsense/adsense_accept.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<p>Google Search Console이 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR29vZ2xlX1NlYXJjaF9Db25zb2xl\" title=\"https://en.wikipedia.org/wiki/Google_Search_Console\">2018년 1월<i class=\"fa fa-external-link\"></i></span>에 리뉴얼 되었듯이 Google Adsense 또한 조금 새롭게 바뀐 것 같았습니다. 처음 등록해보는 거라 미흡한 부분들이 있을 수도 있지만 제가 사용하는 Hexo_Next_Theme 에 직접 적용하며 하나씩 알아가 보겠습니다.</p>\n<h1 id=\"기본-광고-설정\"><a href=\"#기본-광고-설정\" class=\"headerlink\" title=\"기본 광고 설정\"></a>기본 광고 설정</h1><ul>\n<li>메일의 <strong>시작하기</strong> 버튼을 클릭하거나 직접 Google Adsense 웹페이지에 접속하게 되면 아래 창을 만나게 됩니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"Google Adsense 시작하기\" title=\"Google Adsense 시작하기\" data-src=\"/img/adsense/adsense_activate.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>빠르게 광고 설정을 클릭하여 다음 화면으로 진행하도록 합니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt title=\"Google Adsense 승인 메일\" data-src=\"/img/adsense/adsense_auto.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>이전에는 머신러닝을 활용한 자동 광고 생성이 없었던 것 같은데 사용자의 편의를 위해 새롭게 이 기능을 제공하는 것 같습니다.<br>그보다 상단의 붉은 경고가 눈에 띄는군요.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt title=\"ads.txt 파일 경고\" data-src=\"/img/adsense/adsense_warning.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>ads.txt 라는 파일에 대해 잘 모르기 때문에 <strong>자세히 알아보기</strong> 버튼을 클릭해 보겠습니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt title=\"ads.txt 자세히 알아보기\" data-src=\"/img/adsense/adsense_adstxt_1.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>실공급원과 부정적인 공급원을 구분하고 광고 소스를 목록화 하여 손해를 보지 않게 도와주는 텍스트 파일인 것 같습니다. 권장사항이지만 한다고 손해볼 것도 없으니 등록하도록 하겠습니다.<br>위 안내글에서 언급되었듯이 직접 애드센스용 ads.txt를 생성할 수도 있지만, 앞선 붉은 경고문에서 <strong>지금 해결하기</strong> 버튼을 클릭하고 쉽게 다운받으실 수도 있습니다.<br>(직접 작성하실 경우, <strong>게시자 ID</strong> 는 Adsense 홈페이지 -&gt; 계정 -&gt; 설정 -&gt; 계정 정보에 있습니다.)</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt title=\"ads.txt 문제해결\" data-src=\"/img/adsense/adsense_adstxt_2.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>이렇게 직접 작성하거나 다운받은 ads.txt 파일을 블로그 테마의 source 폴더에 넣어 주시면 됩니다. (e.g <code>hexo/themes/next/source</code>)</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_adstxt_3.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li><code>hexo g -d</code> 를 통해 새롭게 추가한 파일을 블로그에 배포하시면 됩니다. 구글 크롤링 봇의 주기가 24시간이라고 하니, 아마 다음날 해당 문제는 해결될 것 같습니다.</li>\n</ul>\n<hr>\n<h1 id=\"자동-광고-설정\"><a href=\"#자동-광고-설정\" class=\"headerlink\" title=\"자동 광고 설정\"></a>자동 광고 설정</h1><ul>\n<li>설명을 먼저 읽어보도록 하겠습니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_auto_info_1.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>사용자가 조금 더 콘텐츠에 집중할 수 있도록 항상 광고가 게시되는 것이 아니라 머신러닝 학습으로 최적의 순간(아마 조회수가 많은 포스트에 게시되지 않을까요?)에만 광고가 게시되는 것 같습니다.</li>\n<li>아직 방문자도 없고…ㅠ 광고가 게시되는 것을 직접 확인하고 싶어서 자동 광고는 다음으로 미룰까 했었는데 아래의 내용을 보고 적용하기로 결심했습니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_auto_info_2.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>즉, 수동으로 광고를 게제한 것과는 별개로 작동하는 것 같아 우선 자동 광고를 적용해보겠습니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_auto_1.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_auto_2.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>일단 기본값으로 모든 항목에 체크되어 있어서 그대로 진행하였습니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_auto_3.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>위 코드 역시 지난번 Google Adsense 등록할 때 <code>google_adsense.ejs</code> 파일을 생성하고 <code>_layout.swig</code>에 추가했던 내용과 동일한 것으로 너무 편하게(?) 완료를 누리시면 됩니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_auto_4.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>순식간에 끝나버렸습니다…ㅎ</li>\n</ul>\n<hr>\n<h1 id=\"광고-단위-설정\"><a href=\"#광고-단위-설정\" class=\"headerlink\" title=\"광고 단위 설정\"></a>광고 단위 설정</h1><ul>\n<li><strong>광고 단위</strong> 탭을 누르면 다음과 같은 화면이 나옵니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_1.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>우선 저는 사이드바에 ‘디스플레이 광고’ 를 게제할 생각입니다.</li>\n</ul>\n<p>디스플레이 광고에는 3가지 유형이 있습니다.</p>\n<ul>\n<li>사각형</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_2.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>수평형</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_3.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>수직형</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_4.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>저는 수직형을 선택하여 진행하였습니다. 좌측 상단의 <strong>광고 단위 이름</strong> 을 지정하고 만들기를 누르시면 됩니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_5.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li><p>마지막으로 소스 코드를 블로그 layout에 추가해 주시면 되겠습니다.</p>\n</li>\n<li><p><code>ejs</code> 파일을 생성하는 방법과 <code>swig</code> 파일을 생성하는 방법 2가지가 있습니다. (두 파일의 차이점은 아직 잘 모르겠습니다.)<br><code>ejs</code> 템플릿 엔진으로 광고를 게제하는 방법은 이전에 구글 애드센스를 처음 신청할 때 했던 방법과 비슷합니다.<br><code>adsense_side.ejs</code> 파일을 생성하여 위 소스 코드를 넣어 놓고, <code>\\_marco</code> 디렉토리 안의 <code>_sidebar.swig</code> 파일에(끝에 추가하시면 됩니다) 적용하시면 됩니다.</p>\n</li>\n</ul>\n<ul>\n<li>이번에는 색다르게 <code>swig</code> 파일을 생성하고 적용하여 보겠습니다.<br>먼저 <code>\\_third-party</code> 디렉토리에 <code>\\ad</code> 라는 폴더를 생성하겠습니다. 생성한 폴더에 <code>ads_side.swig</code> 라는 파일을 생성하고 여기에 소스 코드를 복사/붙여넣기 하시면 됩니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_8.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>앞선 <code>ejs</code> 방법과 똑같이 <code>\\_marco</code> 디렉토리 안의 <code>_sidebar.swig</code> 파일에(끝에 추가하시면 됩니다) 아래 사진에 적힌 것 처럼 작성해 주시면 됩니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_9.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li><code>hexo g -d</code> 를 통해 블로그에 배포하시고 대략 30분 정도 지나면 적용된 것을 확인하실 수 있습니다.<br>디스플레이 광고 이외에도 다른 광고들은 비슷한 방식으로 적용하시면 되겠습니다. 혹시 나중에 기회가 된다면 따로 포스팅 하겠습니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_10.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<hr>\n<div class=\"note warning\">\n            <p><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_6.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span></p><ul><li>partial과 include 의 차이점을 아직 잘 모르겠지만… 주의하실 점은</li><li>경로를 상대 경로로 지정해 주어야 하는점 <code>../custom/adsense_side.ejs</code> (못 읽으면 아래 사진 처럼 나오는 것 같습니다.)</li><li>sidebar 전체 <code>&lt;div&gt;</code> 태그 안에 광고를 넣어야 scroll 시 화면 따라 광고도 움직입니다.</li></ul><p><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_7.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span></p>\n          </div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<div class=\"note info\">\n            <p>지난 <a href=\"https://taejin0527.github.io/2019/07/17/hexo-adsense-1/\">Hexo 블로그에 Google Adsense 설정_1</a> 에 이어 설정하는 방법에 대해 알아보겠습니다.</p>\n          </div>\n\n<h1 id=\"지난-시간\"><a href=\"#지난-시간\" class=\"headerlink\" title=\"지난 시간\"></a>지난 시간</h1><p>지난 7월 17일 Google Adsense를 신청 했었고 일반적으로 3일 정도 걸린다는 안내와는 다르게 10일이나 걸렸습니다. 승인이 늦게 나는 이유에 대해서는 여러 추측들이 있는 것 같지만 저는 앞선 포스트에서 알려드렸던 설정 외에는 건드린 것이 없고 그저 그 후로도 계속해서 새로운 글을 작성했습니다. 아마 저의 경우 게시글 수가 조금 부족했던 것이 그 이유가 아니였나 하고 생각해봅니다.</p>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"Google Adsense 승인 메일\" title=\"Google Adsense 승인 메일\" data-src=\"/img/adsense/adsense_accept.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<p>Google Search Console이 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR29vZ2xlX1NlYXJjaF9Db25zb2xl\" title=\"https://en.wikipedia.org/wiki/Google_Search_Console\">2018년 1월<i class=\"fa fa-external-link\"></i></span>에 리뉴얼 되었듯이 Google Adsense 또한 조금 새롭게 바뀐 것 같았습니다. 처음 등록해보는 거라 미흡한 부분들이 있을 수도 있지만 제가 사용하는 Hexo_Next_Theme 에 직접 적용하며 하나씩 알아가 보겠습니다.</p>\n<h1 id=\"기본-광고-설정\"><a href=\"#기본-광고-설정\" class=\"headerlink\" title=\"기본 광고 설정\"></a>기본 광고 설정</h1><ul>\n<li>메일의 <strong>시작하기</strong> 버튼을 클릭하거나 직접 Google Adsense 웹페이지에 접속하게 되면 아래 창을 만나게 됩니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt=\"Google Adsense 시작하기\" title=\"Google Adsense 시작하기\" data-src=\"/img/adsense/adsense_activate.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>빠르게 광고 설정을 클릭하여 다음 화면으로 진행하도록 합니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt title=\"Google Adsense 승인 메일\" data-src=\"/img/adsense/adsense_auto.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>이전에는 머신러닝을 활용한 자동 광고 생성이 없었던 것 같은데 사용자의 편의를 위해 새롭게 이 기능을 제공하는 것 같습니다.<br>그보다 상단의 붉은 경고가 눈에 띄는군요.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt title=\"ads.txt 파일 경고\" data-src=\"/img/adsense/adsense_warning.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>ads.txt 라는 파일에 대해 잘 모르기 때문에 <strong>자세히 알아보기</strong> 버튼을 클릭해 보겠습니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt title=\"ads.txt 자세히 알아보기\" data-src=\"/img/adsense/adsense_adstxt_1.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>실공급원과 부정적인 공급원을 구분하고 광고 소스를 목록화 하여 손해를 보지 않게 도와주는 텍스트 파일인 것 같습니다. 권장사항이지만 한다고 손해볼 것도 없으니 등록하도록 하겠습니다.<br>위 안내글에서 언급되었듯이 직접 애드센스용 ads.txt를 생성할 수도 있지만, 앞선 붉은 경고문에서 <strong>지금 해결하기</strong> 버튼을 클릭하고 쉽게 다운받으실 수도 있습니다.<br>(직접 작성하실 경우, <strong>게시자 ID</strong> 는 Adsense 홈페이지 -&gt; 계정 -&gt; 설정 -&gt; 계정 정보에 있습니다.)</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" alt title=\"ads.txt 문제해결\" data-src=\"/img/adsense/adsense_adstxt_2.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>이렇게 직접 작성하거나 다운받은 ads.txt 파일을 블로그 테마의 source 폴더에 넣어 주시면 됩니다. (e.g <code>hexo/themes/next/source</code>)</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_adstxt_3.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li><code>hexo g -d</code> 를 통해 새롭게 추가한 파일을 블로그에 배포하시면 됩니다. 구글 크롤링 봇의 주기가 24시간이라고 하니, 아마 다음날 해당 문제는 해결될 것 같습니다.</li>\n</ul>\n<hr>\n<h1 id=\"자동-광고-설정\"><a href=\"#자동-광고-설정\" class=\"headerlink\" title=\"자동 광고 설정\"></a>자동 광고 설정</h1><ul>\n<li>설명을 먼저 읽어보도록 하겠습니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_auto_info_1.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>사용자가 조금 더 콘텐츠에 집중할 수 있도록 항상 광고가 게시되는 것이 아니라 머신러닝 학습으로 최적의 순간(아마 조회수가 많은 포스트에 게시되지 않을까요?)에만 광고가 게시되는 것 같습니다.</li>\n<li>아직 방문자도 없고…ㅠ 광고가 게시되는 것을 직접 확인하고 싶어서 자동 광고는 다음으로 미룰까 했었는데 아래의 내용을 보고 적용하기로 결심했습니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_auto_info_2.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>즉, 수동으로 광고를 게제한 것과는 별개로 작동하는 것 같아 우선 자동 광고를 적용해보겠습니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_auto_1.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_auto_2.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>일단 기본값으로 모든 항목에 체크되어 있어서 그대로 진행하였습니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_auto_3.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>위 코드 역시 지난번 Google Adsense 등록할 때 <code>google_adsense.ejs</code> 파일을 생성하고 <code>_layout.swig</code>에 추가했던 내용과 동일한 것으로 너무 편하게(?) 완료를 누리시면 됩니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_auto_4.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>순식간에 끝나버렸습니다…ㅎ</li>\n</ul>\n<hr>\n<h1 id=\"광고-단위-설정\"><a href=\"#광고-단위-설정\" class=\"headerlink\" title=\"광고 단위 설정\"></a>광고 단위 설정</h1><ul>\n<li><strong>광고 단위</strong> 탭을 누르면 다음과 같은 화면이 나옵니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_1.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>우선 저는 사이드바에 ‘디스플레이 광고’ 를 게제할 생각입니다.</li>\n</ul>\n<p>디스플레이 광고에는 3가지 유형이 있습니다.</p>\n<ul>\n<li>사각형</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_2.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>수평형</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_3.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>수직형</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_4.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>저는 수직형을 선택하여 진행하였습니다. 좌측 상단의 <strong>광고 단위 이름</strong> 을 지정하고 만들기를 누르시면 됩니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_5.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li><p>마지막으로 소스 코드를 블로그 layout에 추가해 주시면 되겠습니다.</p>\n</li>\n<li><p><code>ejs</code> 파일을 생성하는 방법과 <code>swig</code> 파일을 생성하는 방법 2가지가 있습니다. (두 파일의 차이점은 아직 잘 모르겠습니다.)<br><code>ejs</code> 템플릿 엔진으로 광고를 게제하는 방법은 이전에 구글 애드센스를 처음 신청할 때 했던 방법과 비슷합니다.<br><code>adsense_side.ejs</code> 파일을 생성하여 위 소스 코드를 넣어 놓고, <code>\\_marco</code> 디렉토리 안의 <code>_sidebar.swig</code> 파일에(끝에 추가하시면 됩니다) 적용하시면 됩니다.</p>\n</li>\n</ul>\n<ul>\n<li>이번에는 색다르게 <code>swig</code> 파일을 생성하고 적용하여 보겠습니다.<br>먼저 <code>\\_third-party</code> 디렉토리에 <code>\\ad</code> 라는 폴더를 생성하겠습니다. 생성한 폴더에 <code>ads_side.swig</code> 라는 파일을 생성하고 여기에 소스 코드를 복사/붙여넣기 하시면 됩니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_8.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li>앞선 <code>ejs</code> 방법과 똑같이 <code>\\_marco</code> 디렉토리 안의 <code>_sidebar.swig</code> 파일에(끝에 추가하시면 됩니다) 아래 사진에 적힌 것 처럼 작성해 주시면 됩니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_9.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<ul>\n<li><code>hexo g -d</code> 를 통해 블로그에 배포하시고 대략 30분 정도 지나면 적용된 것을 확인하실 수 있습니다.<br>디스플레이 광고 이외에도 다른 광고들은 비슷한 방식으로 적용하시면 되겠습니다. 혹시 나중에 기회가 된다면 따로 포스팅 하겠습니다.</li>\n</ul>\n<span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_10.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span>\n\n<hr>\n<div class=\"note warning\">\n            <p><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_6.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span></p><ul><li>partial과 include 의 차이점을 아직 잘 모르겠지만… 주의하실 점은</li><li>경로를 상대 경로로 지정해 주어야 하는점 <code>../custom/adsense_side.ejs</code> (못 읽으면 아래 사진 처럼 나오는 것 같습니다.)</li><li>sidebar 전체 <code>&lt;div&gt;</code> 태그 안에 광고를 넣어야 scroll 시 화면 따라 광고도 움직입니다.</li></ul><p><span itemprop=\"image\" itemscope itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" class=\"full-image\" data-src=\"/img/adsense/adsense_man_7.png\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span></p>\n          </div>\n"},{"title":"(SW Expert Academy) 연산자 - 6204번 6206번 6207번 6209번 6216번","date":"2019-07-28T08:28:42.000Z","subtitle":"파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법","_content":"\n# 1번 - 6204번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 뒤에 2, 3, 4번 문제도 똑같지만, 출력할 때 '=>' 뒤에 띄여쓰기 2칸이다\n> 이 미묘한 차이 때문에 몇 번이나 오답으로 처리됨...ㅠ\n\n{% note success %}\n{% code lang:python %}\na = float(input())\n\nprint(\"%(ch).2f inch =>  %(cm).2f cm\" % {\"ch\": a, \"cm\": a*2.54})\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 2번 - 6206번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n\n{% note success %}\n{% code lang:python %}\na = float(input())\n\nprint(\"%(kg).2f kg =>  %(lb).2f lb\" % {\"kg\": a, \"lb\": 2.2046*a})\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 3번 - 6207번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 섭씨를 화로 바꾸기 위해서 32를 빼고 1.8을 곱하고 32를 더함\n\n{% note success %}\n{% code lang:python %}\na = float(input())\n\nprint(\"%(dc).2f ℃ =>  %(fc).2f ℉\" % {\"dc\": a, \"fc\": a/100*180+32})\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 4번 - 6209번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 화씨를 섭씨로 바꾸기 위해서 32를 빼고 100/180을 곱함\n\n{% note success %}\n{% code lang:python %}\na = float(input())\n\nprint(\"%(fc).2f ℉ =>  %(dc).2f ℃\" % {\"fc\": a, \"dc\": (a-32)*100/180})\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 5번 - 6216번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n\n{% note success %}\n{% code lang:python %}\nprint(\"혼합된 소금물의 농도: {0:.2f}%\".format(20/3))\n{% endcode %}\n{% endnote %}\n","source":"_posts/20190728-sw-6204.md","raw":"---\ntitle: (SW Expert Academy) 연산자 - 6204번 6206번 6207번 6209번 6216번\ndate: 2019-07-28 17:28:42\ncategories: SW 아카데미\ntags: [삼성, 파이썬 ,SW Academy, python]\nsubtitle: 파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법\n---\n\n# 1번 - 6204번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 뒤에 2, 3, 4번 문제도 똑같지만, 출력할 때 '=>' 뒤에 띄여쓰기 2칸이다\n> 이 미묘한 차이 때문에 몇 번이나 오답으로 처리됨...ㅠ\n\n{% note success %}\n{% code lang:python %}\na = float(input())\n\nprint(\"%(ch).2f inch =>  %(cm).2f cm\" % {\"ch\": a, \"cm\": a*2.54})\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 2번 - 6206번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n\n{% note success %}\n{% code lang:python %}\na = float(input())\n\nprint(\"%(kg).2f kg =>  %(lb).2f lb\" % {\"kg\": a, \"lb\": 2.2046*a})\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 3번 - 6207번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 섭씨를 화로 바꾸기 위해서 32를 빼고 1.8을 곱하고 32를 더함\n\n{% note success %}\n{% code lang:python %}\na = float(input())\n\nprint(\"%(dc).2f ℃ =>  %(fc).2f ℉\" % {\"dc\": a, \"fc\": a/100*180+32})\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 4번 - 6209번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 화씨를 섭씨로 바꾸기 위해서 32를 빼고 100/180을 곱함\n\n{% note success %}\n{% code lang:python %}\na = float(input())\n\nprint(\"%(fc).2f ℉ =>  %(dc).2f ℃\" % {\"fc\": a, \"dc\": (a-32)*100/180})\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 5번 - 6216번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n\n{% note success %}\n{% code lang:python %}\nprint(\"혼합된 소금물의 농도: {0:.2f}%\".format(20/3))\n{% endcode %}\n{% endnote %}\n","slug":"sw-6204","published":1,"updated":"2019-07-28T16:20:47.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt87d002v2646m7qq8nyl","content":"<h1 id=\"1번-6204번\"><a href=\"#1번-6204번\" class=\"headerlink\" title=\"1번 - 6204번\"></a>1번 - 6204번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>뒤에 2, 3, 4번 문제도 똑같지만, 출력할 때 ‘=&gt;’ 뒤에 띄여쓰기 2칸이다<br>이 미묘한 차이 때문에 몇 번이나 오답으로 처리됨…ㅠ</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = float(input())</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%(ch).2f inch =&gt;  %(cm).2f cm\"</span> % &#123;<span class=\"string\">\"ch\"</span>: a, <span class=\"string\">\"cm\"</span>: a*<span class=\"number\">2.54</span>&#125;)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"2번-6206번\"><a href=\"#2번-6206번\" class=\"headerlink\" title=\"2번 - 6206번\"></a>2번 - 6206번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = float(input())</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%(kg).2f kg =&gt;  %(lb).2f lb\"</span> % &#123;<span class=\"string\">\"kg\"</span>: a, <span class=\"string\">\"lb\"</span>: <span class=\"number\">2.2046</span>*a&#125;)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"3번-6207번\"><a href=\"#3번-6207번\" class=\"headerlink\" title=\"3번 - 6207번\"></a>3번 - 6207번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>섭씨를 화로 바꾸기 위해서 32를 빼고 1.8을 곱하고 32를 더함</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = float(input())</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%(dc).2f ℃ =&gt;  %(fc).2f ℉\"</span> % &#123;<span class=\"string\">\"dc\"</span>: a, <span class=\"string\">\"fc\"</span>: a/<span class=\"number\">100</span>*<span class=\"number\">180</span>+<span class=\"number\">32</span>&#125;)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"4번-6209번\"><a href=\"#4번-6209번\" class=\"headerlink\" title=\"4번 - 6209번\"></a>4번 - 6209번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>화씨를 섭씨로 바꾸기 위해서 32를 빼고 100/180을 곱함</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = float(input())</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%(fc).2f ℉ =&gt;  %(dc).2f ℃\"</span> % &#123;<span class=\"string\">\"fc\"</span>: a, <span class=\"string\">\"dc\"</span>: (a<span class=\"number\">-32</span>)*<span class=\"number\">100</span>/<span class=\"number\">180</span>&#125;)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"5번-6216번\"><a href=\"#5번-6216번\" class=\"headerlink\" title=\"5번 - 6216번\"></a>5번 - 6216번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"혼합된 소금물의 농도: &#123;0:.2f&#125;%\"</span>.format(<span class=\"number\">20</span>/<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n          </div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1번-6204번\"><a href=\"#1번-6204번\" class=\"headerlink\" title=\"1번 - 6204번\"></a>1번 - 6204번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>뒤에 2, 3, 4번 문제도 똑같지만, 출력할 때 ‘=&gt;’ 뒤에 띄여쓰기 2칸이다<br>이 미묘한 차이 때문에 몇 번이나 오답으로 처리됨…ㅠ</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = float(input())</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%(ch).2f inch =&gt;  %(cm).2f cm\"</span> % &#123;<span class=\"string\">\"ch\"</span>: a, <span class=\"string\">\"cm\"</span>: a*<span class=\"number\">2.54</span>&#125;)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"2번-6206번\"><a href=\"#2번-6206번\" class=\"headerlink\" title=\"2번 - 6206번\"></a>2번 - 6206번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = float(input())</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%(kg).2f kg =&gt;  %(lb).2f lb\"</span> % &#123;<span class=\"string\">\"kg\"</span>: a, <span class=\"string\">\"lb\"</span>: <span class=\"number\">2.2046</span>*a&#125;)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"3번-6207번\"><a href=\"#3번-6207번\" class=\"headerlink\" title=\"3번 - 6207번\"></a>3번 - 6207번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>섭씨를 화로 바꾸기 위해서 32를 빼고 1.8을 곱하고 32를 더함</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = float(input())</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%(dc).2f ℃ =&gt;  %(fc).2f ℉\"</span> % &#123;<span class=\"string\">\"dc\"</span>: a, <span class=\"string\">\"fc\"</span>: a/<span class=\"number\">100</span>*<span class=\"number\">180</span>+<span class=\"number\">32</span>&#125;)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"4번-6209번\"><a href=\"#4번-6209번\" class=\"headerlink\" title=\"4번 - 6209번\"></a>4번 - 6209번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>화씨를 섭씨로 바꾸기 위해서 32를 빼고 100/180을 곱함</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = float(input())</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%(fc).2f ℉ =&gt;  %(dc).2f ℃\"</span> % &#123;<span class=\"string\">\"fc\"</span>: a, <span class=\"string\">\"dc\"</span>: (a<span class=\"number\">-32</span>)*<span class=\"number\">100</span>/<span class=\"number\">180</span>&#125;)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"5번-6216번\"><a href=\"#5번-6216번\" class=\"headerlink\" title=\"5번 - 6216번\"></a>5번 - 6216번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"혼합된 소금물의 농도: &#123;0:.2f&#125;%\"</span>.format(<span class=\"number\">20</span>/<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n          </div>\n"},{"title":"(파이썬) 04 Lists","date":"2019-07-22T07:05:45.000Z","subtitle":"Kaggle 홈페이지 Python 강좌 참고","_content":"\n# Reference\n\n- Kaggle 홈페이지 - [Kaggle](https://www.kaggle.com)\n- 7강 'Lists' - [Python Micro-Course Home Page](https://www.kaggle.com/colinmorris/lists)\n\n> 영어 실력이 부족하여 문맥이 이해가 가지 않는 부분은 원본을 참고하시길 바랍니다...\n> 언젠가는 실력이 나아지기를...\n\n------\n\n<br>\n\n# 리스트(Lists)\n\n파이썬의 Lists 는 정렬된 순서의 값을 나냅니다. 아래의 예제를 통해 어떻게 생성하는지 살펴보겠습니다.\n\n{% tabs create_lists %}\n  <!-- tab INT_type @code -->\n    {% code lang:python %}\n      primes = [2, 3, 5, 7]{% endcode %}\n  <!-- endtab -->\n\n  <!-- tab string_type @code -->\n  lists 에는 다른 타입의 데이터도 넣을 수 있습니다.\n\n  {% code lang:python %}\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']{% endcode %}\n  <!-- endtab -->\n\n  <!-- tab list_of_lists @code -->\n  list의 list를 만들 수도 있습니다.\n\n  {% code lang:python %}\n    hands = [\n        ['J', 'Q', 'K'],\n        ['2', '2', '2'],\n        ['6', 'A', 'K'], # (Comma after the last element is optional)\n    ]\n    # (I could also have written this on one line, but it can get hard to read)\n    hands = [['J', 'Q', 'K'], ['2', '2', '2'], ['6', 'A', 'K']]{% endcode %}\n  <!-- endtab -->\n\n  <!-- tab mix_type @code -->\n  서로 다른 타입의 변수들도 같이 넣을 수 있습니다.\n\n  {% code lang:python %}\n    my_favourite_things = [32, 'raindrops on roses', help]\n    # (Yes, Python's help function is *definitely* one of my favourite things){% endcode %}\n  <!-- endtab -->\n{% endtabs %}\n\n## 색인(Indexing)\n\n대괄호를 사용하여 list의 각 요소에 접근할 수 있습니다.\n\n**어떤 행성이 태양과 가장 가까울까요?**\n\n{% tabs indexing %}\n  <!-- tab CLOSEST @code -->\n  파이썬은 0부터 시작하는 인덱싱을 사용하므로 첫 번째 요소의 인덱스는 0 입니다.\n\n    {% code lang:python %}\n      planets[0]{% endcode %}\n    {% code %}\n      'Mercury'{% endcode %}  \n  <!-- endtab -->\n\n  <!-- tab NEXT_CLOSEST @code -->\n  다음으로 가까운 행성은 어디일까요?\n\n  {% code lang:python %}\n    planets[1]{% endcode %}\n  {% code %}\n    'Venus'{% endcode %}  \n  <!-- endtab -->\n\n  <!-- tab FURTHEST @code -->\n  태양으로 부터 가장 먼 행성은 어느 것일까요?\n  목록의 끝에있는 요소는 -1부터 시작하여 음수로 액세스 할 수 있습니다.\n\n  {% code lang:python %}\n    planets[-1]{% endcode %}\n  {% code %}\n    'Neptune'{% endcode %}  \n  <!-- endtab -->\n\n  <!-- tab NEXT_FURTHEST @code -->\n  {% code lang:python %}\n    planets[-2]{% endcode %}\n  {% code %}\n    'Uranus'{% endcode %}  \n  <!-- endtab -->\n{% endtabs %}\n\n## 슬라이싱(Slicing)\n\n첫 3개의 행성은 어떤 것인가요? `slicing` 을 통해 우리는 답을 얻을 수 있습니다.\n\n{% tabs slicing_1 %}\n  <!-- tab CODE_1 @code -->\n  `planets[0:3]` 은 인덱스 0 이상 3 미만의 `planet` 의 요소들을 가리킵니다.\n\n  {% code lang:python %}\n    planets[0:3]{% endcode %}\n  {% code %}\n    ['Mercury', 'Venus', 'Earth']{% endcode %}  \n  <!-- endtab -->\n\n  <!-- tab CODE_2 @code -->\n  시작과 끝 인덱스는 모두 선택사항(optional)입니다. 시작 인덱스를 생략하면 0 으로 간주됩니다. 따라서 다음과 같이 작성할 수도 있습니다.\n\n  {% code lang:python %}\n    planets[:3]{% endcode %}\n  {% code %}\n    ['Mercury', 'Venus', 'Earth']{% endcode %}  \n\n  {% note default no-icon %}\n    마지막 인덱스를 생략하면 범위를 list의 길이로 간주합니다.\n\n    {% code lang:python %}\n      planets[3:]{% endcode %}\n    {% code %}\n      ['Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']{% endcode %}\n    즉, 인덱스 3부터 시작하는 모든 요소들을 나타냅니다.\n  {% endnote %}\n  <!-- endtab -->\n{% endtabs %}\n\n슬라이싱할 때 음수 인덱스를 사용할 수도 있습니다.\n\n{% note no-icon %}\n  처음과 마지막을 제외한 모든 행성\n  {% code lang:python %}\n  # All the planets except the first and last\n  planets[1:-1]\n  {% endcode %}\n  {% code %}\n  ['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus']\n  {% endcode %}\n{% endnote %}\n\n{% note no-icon %}\n  마지막 행성 3개\n  {% code lang:python %}\n  # The last 3 planets\n  planets[-3:]\n  {% endcode %}\n  {% code %}\n  ['Saturn', 'Uranus', 'Neptune']\n  {% endcode %}\n{% endnote %}\n\n## 리스트 수정(Changing lists)\n\nlist는 \"변경 가능(mutable)\" 하며, 이는 \"제자리(in place)\"에서 수정할 수 있음을 의미합니다.\n\nlist를 수정하는 한 가지 방법은 인덱스 또는 슬라이스를 사용하는 방법입니다.\n\n예를 들어 Mars(화성)의 이름을 바꾸고 싶다고합시다 :\n\n{% note no-icon %}\n  {% code lang:python %}\n    planets[3] = 'Malacandra'\n    planets{% endcode %}\n\n  {% spoiler Malacandra가_뭐지? %}\n    나니아 연대기로 유명한 C. S. Lewis의 소설 [침묵의 행성 밖으로(Out of the Silent Planet)](https://en.wikipedia.org/wiki/Out_of_the_Silent_Planet)에서 화성인들을 Ma'aleca'andra 라고 부릅니다.\n  {% endspoiler %}\n\n  {% code %}\n  ['Mercury', 'Venus', 'Earth', 'Malacandra', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']{% endcode %}\n\n{% endnote %}\n\n음... 이름이 너무 긴 것 같군요. 첫 3개 행성들의 이름을 줄여보겠습니다.\n\n{% note no-icon %}\n  {% code lang:python %}\n    planets[:3] = ['Mur', 'Vee', 'Ur']\n    print(planets)\n    # 출력 이후 변경 사항들을 되돌려 놓겠습니다.\n    planets[:4] = ['Mercury', 'Venus', 'Earth', 'Mars',]{% endcode %}\n\n  {% code %}\n    ['Mur', 'Vee', 'Ur', 'Malacandra', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']{% endcode %}\n{% endnote %}\n\n## 리스트 함수(List functions)\n\n파이썬은 list를 사용하는데 매우 유용한 몇 가지 함수들을 제공합니다.\n\n{% tabs list_functions %}\n<!-- tab LEN @code -->\n{% note primary no-icon %}\n  `len` 은 list의 길이를 알려줍니다.\n\n  {% code lang:python %}\n  # How many planets are there?\n  len(planets)  {% endcode %}\n\n  {% code %}\n  8 {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab SORT @code -->\n{% note primary no-icon %}\n  `sorted` 는 정렬된 list를 반환합니다.\n\n  {% code lang:python %}\n  # The planets sorted in alphabetical order\n  sorted(planets) {% endcode %}\n\n  {% code %}\n  ['Earth', 'Jupiter', 'Mars', 'Mercury', 'Neptune', 'Saturn', 'Uranus', 'Venus'] {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab SUM @code -->\n{% note primary no-icon %}\n  `sum` 은 무엇을 반환할지 눈치채셨을 겁니다.\n\n  {% code lang:python %}\n  primes = [2, 3, 5, 7]\n  sum(primes) {% endcode %}\n\n  {% code %}\n  17 {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab MAX @code -->\n{% note primary no-icon %}\n  이전에 `min` 및 `max` 를 사용하여 최소 또는 최대 인수를 구해봤습니다. 우리는 하나의 list를 매개 변수로 전달할 수도 있습니다.\n\n  {% code lang:python %}\n    max(primes) {% endcode %}\n\n    {% code %}\n    7 {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n## 참고: 객체(Interlude: objects)\n\n지금까지 'Object(객체)'라는 용어를 많이 사용했습니다 - 파이썬에서 모든 것이 객체라는 것을 들어보셨을 수도 있습니다. 이것이 무엇을 의미할까요?\n간단히 말해서, 객체들은 무언가(변수, 함수 등)를 주변에 가지고 다닙니다. 그리고 우리는 파이썬의 도트 구문(dot syntax)을 사용하여 그것들에 액세스 할 수 있습니다.\n\n예를 들어 파이썬의 numbers에는 `imag` 라는 허수를 나타내는 변수를 가지고 있습니다. (특별한 경우의 수학 연산을 하지 않는 한, 이것을 사용할 필요는 없을 것입니다.)\n\n{% note no-icon %}\n{% code lang:python %}\nx = 12\n# x is a real number, so its imaginary part is 0.\nprint(x.imag)\n# Here's how to make a complex number, in case you've ever been curious:\nc = 12 + 3j\nprint(c.imag) {% endcode %}\n\n{% code %}\n0\n3.0 {% endcode %}\n{% endnote %}\n\n객체가 운반하는 것들 중에는 함수들도 포함되어 있습니다. 객체에 속한 함수를 **메소드(method)** 라고합니다. (`imag` 와 같이 객체에 속한 기능이 없는 객체를 **속성(attribute)** 이라고 합니다.)\n\n예를 들어 numbers에는 `bit_length` 라는 메서드가 있습니다. 다시 말하지만, 도트 ​​구문을 사용하여 액세스할 수 있습니다.\n\n{% note danger %}\n{% code lang:python %}\nx.bit_length  {% endcode %}\n{% code %}\n<function int.bit_length> {% endcode %}\n{% endnote %}\n\n메소드를 호출하기 위해서는 괄호를 추가해야 합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nx.bit_length()  {% endcode %}\n{% code %}\n4 {% endcode %}\n{% endnote %}\n\n`help` 함수에 함수들을 전달했듯이(e.g. `help(max)`), 메소드들도 똑같이 전달할 수 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\nhelp(x.bit_length)  {% endcode %}\n{% code %}\nHelp on built-in function bit_length:\n\nbit_length(...) method of builtins.int instance\n    int.bit_length() -> int\n\n    Number of bits necessary to represent self in binary.\n    >>> bin(37)\n    '0b100101'\n    >>> (37).bit_length()\n    6 {% endcode %}\n\n{% endnote %}\n\n앞선 예들은 매우 애매한 것들이였습니다. 지금까지 살펴본 객체 유형들(numbers, functions, booleans)의 속성이나 메소드들은 흔히 사용되지 않는 것들이기 때문입니다.\n\n하지만 list에는 항상 자주 사용되는 몇 가지 메소드들이 있습니다.\n\n## 리스트 메소드들(List methods)\n\n`list.append` 를 사용하여 list의 마지막에 item을 추가할 수 있습니다:\n\n{% tabs list_append %}\n<!-- tab .APPEND @code -->\n{% note no-icon %}\n{% code lang:python %}\n# Pluto is a planet darn it!\nplanets.append('Pluto')\nplanets {% endcode %}\n\n{% code %}\n['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto'] {% endcode %}\n{% endnote %}\n\n\n왜 `append()` 함수에는 반환값이 없을까요? `help(planets.append)` 를 호출하여 설명서를 확인해 보세요.\n\n> **잠깐** : `append`는 `planets`에만 있는 메소드가 아니라 모든 리스트 타입의 객체가 가지고 다니는 메소드이므로 `help(list.append)`를 호출해도 됩니다. 하지만 `help(append)`는 호출하면 Python에서 \"append\"라는 변수가 없다고 응답할 것 입니다. \"append\"는 리스트 내에만 존재합니다 - 내장 함수인 `max` 나 `len` 와 같이 독립적으로 존재하지 않습니다.\n\n<!-- endtab -->\n\n<!-- tab HELP @book -->\n{% note info no-icon %}\n`-> None` 은 `list.append` 가 아무것도 반환하지 않는다는 것을 말합니다. 하지만 `planets`를 확인해보면 메소드의 호출로 값이 제대로 추가된 것을 볼 수 있습니다 :\n\n{% code lang:python %}\nhelp(planets.append) {% endcode %}\n\n{% code %}\nHelp on built-in function append:\n\nappend(...) method of builtins.list instance\n    L.append(object) -> None -- append object to end {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n`list.pop` 은 list의 마지막 element를 제거하고 반환합니다:\n\n{% note no-icon %}\n{% code lang:python %}\nplanets.pop()\nplanets  {% endcode %}\n{% code %}\n'Pluto'\n['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'] {% endcode %}\n{% endnote %}\n\n\n### 리스트 검색(Searching lists)\n\n지구는 태양계의 몇 번째 행성일까요? `list.index` 를 사용해서 해당 색인(index)을 알아낼 수 있습니다.\n\n```PYTHON\nplanets.index('Earth')\n```\n```\n2\n```\n\n3번째 행성이군요.(i.e. 색인은 0에서 시작하기 때문)\n그렇다면 플루토 행성은 몇 번째 일까요?\n\n```python\nplanets.index('Pluto')\n```\n```python\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-30-3a8584cba91a> in <module>()\n----> 1 planets.index('Pluto')\n\nValueError: 'Pluto' is not in list\n```\n\n저런, 이전 예제에서 'Pluto'를 삭제 했었다는걸 까먹었군요\n이와 같은 예상치 못한 상황을 피하기 위해 `in` 연산자를 사용하여 목록에 특정한 값이 들어 있는지를 확인할 수 있습니다.\n\n{% tabs search_examples %}\n<!-- tab EXAMPLE_1 @eye -->\n{% code lang:python %}\n# Is Earth a planet?\n\"Earth\" in planets  {% endcode %}\n{% code %}\nTrue  {% endcode %}\n<!-- endtab -->\n\n<!-- tab EXAMPLE_2 @eye -->\n{% code lang:python %}\n# Is Calbefraques a planet?\n\"Calbefraques\" in planets {% endcode %}\n{% code %}\nFalse {% endcode %}\n<!-- endtab -->\n{% endtabs %}\n\n이 외에도 여기서 다루지 않은 몇 가지 흥미로운 list 메소드들이 있습니다. 특정 객체에 포함된 모든 메소드와 속성들을 알고 싶다면 객체 자체에서 `help()` 를 호출하시면 됩니다. 예를 들어, `help(planets)` 는 모든 list 메서드에 대해 알려줍니다.\n\n{% tabs help_planets %}\n<!-- tab CODE @code -->\n{% code lang:python %}\nhelp(planets) {% endcode %}\n<!-- endtab -->\n\n<!-- tab output @terminal -->\n{% code lang:python %}\n  Help on list object:\n\n  class list(object)\n   |  list() -> new empty list\n   |  list(iterable) -> new list initialized from iterable's items\n   |  \n   |  Methods defined here:\n   |  \n   |  __add__(self, value, /)\n   |      Return self+value.\n   |  \n   |  __contains__(self, key, /)\n   |      Return key in self.\n   |  \n   |  __delitem__(self, key, /)\n   |      Delete self[key].\n   |  \n   |  __eq__(self, value, /)\n   |      Return self==value.\n   |  \n   |  __ge__(self, value, /)\n   |      Return self>=value.\n   |  \n   |  __getattribute__(self, name, /)\n   |      Return getattr(self, name).\n   |  \n   |  __getitem__(...)\n   |      x.__getitem__(y) <==> x[y]\n   |  \n   |  __gt__(self, value, /)\n   |      Return self>value.\n   |  \n   |  __iadd__(self, value, /)\n   |      Implement self+=value.\n   |  \n   |  __imul__(self, value, /)\n   |      Implement self*=value.\n   |  \n   |  __init__(self, /, *args, **kwargs)\n   |      Initialize self.  See help(type(self)) for accurate signature.\n   |  \n   |  __iter__(self, /)\n   |      Implement iter(self).\n   |  \n   |  __le__(self, value, /)\n   |      Return self<=value.\n   |  \n   |  __len__(self, /)\n   |      Return len(self).\n   |  \n   |  __lt__(self, value, /)\n   |      Return self<value.\n   |  \n   |  __mul__(self, value, /)\n   |      Return self*value.\n   |  \n   |  __ne__(self, value, /)\n   |      Return self!=value.\n   |  \n   |  __new__(*args, **kwargs) from builtins.type\n   |      Create and return a new object.  See help(type) for accurate signature.\n   |  \n   |  __repr__(self, /)\n   |      Return repr(self).\n   |  \n   |  __reversed__(...)\n   |      L.__reversed__() -- return a reverse iterator over the list\n   |  \n   |  __rmul__(self, value, /)\n   |      Return value*self.\n   |  \n   |  __setitem__(self, key, value, /)\n   |      Set self[key] to value.\n   |  \n   |  __sizeof__(...)\n   |      L.__sizeof__() -- size of L in memory, in bytes\n   |  \n   |  append(...)\n   |      L.append(object) -> None -- append object to end\n   |  \n   |  clear(...)\n   |      L.clear() -> None -- remove all items from L\n   |  \n   |  copy(...)\n   |      L.copy() -> list -- a shallow copy of L\n   |  \n   |  count(...)\n   |      L.count(value) -> integer -- return number of occurrences of value\n   |  \n   |  extend(...)\n   |      L.extend(iterable) -> None -- extend list by appending elements from the iterable\n   |  \n   |  index(...)\n   |      L.index(value, [start, [stop]]) -> integer -- return first index of value.\n   |      Raises ValueError if the value is not present.\n   |  \n   |  insert(...)\n   |      L.insert(index, object) -- insert object before index\n   |  \n   |  pop(...)\n   |      L.pop([index]) -> item -- remove and return item at index (default last).\n   |      Raises IndexError if list is empty or index is out of range.\n   |  \n   |  remove(...)\n   |      L.remove(value) -> None -- remove first occurrence of value.\n   |      Raises ValueError if the value is not present.\n   |  \n   |  reverse(...)\n   |      L.reverse() -- reverse *IN PLACE*\n   |  \n   |  sort(...)\n   |      L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*\n   |  \n   |  ----------------------------------------------------------------------\n   |  Data and other attributes defined here:\n   |  \n   |  __hash__ = None {% endcode %}\n<!-- endtab -->\n{% endtabs %}\n\n\"output\" 탭을 클릭해서 전체 도움말을 살펴 보세요. list 에는 `__eq__` 및 `__iadd__` 와 같은 이상한 이름의 메소드들이 많이 있습니다. 지금은 이것들에 대해 크게 신경쓸 필요가 없습니다. (이러한 메서드를 아마 평생 여러분이 직접 호출하지는 않을 것입니다. 그러나 색인 연산자나 비교 연산자와 같은 구문을 사용할 때, 이들은 배후에서 호출됩니다) 가장 흥미로운 메서드들은 목록 맨 아래에 있습니다(`append`, `clear`, `copy` 등).\n\n\n## 튜플(Tuples)\n\nTuple은 list와 매우 비슷합니다. 단 2 가지 면에서 조금 다릅니다.\n\n**1:** 대괄호 대신 소괄호를 사용하여 생성합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nt = (1, 2, 3) {% endcode %}\n혹은\n{% code lang:python %}\nt = 1, 2, 3 # 위와 동일한 내용입니다\nt {% endcode %}\n{% code %}\n(1, 2, 3) {% endcode %}\n{% endnote %}\n\n**2:** 수정이 불가능 합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nx = 0.125\nx.as_integer_ratio() {% endcode %}\n{% code lang:python %}\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-36-e6cf7836e708> in <module>()\n----> 1 t[0] = 100\n\nTypeError: 'tuple' object does not support item assignment  {% endcode %}\n{% endnote %}\n\n튜플은 여러 개의 반환 값을 갖는 함수에 자주 사용됩니다.\n예를 들어, float 객체의 `as_integer_ratio()` 메소드는 분자와 분모를 튜플 형태로 반환합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nx = 0.125\nx.as_integer_ratio() {% endcode %}\n{% code lang:python %}\n(1, 8)  {% endcode %}\n{% endnote %}\n\n여러 개의 값들을 각각의 변수로 할당이 가능합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nnumerator, denominator = x.as_integer_ratio()\nprint(numerator / denominator) {% endcode %}\n{% code lang:python %}\n0.125  {% endcode %}\n{% endnote %}\n\n이제 우리는 두 개의 변수를 교환하는 것 처럼 보이는 고전적인 Stupid Python Trick™ (파이썬 속임수?)의 본질을 꿰뚫어볼 수 있게 되었습니다!\n\n{% note no-icon %}\n{% code lang:python %}\na = 1\nb = 0\na, b = b, a\nprint(a, b) {% endcode %}\n{% code lang:python %}\n0 1  {% endcode %}\n{% endnote %}\n\n<br><br><br>\n# 연습문제(Your Turn)\n\n[리스트(lists) 예제](https://www.kaggle.com/kernels/fork/1275173)\n","source":"_posts/20190722-04-lists.md","raw":"---\ntitle: (파이썬) 04 Lists\ndate: 2019-07-22 16:05:45\ncategories:\n  - LANGUAGE\n  - PYTHON\ntags: [파이썬, 캐글, 튜토리얼, kaggle, programming language, python, language, booleans, conditionals, tutorial]\nsubtitle: Kaggle 홈페이지 Python 강좌 참고\n---\n\n# Reference\n\n- Kaggle 홈페이지 - [Kaggle](https://www.kaggle.com)\n- 7강 'Lists' - [Python Micro-Course Home Page](https://www.kaggle.com/colinmorris/lists)\n\n> 영어 실력이 부족하여 문맥이 이해가 가지 않는 부분은 원본을 참고하시길 바랍니다...\n> 언젠가는 실력이 나아지기를...\n\n------\n\n<br>\n\n# 리스트(Lists)\n\n파이썬의 Lists 는 정렬된 순서의 값을 나냅니다. 아래의 예제를 통해 어떻게 생성하는지 살펴보겠습니다.\n\n{% tabs create_lists %}\n  <!-- tab INT_type @code -->\n    {% code lang:python %}\n      primes = [2, 3, 5, 7]{% endcode %}\n  <!-- endtab -->\n\n  <!-- tab string_type @code -->\n  lists 에는 다른 타입의 데이터도 넣을 수 있습니다.\n\n  {% code lang:python %}\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']{% endcode %}\n  <!-- endtab -->\n\n  <!-- tab list_of_lists @code -->\n  list의 list를 만들 수도 있습니다.\n\n  {% code lang:python %}\n    hands = [\n        ['J', 'Q', 'K'],\n        ['2', '2', '2'],\n        ['6', 'A', 'K'], # (Comma after the last element is optional)\n    ]\n    # (I could also have written this on one line, but it can get hard to read)\n    hands = [['J', 'Q', 'K'], ['2', '2', '2'], ['6', 'A', 'K']]{% endcode %}\n  <!-- endtab -->\n\n  <!-- tab mix_type @code -->\n  서로 다른 타입의 변수들도 같이 넣을 수 있습니다.\n\n  {% code lang:python %}\n    my_favourite_things = [32, 'raindrops on roses', help]\n    # (Yes, Python's help function is *definitely* one of my favourite things){% endcode %}\n  <!-- endtab -->\n{% endtabs %}\n\n## 색인(Indexing)\n\n대괄호를 사용하여 list의 각 요소에 접근할 수 있습니다.\n\n**어떤 행성이 태양과 가장 가까울까요?**\n\n{% tabs indexing %}\n  <!-- tab CLOSEST @code -->\n  파이썬은 0부터 시작하는 인덱싱을 사용하므로 첫 번째 요소의 인덱스는 0 입니다.\n\n    {% code lang:python %}\n      planets[0]{% endcode %}\n    {% code %}\n      'Mercury'{% endcode %}  \n  <!-- endtab -->\n\n  <!-- tab NEXT_CLOSEST @code -->\n  다음으로 가까운 행성은 어디일까요?\n\n  {% code lang:python %}\n    planets[1]{% endcode %}\n  {% code %}\n    'Venus'{% endcode %}  \n  <!-- endtab -->\n\n  <!-- tab FURTHEST @code -->\n  태양으로 부터 가장 먼 행성은 어느 것일까요?\n  목록의 끝에있는 요소는 -1부터 시작하여 음수로 액세스 할 수 있습니다.\n\n  {% code lang:python %}\n    planets[-1]{% endcode %}\n  {% code %}\n    'Neptune'{% endcode %}  \n  <!-- endtab -->\n\n  <!-- tab NEXT_FURTHEST @code -->\n  {% code lang:python %}\n    planets[-2]{% endcode %}\n  {% code %}\n    'Uranus'{% endcode %}  \n  <!-- endtab -->\n{% endtabs %}\n\n## 슬라이싱(Slicing)\n\n첫 3개의 행성은 어떤 것인가요? `slicing` 을 통해 우리는 답을 얻을 수 있습니다.\n\n{% tabs slicing_1 %}\n  <!-- tab CODE_1 @code -->\n  `planets[0:3]` 은 인덱스 0 이상 3 미만의 `planet` 의 요소들을 가리킵니다.\n\n  {% code lang:python %}\n    planets[0:3]{% endcode %}\n  {% code %}\n    ['Mercury', 'Venus', 'Earth']{% endcode %}  \n  <!-- endtab -->\n\n  <!-- tab CODE_2 @code -->\n  시작과 끝 인덱스는 모두 선택사항(optional)입니다. 시작 인덱스를 생략하면 0 으로 간주됩니다. 따라서 다음과 같이 작성할 수도 있습니다.\n\n  {% code lang:python %}\n    planets[:3]{% endcode %}\n  {% code %}\n    ['Mercury', 'Venus', 'Earth']{% endcode %}  \n\n  {% note default no-icon %}\n    마지막 인덱스를 생략하면 범위를 list의 길이로 간주합니다.\n\n    {% code lang:python %}\n      planets[3:]{% endcode %}\n    {% code %}\n      ['Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']{% endcode %}\n    즉, 인덱스 3부터 시작하는 모든 요소들을 나타냅니다.\n  {% endnote %}\n  <!-- endtab -->\n{% endtabs %}\n\n슬라이싱할 때 음수 인덱스를 사용할 수도 있습니다.\n\n{% note no-icon %}\n  처음과 마지막을 제외한 모든 행성\n  {% code lang:python %}\n  # All the planets except the first and last\n  planets[1:-1]\n  {% endcode %}\n  {% code %}\n  ['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus']\n  {% endcode %}\n{% endnote %}\n\n{% note no-icon %}\n  마지막 행성 3개\n  {% code lang:python %}\n  # The last 3 planets\n  planets[-3:]\n  {% endcode %}\n  {% code %}\n  ['Saturn', 'Uranus', 'Neptune']\n  {% endcode %}\n{% endnote %}\n\n## 리스트 수정(Changing lists)\n\nlist는 \"변경 가능(mutable)\" 하며, 이는 \"제자리(in place)\"에서 수정할 수 있음을 의미합니다.\n\nlist를 수정하는 한 가지 방법은 인덱스 또는 슬라이스를 사용하는 방법입니다.\n\n예를 들어 Mars(화성)의 이름을 바꾸고 싶다고합시다 :\n\n{% note no-icon %}\n  {% code lang:python %}\n    planets[3] = 'Malacandra'\n    planets{% endcode %}\n\n  {% spoiler Malacandra가_뭐지? %}\n    나니아 연대기로 유명한 C. S. Lewis의 소설 [침묵의 행성 밖으로(Out of the Silent Planet)](https://en.wikipedia.org/wiki/Out_of_the_Silent_Planet)에서 화성인들을 Ma'aleca'andra 라고 부릅니다.\n  {% endspoiler %}\n\n  {% code %}\n  ['Mercury', 'Venus', 'Earth', 'Malacandra', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']{% endcode %}\n\n{% endnote %}\n\n음... 이름이 너무 긴 것 같군요. 첫 3개 행성들의 이름을 줄여보겠습니다.\n\n{% note no-icon %}\n  {% code lang:python %}\n    planets[:3] = ['Mur', 'Vee', 'Ur']\n    print(planets)\n    # 출력 이후 변경 사항들을 되돌려 놓겠습니다.\n    planets[:4] = ['Mercury', 'Venus', 'Earth', 'Mars',]{% endcode %}\n\n  {% code %}\n    ['Mur', 'Vee', 'Ur', 'Malacandra', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']{% endcode %}\n{% endnote %}\n\n## 리스트 함수(List functions)\n\n파이썬은 list를 사용하는데 매우 유용한 몇 가지 함수들을 제공합니다.\n\n{% tabs list_functions %}\n<!-- tab LEN @code -->\n{% note primary no-icon %}\n  `len` 은 list의 길이를 알려줍니다.\n\n  {% code lang:python %}\n  # How many planets are there?\n  len(planets)  {% endcode %}\n\n  {% code %}\n  8 {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab SORT @code -->\n{% note primary no-icon %}\n  `sorted` 는 정렬된 list를 반환합니다.\n\n  {% code lang:python %}\n  # The planets sorted in alphabetical order\n  sorted(planets) {% endcode %}\n\n  {% code %}\n  ['Earth', 'Jupiter', 'Mars', 'Mercury', 'Neptune', 'Saturn', 'Uranus', 'Venus'] {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab SUM @code -->\n{% note primary no-icon %}\n  `sum` 은 무엇을 반환할지 눈치채셨을 겁니다.\n\n  {% code lang:python %}\n  primes = [2, 3, 5, 7]\n  sum(primes) {% endcode %}\n\n  {% code %}\n  17 {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab MAX @code -->\n{% note primary no-icon %}\n  이전에 `min` 및 `max` 를 사용하여 최소 또는 최대 인수를 구해봤습니다. 우리는 하나의 list를 매개 변수로 전달할 수도 있습니다.\n\n  {% code lang:python %}\n    max(primes) {% endcode %}\n\n    {% code %}\n    7 {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n## 참고: 객체(Interlude: objects)\n\n지금까지 'Object(객체)'라는 용어를 많이 사용했습니다 - 파이썬에서 모든 것이 객체라는 것을 들어보셨을 수도 있습니다. 이것이 무엇을 의미할까요?\n간단히 말해서, 객체들은 무언가(변수, 함수 등)를 주변에 가지고 다닙니다. 그리고 우리는 파이썬의 도트 구문(dot syntax)을 사용하여 그것들에 액세스 할 수 있습니다.\n\n예를 들어 파이썬의 numbers에는 `imag` 라는 허수를 나타내는 변수를 가지고 있습니다. (특별한 경우의 수학 연산을 하지 않는 한, 이것을 사용할 필요는 없을 것입니다.)\n\n{% note no-icon %}\n{% code lang:python %}\nx = 12\n# x is a real number, so its imaginary part is 0.\nprint(x.imag)\n# Here's how to make a complex number, in case you've ever been curious:\nc = 12 + 3j\nprint(c.imag) {% endcode %}\n\n{% code %}\n0\n3.0 {% endcode %}\n{% endnote %}\n\n객체가 운반하는 것들 중에는 함수들도 포함되어 있습니다. 객체에 속한 함수를 **메소드(method)** 라고합니다. (`imag` 와 같이 객체에 속한 기능이 없는 객체를 **속성(attribute)** 이라고 합니다.)\n\n예를 들어 numbers에는 `bit_length` 라는 메서드가 있습니다. 다시 말하지만, 도트 ​​구문을 사용하여 액세스할 수 있습니다.\n\n{% note danger %}\n{% code lang:python %}\nx.bit_length  {% endcode %}\n{% code %}\n<function int.bit_length> {% endcode %}\n{% endnote %}\n\n메소드를 호출하기 위해서는 괄호를 추가해야 합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nx.bit_length()  {% endcode %}\n{% code %}\n4 {% endcode %}\n{% endnote %}\n\n`help` 함수에 함수들을 전달했듯이(e.g. `help(max)`), 메소드들도 똑같이 전달할 수 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\nhelp(x.bit_length)  {% endcode %}\n{% code %}\nHelp on built-in function bit_length:\n\nbit_length(...) method of builtins.int instance\n    int.bit_length() -> int\n\n    Number of bits necessary to represent self in binary.\n    >>> bin(37)\n    '0b100101'\n    >>> (37).bit_length()\n    6 {% endcode %}\n\n{% endnote %}\n\n앞선 예들은 매우 애매한 것들이였습니다. 지금까지 살펴본 객체 유형들(numbers, functions, booleans)의 속성이나 메소드들은 흔히 사용되지 않는 것들이기 때문입니다.\n\n하지만 list에는 항상 자주 사용되는 몇 가지 메소드들이 있습니다.\n\n## 리스트 메소드들(List methods)\n\n`list.append` 를 사용하여 list의 마지막에 item을 추가할 수 있습니다:\n\n{% tabs list_append %}\n<!-- tab .APPEND @code -->\n{% note no-icon %}\n{% code lang:python %}\n# Pluto is a planet darn it!\nplanets.append('Pluto')\nplanets {% endcode %}\n\n{% code %}\n['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto'] {% endcode %}\n{% endnote %}\n\n\n왜 `append()` 함수에는 반환값이 없을까요? `help(planets.append)` 를 호출하여 설명서를 확인해 보세요.\n\n> **잠깐** : `append`는 `planets`에만 있는 메소드가 아니라 모든 리스트 타입의 객체가 가지고 다니는 메소드이므로 `help(list.append)`를 호출해도 됩니다. 하지만 `help(append)`는 호출하면 Python에서 \"append\"라는 변수가 없다고 응답할 것 입니다. \"append\"는 리스트 내에만 존재합니다 - 내장 함수인 `max` 나 `len` 와 같이 독립적으로 존재하지 않습니다.\n\n<!-- endtab -->\n\n<!-- tab HELP @book -->\n{% note info no-icon %}\n`-> None` 은 `list.append` 가 아무것도 반환하지 않는다는 것을 말합니다. 하지만 `planets`를 확인해보면 메소드의 호출로 값이 제대로 추가된 것을 볼 수 있습니다 :\n\n{% code lang:python %}\nhelp(planets.append) {% endcode %}\n\n{% code %}\nHelp on built-in function append:\n\nappend(...) method of builtins.list instance\n    L.append(object) -> None -- append object to end {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n{% endtabs %}\n\n\n`list.pop` 은 list의 마지막 element를 제거하고 반환합니다:\n\n{% note no-icon %}\n{% code lang:python %}\nplanets.pop()\nplanets  {% endcode %}\n{% code %}\n'Pluto'\n['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'] {% endcode %}\n{% endnote %}\n\n\n### 리스트 검색(Searching lists)\n\n지구는 태양계의 몇 번째 행성일까요? `list.index` 를 사용해서 해당 색인(index)을 알아낼 수 있습니다.\n\n```PYTHON\nplanets.index('Earth')\n```\n```\n2\n```\n\n3번째 행성이군요.(i.e. 색인은 0에서 시작하기 때문)\n그렇다면 플루토 행성은 몇 번째 일까요?\n\n```python\nplanets.index('Pluto')\n```\n```python\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-30-3a8584cba91a> in <module>()\n----> 1 planets.index('Pluto')\n\nValueError: 'Pluto' is not in list\n```\n\n저런, 이전 예제에서 'Pluto'를 삭제 했었다는걸 까먹었군요\n이와 같은 예상치 못한 상황을 피하기 위해 `in` 연산자를 사용하여 목록에 특정한 값이 들어 있는지를 확인할 수 있습니다.\n\n{% tabs search_examples %}\n<!-- tab EXAMPLE_1 @eye -->\n{% code lang:python %}\n# Is Earth a planet?\n\"Earth\" in planets  {% endcode %}\n{% code %}\nTrue  {% endcode %}\n<!-- endtab -->\n\n<!-- tab EXAMPLE_2 @eye -->\n{% code lang:python %}\n# Is Calbefraques a planet?\n\"Calbefraques\" in planets {% endcode %}\n{% code %}\nFalse {% endcode %}\n<!-- endtab -->\n{% endtabs %}\n\n이 외에도 여기서 다루지 않은 몇 가지 흥미로운 list 메소드들이 있습니다. 특정 객체에 포함된 모든 메소드와 속성들을 알고 싶다면 객체 자체에서 `help()` 를 호출하시면 됩니다. 예를 들어, `help(planets)` 는 모든 list 메서드에 대해 알려줍니다.\n\n{% tabs help_planets %}\n<!-- tab CODE @code -->\n{% code lang:python %}\nhelp(planets) {% endcode %}\n<!-- endtab -->\n\n<!-- tab output @terminal -->\n{% code lang:python %}\n  Help on list object:\n\n  class list(object)\n   |  list() -> new empty list\n   |  list(iterable) -> new list initialized from iterable's items\n   |  \n   |  Methods defined here:\n   |  \n   |  __add__(self, value, /)\n   |      Return self+value.\n   |  \n   |  __contains__(self, key, /)\n   |      Return key in self.\n   |  \n   |  __delitem__(self, key, /)\n   |      Delete self[key].\n   |  \n   |  __eq__(self, value, /)\n   |      Return self==value.\n   |  \n   |  __ge__(self, value, /)\n   |      Return self>=value.\n   |  \n   |  __getattribute__(self, name, /)\n   |      Return getattr(self, name).\n   |  \n   |  __getitem__(...)\n   |      x.__getitem__(y) <==> x[y]\n   |  \n   |  __gt__(self, value, /)\n   |      Return self>value.\n   |  \n   |  __iadd__(self, value, /)\n   |      Implement self+=value.\n   |  \n   |  __imul__(self, value, /)\n   |      Implement self*=value.\n   |  \n   |  __init__(self, /, *args, **kwargs)\n   |      Initialize self.  See help(type(self)) for accurate signature.\n   |  \n   |  __iter__(self, /)\n   |      Implement iter(self).\n   |  \n   |  __le__(self, value, /)\n   |      Return self<=value.\n   |  \n   |  __len__(self, /)\n   |      Return len(self).\n   |  \n   |  __lt__(self, value, /)\n   |      Return self<value.\n   |  \n   |  __mul__(self, value, /)\n   |      Return self*value.\n   |  \n   |  __ne__(self, value, /)\n   |      Return self!=value.\n   |  \n   |  __new__(*args, **kwargs) from builtins.type\n   |      Create and return a new object.  See help(type) for accurate signature.\n   |  \n   |  __repr__(self, /)\n   |      Return repr(self).\n   |  \n   |  __reversed__(...)\n   |      L.__reversed__() -- return a reverse iterator over the list\n   |  \n   |  __rmul__(self, value, /)\n   |      Return value*self.\n   |  \n   |  __setitem__(self, key, value, /)\n   |      Set self[key] to value.\n   |  \n   |  __sizeof__(...)\n   |      L.__sizeof__() -- size of L in memory, in bytes\n   |  \n   |  append(...)\n   |      L.append(object) -> None -- append object to end\n   |  \n   |  clear(...)\n   |      L.clear() -> None -- remove all items from L\n   |  \n   |  copy(...)\n   |      L.copy() -> list -- a shallow copy of L\n   |  \n   |  count(...)\n   |      L.count(value) -> integer -- return number of occurrences of value\n   |  \n   |  extend(...)\n   |      L.extend(iterable) -> None -- extend list by appending elements from the iterable\n   |  \n   |  index(...)\n   |      L.index(value, [start, [stop]]) -> integer -- return first index of value.\n   |      Raises ValueError if the value is not present.\n   |  \n   |  insert(...)\n   |      L.insert(index, object) -- insert object before index\n   |  \n   |  pop(...)\n   |      L.pop([index]) -> item -- remove and return item at index (default last).\n   |      Raises IndexError if list is empty or index is out of range.\n   |  \n   |  remove(...)\n   |      L.remove(value) -> None -- remove first occurrence of value.\n   |      Raises ValueError if the value is not present.\n   |  \n   |  reverse(...)\n   |      L.reverse() -- reverse *IN PLACE*\n   |  \n   |  sort(...)\n   |      L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*\n   |  \n   |  ----------------------------------------------------------------------\n   |  Data and other attributes defined here:\n   |  \n   |  __hash__ = None {% endcode %}\n<!-- endtab -->\n{% endtabs %}\n\n\"output\" 탭을 클릭해서 전체 도움말을 살펴 보세요. list 에는 `__eq__` 및 `__iadd__` 와 같은 이상한 이름의 메소드들이 많이 있습니다. 지금은 이것들에 대해 크게 신경쓸 필요가 없습니다. (이러한 메서드를 아마 평생 여러분이 직접 호출하지는 않을 것입니다. 그러나 색인 연산자나 비교 연산자와 같은 구문을 사용할 때, 이들은 배후에서 호출됩니다) 가장 흥미로운 메서드들은 목록 맨 아래에 있습니다(`append`, `clear`, `copy` 등).\n\n\n## 튜플(Tuples)\n\nTuple은 list와 매우 비슷합니다. 단 2 가지 면에서 조금 다릅니다.\n\n**1:** 대괄호 대신 소괄호를 사용하여 생성합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nt = (1, 2, 3) {% endcode %}\n혹은\n{% code lang:python %}\nt = 1, 2, 3 # 위와 동일한 내용입니다\nt {% endcode %}\n{% code %}\n(1, 2, 3) {% endcode %}\n{% endnote %}\n\n**2:** 수정이 불가능 합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nx = 0.125\nx.as_integer_ratio() {% endcode %}\n{% code lang:python %}\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-36-e6cf7836e708> in <module>()\n----> 1 t[0] = 100\n\nTypeError: 'tuple' object does not support item assignment  {% endcode %}\n{% endnote %}\n\n튜플은 여러 개의 반환 값을 갖는 함수에 자주 사용됩니다.\n예를 들어, float 객체의 `as_integer_ratio()` 메소드는 분자와 분모를 튜플 형태로 반환합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nx = 0.125\nx.as_integer_ratio() {% endcode %}\n{% code lang:python %}\n(1, 8)  {% endcode %}\n{% endnote %}\n\n여러 개의 값들을 각각의 변수로 할당이 가능합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nnumerator, denominator = x.as_integer_ratio()\nprint(numerator / denominator) {% endcode %}\n{% code lang:python %}\n0.125  {% endcode %}\n{% endnote %}\n\n이제 우리는 두 개의 변수를 교환하는 것 처럼 보이는 고전적인 Stupid Python Trick™ (파이썬 속임수?)의 본질을 꿰뚫어볼 수 있게 되었습니다!\n\n{% note no-icon %}\n{% code lang:python %}\na = 1\nb = 0\na, b = b, a\nprint(a, b) {% endcode %}\n{% code lang:python %}\n0 1  {% endcode %}\n{% endnote %}\n\n<br><br><br>\n# 연습문제(Your Turn)\n\n[리스트(lists) 예제](https://www.kaggle.com/kernels/fork/1275173)\n","slug":"04-lists","published":1,"updated":"2019-07-24T14:04:15.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt87k002y264601ot5ptt","content":"<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>Kaggle 홈페이지 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbQ==\" title=\"https://www.kaggle.com\">Kaggle<i class=\"fa fa-external-link\"></i></span></li>\n<li>7강 ‘Lists’ - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jb2xpbm1vcnJpcy9saXN0cw==\" title=\"https://www.kaggle.com/colinmorris/lists\">Python Micro-Course Home Page<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<blockquote>\n<p>영어 실력이 부족하여 문맥이 이해가 가지 않는 부분은 원본을 참고하시길 바랍니다…<br>언젠가는 실력이 나아지기를…</p>\n</blockquote>\n<hr>\n<br>\n\n<h1 id=\"리스트-Lists\"><a href=\"#리스트-Lists\" class=\"headerlink\" title=\"리스트(Lists)\"></a>리스트(Lists)</h1><p>파이썬의 Lists 는 정렬된 순서의 값을 나냅니다. 아래의 예제를 통해 어떻게 생성하는지 살펴보겠습니다.</p>\n<div class=\"tabs\" id=\"create_lists\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#create_lists-1\"><i class=\"fa fa-code\"></i>INT_type</a></li><li class=\"tab\"><a href=\"#create_lists-2\"><i class=\"fa fa-code\"></i>string_type</a></li><li class=\"tab\"><a href=\"#create_lists-3\"><i class=\"fa fa-code\"></i>list_of_lists</a></li><li class=\"tab\"><a href=\"#create_lists-4\"><i class=\"fa fa-code\"></i>mix_type</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"create_lists-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">primes = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"create_lists-2\"><p>lists 에는 다른 타입의 데이터도 넣을 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets = [<span class=\"string\">'Mercury'</span>, <span class=\"string\">'Venus'</span>, <span class=\"string\">'Earth'</span>, <span class=\"string\">'Mars'</span>, <span class=\"string\">'Jupiter'</span>, <span class=\"string\">'Saturn'</span>, <span class=\"string\">'Uranus'</span>, <span class=\"string\">'Neptune'</span>]</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"create_lists-3\"><p>list의 list를 만들 수도 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">hands = [</span><br><span class=\"line\">    [<span class=\"string\">'J'</span>, <span class=\"string\">'Q'</span>, <span class=\"string\">'K'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'2'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'2'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'6'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'K'</span>], <span class=\"comment\"># (Comma after the last element is optional)</span></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\"># (I could also have written this on one line, but it can get hard to read)</span></span><br><span class=\"line\">hands = [[<span class=\"string\">'J'</span>, <span class=\"string\">'Q'</span>, <span class=\"string\">'K'</span>], [<span class=\"string\">'2'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'2'</span>], [<span class=\"string\">'6'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'K'</span>]]</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"create_lists-4\"><p>서로 다른 타입의 변수들도 같이 넣을 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">my_favourite_things = [<span class=\"number\">32</span>, <span class=\"string\">'raindrops on roses'</span>, help]</span><br><span class=\"line\"><span class=\"comment\"># (Yes, Python's help function is *definitely* one of my favourite things)</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h2 id=\"색인-Indexing\"><a href=\"#색인-Indexing\" class=\"headerlink\" title=\"색인(Indexing)\"></a>색인(Indexing)</h2><p>대괄호를 사용하여 list의 각 요소에 접근할 수 있습니다.</p>\n<p><strong>어떤 행성이 태양과 가장 가까울까요?</strong></p>\n<div class=\"tabs\" id=\"indexing\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#indexing-1\"><i class=\"fa fa-code\"></i>CLOSEST</a></li><li class=\"tab\"><a href=\"#indexing-2\"><i class=\"fa fa-code\"></i>NEXT_CLOSEST</a></li><li class=\"tab\"><a href=\"#indexing-3\"><i class=\"fa fa-code\"></i>FURTHEST</a></li><li class=\"tab\"><a href=\"#indexing-4\"><i class=\"fa fa-code\"></i>NEXT_FURTHEST</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"indexing-1\"><p>파이썬은 0부터 시작하는 인덱싱을 사용하므로 첫 번째 요소의 인덱스는 0 입니다.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;Mercury&apos;</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"indexing-2\"><p>다음으로 가까운 행성은 어디일까요?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;Venus&apos;</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"indexing-3\"><p>태양으로 부터 가장 먼 행성은 어느 것일까요?<br>목록의 끝에있는 요소는 -1부터 시작하여 음수로 액세스 할 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;Neptune&apos;</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"indexing-4\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">-2</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;Uranus&apos;</span><br></pre></td></tr></table></figure></div></div></div>\n\n<h2 id=\"슬라이싱-Slicing\"><a href=\"#슬라이싱-Slicing\" class=\"headerlink\" title=\"슬라이싱(Slicing)\"></a>슬라이싱(Slicing)</h2><p>첫 3개의 행성은 어떤 것인가요? <code>slicing</code> 을 통해 우리는 답을 얻을 수 있습니다.</p>\n<div class=\"tabs\" id=\"slicing_1\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#slicing_1-1\"><i class=\"fa fa-code\"></i>CODE_1</a></li><li class=\"tab\"><a href=\"#slicing_1-2\"><i class=\"fa fa-code\"></i>CODE_2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"slicing_1-1\"><p><code>planets[0:3]</code> 은 인덱스 0 이상 3 미만의 <code>planet</code> 의 요소들을 가리킵니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">0</span>:<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Mercury&apos;, &apos;Venus&apos;, &apos;Earth&apos;]</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"slicing_1-2\"><p>시작과 끝 인덱스는 모두 선택사항(optional)입니다. 시작 인덱스를 생략하면 0 으로 간주됩니다. 따라서 다음과 같이 작성할 수도 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[:<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Mercury&apos;, &apos;Venus&apos;, &apos;Earth&apos;]</span><br></pre></td></tr></table></figure>  \n\n<div class=\"note default no-icon\">\n          <p>마지막 인덱스를 생략하면 범위를 list의 길이로 간주합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">3</span>:]</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Mars&apos;, &apos;Jupiter&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Neptune&apos;]</span><br></pre></td></tr></table></figure>즉, 인덱스 3부터 시작하는 모든 요소들을 나타냅니다.\n        </div></div></div></div>\n\n<p>슬라이싱할 때 음수 인덱스를 사용할 수도 있습니다.</p>\n<div class=\"note no-icon\">\n            <p>처음과 마지막을 제외한 모든 행성</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># All the planets except the first and last</span></span><br><span class=\"line\">planets[<span class=\"number\">1</span>:<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Venus&apos;, &apos;Earth&apos;, &apos;Mars&apos;, &apos;Jupiter&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;]</span><br></pre></td></tr></table></figure>\n          </div>\n\n<div class=\"note no-icon\">\n            <p>마지막 행성 3개</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The last 3 planets</span></span><br><span class=\"line\">planets[<span class=\"number\">-3</span>:]</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Neptune&apos;]</span><br></pre></td></tr></table></figure>\n          </div>\n\n<h2 id=\"리스트-수정-Changing-lists\"><a href=\"#리스트-수정-Changing-lists\" class=\"headerlink\" title=\"리스트 수정(Changing lists)\"></a>리스트 수정(Changing lists)</h2><p>list는 “변경 가능(mutable)” 하며, 이는 “제자리(in place)”에서 수정할 수 있음을 의미합니다.</p>\n<p>list를 수정하는 한 가지 방법은 인덱스 또는 슬라이스를 사용하는 방법입니다.</p>\n<p>예를 들어 Mars(화성)의 이름을 바꾸고 싶다고합시다 :</p>\n<div class=\"note no-icon\">\n              <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">3</span>] = <span class=\"string\">'Malacandra'</span></span><br><span class=\"line\">planets</span><br></pre></td></tr></table></figure>  <div class=\"spoiler collapsed\"><div class=\"spoiler-title\">Malacandra가_뭐지?</div><div class=\"spoiler-content\"><p>나니아 연대기로 유명한 C. S. Lewis의 소설 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT3V0X29mX3RoZV9TaWxlbnRfUGxhbmV0\" title=\"https://en.wikipedia.org/wiki/Out_of_the_Silent_Planet\">침묵의 행성 밖으로(Out of the Silent Planet)<i class=\"fa fa-external-link\"></i></span>에서 화성인들을 Ma’aleca’andra 라고 부릅니다.</p></div></div></div>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Mercury&apos;, &apos;Venus&apos;, &apos;Earth&apos;, &apos;Malacandra&apos;, &apos;Jupiter&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Neptune&apos;]</span><br></pre></td></tr></table></figure>\n          \n\n<p>음… 이름이 너무 긴 것 같군요. 첫 3개 행성들의 이름을 줄여보겠습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[:<span class=\"number\">3</span>] = [<span class=\"string\">'Mur'</span>, <span class=\"string\">'Vee'</span>, <span class=\"string\">'Ur'</span>]</span><br><span class=\"line\">print(planets)</span><br><span class=\"line\"><span class=\"comment\"># 출력 이후 변경 사항들을 되돌려 놓겠습니다.</span></span><br><span class=\"line\">planets[:<span class=\"number\">4</span>] = [<span class=\"string\">'Mercury'</span>, <span class=\"string\">'Venus'</span>, <span class=\"string\">'Earth'</span>, <span class=\"string\">'Mars'</span>,]</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Mur&apos;, &apos;Vee&apos;, &apos;Ur&apos;, &apos;Malacandra&apos;, &apos;Jupiter&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Neptune&apos;]</span><br></pre></td></tr></table></figure>\n          </div>\n\n<h2 id=\"리스트-함수-List-functions\"><a href=\"#리스트-함수-List-functions\" class=\"headerlink\" title=\"리스트 함수(List functions)\"></a>리스트 함수(List functions)</h2><p>파이썬은 list를 사용하는데 매우 유용한 몇 가지 함수들을 제공합니다.</p>\n<div class=\"tabs\" id=\"list_functions\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#list_functions-1\"><i class=\"fa fa-code\"></i>LEN</a></li><li class=\"tab\"><a href=\"#list_functions-2\"><i class=\"fa fa-code\"></i>SORT</a></li><li class=\"tab\"><a href=\"#list_functions-3\"><i class=\"fa fa-code\"></i>SUM</a></li><li class=\"tab\"><a href=\"#list_functions-4\"><i class=\"fa fa-code\"></i>MAX</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"list_functions-1\"><div class=\"note primary no-icon\">\n            <p><code>len</code> 은 list의 길이를 알려줍니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># How many planets are there?</span></span><br><span class=\"line\">len(planets)  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">8 </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"list_functions-2\"><div class=\"note primary no-icon\">\n            <p><code>sorted</code> 는 정렬된 list를 반환합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The planets sorted in alphabetical order</span></span><br><span class=\"line\">sorted(planets) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Earth&apos;, &apos;Jupiter&apos;, &apos;Mars&apos;, &apos;Mercury&apos;, &apos;Neptune&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Venus&apos;] </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"list_functions-3\"><div class=\"note primary no-icon\">\n            <p><code>sum</code> 은 무엇을 반환할지 눈치채셨을 겁니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">primes = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\">sum(primes) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">17 </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"list_functions-4\"><div class=\"note primary no-icon\">\n            <p>이전에 <code>min</code> 및 <code>max</code> 를 사용하여 최소 또는 최대 인수를 구해봤습니다. 우리는 하나의 list를 매개 변수로 전달할 수도 있습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">max(primes) </span><br></pre></td></tr></table></figure>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">7 </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<h2 id=\"참고-객체-Interlude-objects\"><a href=\"#참고-객체-Interlude-objects\" class=\"headerlink\" title=\"참고: 객체(Interlude: objects)\"></a>참고: 객체(Interlude: objects)</h2><p>지금까지 ‘Object(객체)’라는 용어를 많이 사용했습니다 - 파이썬에서 모든 것이 객체라는 것을 들어보셨을 수도 있습니다. 이것이 무엇을 의미할까요?<br>간단히 말해서, 객체들은 무언가(변수, 함수 등)를 주변에 가지고 다닙니다. 그리고 우리는 파이썬의 도트 구문(dot syntax)을 사용하여 그것들에 액세스 할 수 있습니다.</p>\n<p>예를 들어 파이썬의 numbers에는 <code>imag</code> 라는 허수를 나타내는 변수를 가지고 있습니다. (특별한 경우의 수학 연산을 하지 않는 한, 이것을 사용할 필요는 없을 것입니다.)</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"comment\"># x is a real number, so its imaginary part is 0.</span></span><br><span class=\"line\">print(x.imag)</span><br><span class=\"line\"><span class=\"comment\"># Here's how to make a complex number, in case you've ever been curious:</span></span><br><span class=\"line\">c = <span class=\"number\">12</span> + <span class=\"number\">3j</span></span><br><span class=\"line\">print(c.imag) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">3.0 </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>객체가 운반하는 것들 중에는 함수들도 포함되어 있습니다. 객체에 속한 함수를 <strong>메소드(method)</strong> 라고합니다. (<code>imag</code> 와 같이 객체에 속한 기능이 없는 객체를 <strong>속성(attribute)</strong> 이라고 합니다.)</p>\n<p>예를 들어 numbers에는 <code>bit_length</code> 라는 메서드가 있습니다. 다시 말하지만, 도트 ​​구문을 사용하여 액세스할 수 있습니다.</p>\n<div class=\"note danger\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x.bit_length  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;function int.bit_length&gt; </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>메소드를 호출하기 위해서는 괄호를 추가해야 합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x.bit_length()  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">4 </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p><code>help</code> 함수에 함수들을 전달했듯이(e.g. <code>help(max)</code>), 메소드들도 똑같이 전달할 수 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(x.bit_length)  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on built-in function bit_length:</span><br><span class=\"line\"></span><br><span class=\"line\">bit_length(...) method of builtins.int instance</span><br><span class=\"line\">    int.bit_length() -&gt; int</span><br><span class=\"line\"></span><br><span class=\"line\">    Number of bits necessary to represent self in binary.</span><br><span class=\"line\">    &gt;&gt;&gt; bin(37)</span><br><span class=\"line\">    &apos;0b100101&apos;</span><br><span class=\"line\">    &gt;&gt;&gt; (37).bit_length()</span><br><span class=\"line\">    6 </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>앞선 예들은 매우 애매한 것들이였습니다. 지금까지 살펴본 객체 유형들(numbers, functions, booleans)의 속성이나 메소드들은 흔히 사용되지 않는 것들이기 때문입니다.</p>\n<p>하지만 list에는 항상 자주 사용되는 몇 가지 메소드들이 있습니다.</p>\n<h2 id=\"리스트-메소드들-List-methods\"><a href=\"#리스트-메소드들-List-methods\" class=\"headerlink\" title=\"리스트 메소드들(List methods)\"></a>리스트 메소드들(List methods)</h2><p><code>list.append</code> 를 사용하여 list의 마지막에 item을 추가할 수 있습니다:</p>\n<div class=\"tabs\" id=\"list_append\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#list_append-1\"><i class=\"fa fa-code\"></i>.APPEND</a></li><li class=\"tab\"><a href=\"#list_append-2\"><i class=\"fa fa-book\"></i>HELP</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"list_append-1\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Pluto is a planet darn it!</span></span><br><span class=\"line\">planets.append(<span class=\"string\">'Pluto'</span>)</span><br><span class=\"line\">planets </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Mercury&apos;, &apos;Venus&apos;, &apos;Earth&apos;, &apos;Mars&apos;, &apos;Jupiter&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Neptune&apos;, &apos;Pluto&apos;] </span><br></pre></td></tr></table></figure>\n          </div>\n\n\n<p>왜 <code>append()</code> 함수에는 반환값이 없을까요? <code>help(planets.append)</code> 를 호출하여 설명서를 확인해 보세요.</p>\n<blockquote>\n<p><strong>잠깐</strong> : <code>append</code>는 <code>planets</code>에만 있는 메소드가 아니라 모든 리스트 타입의 객체가 가지고 다니는 메소드이므로 <code>help(list.append)</code>를 호출해도 됩니다. 하지만 <code>help(append)</code>는 호출하면 Python에서 “append”라는 변수가 없다고 응답할 것 입니다. “append”는 리스트 내에만 존재합니다 - 내장 함수인 <code>max</code> 나 <code>len</code> 와 같이 독립적으로 존재하지 않습니다.</p>\n</blockquote></div><div class=\"tab-pane\" id=\"list_append-2\"><div class=\"note info no-icon\">\n            <p><code>-&gt; None</code> 은 <code>list.append</code> 가 아무것도 반환하지 않는다는 것을 말합니다. 하지만 <code>planets</code>를 확인해보면 메소드의 호출로 값이 제대로 추가된 것을 볼 수 있습니다 :</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(planets.append) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on built-in function append:</span><br><span class=\"line\"></span><br><span class=\"line\">append(...) method of builtins.list instance</span><br><span class=\"line\">    L.append(object) -&gt; None -- append object to end </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n\n<p><code>list.pop</code> 은 list의 마지막 element를 제거하고 반환합니다:</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets.pop()</span><br><span class=\"line\">planets  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;Pluto&apos;</span><br><span class=\"line\">[&apos;Mercury&apos;, &apos;Venus&apos;, &apos;Earth&apos;, &apos;Mars&apos;, &apos;Jupiter&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Neptune&apos;] </span><br></pre></td></tr></table></figure>\n          </div>\n\n\n<h3 id=\"리스트-검색-Searching-lists\"><a href=\"#리스트-검색-Searching-lists\" class=\"headerlink\" title=\"리스트 검색(Searching lists)\"></a>리스트 검색(Searching lists)</h3><p>지구는 태양계의 몇 번째 행성일까요? <code>list.index</code> 를 사용해서 해당 색인(index)을 알아낼 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets.index(<span class=\"string\">'Earth'</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<p>3번째 행성이군요.(i.e. 색인은 0에서 시작하기 때문)<br>그렇다면 플루토 행성은 몇 번째 일까요?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets.index(<span class=\"string\">'Pluto'</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">ValueError                                Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-30</span><span class=\"number\">-3</span>a8584cba91a&gt; <span class=\"keyword\">in</span> &lt;module&gt;()</span><br><span class=\"line\">----&gt; 1 planets.index('Pluto')</span><br><span class=\"line\"></span><br><span class=\"line\">ValueError: <span class=\"string\">'Pluto'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> list</span><br></pre></td></tr></table></figure>\n\n<p>저런, 이전 예제에서 ‘Pluto’를 삭제 했었다는걸 까먹었군요<br>이와 같은 예상치 못한 상황을 피하기 위해 <code>in</code> 연산자를 사용하여 목록에 특정한 값이 들어 있는지를 확인할 수 있습니다.</p>\n<div class=\"tabs\" id=\"search_examples\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#search_examples-1\"><i class=\"fa fa-eye\"></i>EXAMPLE_1</a></li><li class=\"tab\"><a href=\"#search_examples-2\"><i class=\"fa fa-eye\"></i>EXAMPLE_2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"search_examples-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Is Earth a planet?</span></span><br><span class=\"line\"><span class=\"string\">\"Earth\"</span> <span class=\"keyword\">in</span> planets  </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">True  </span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"search_examples-2\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Is Calbefraques a planet?</span></span><br><span class=\"line\"><span class=\"string\">\"Calbefraques\"</span> <span class=\"keyword\">in</span> planets </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">False </span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>이 외에도 여기서 다루지 않은 몇 가지 흥미로운 list 메소드들이 있습니다. 특정 객체에 포함된 모든 메소드와 속성들을 알고 싶다면 객체 자체에서 <code>help()</code> 를 호출하시면 됩니다. 예를 들어, <code>help(planets)</code> 는 모든 list 메서드에 대해 알려줍니다.</p>\n<div class=\"tabs\" id=\"help_planets\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#help_planets-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#help_planets-2\"><i class=\"fa fa-terminal\"></i>output</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"help_planets-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(planets) </span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"help_planets-2\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on list object:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">list</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">list</span><span class=\"params\">()</span> -&gt; new empty list</span></span><br><span class=\"line\"><span class=\"class\"> |  list(iterable) -&gt; new list initialized from iterable's items</span></span><br><span class=\"line\"><span class=\"class\"> |  </span></span><br><span class=\"line\"><span class=\"class\"> |  Methods defined here:</span></span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __add__(self, value, /)</span><br><span class=\"line\"> |      Return self+value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __contains__(self, key, /)</span><br><span class=\"line\"> |      Return key <span class=\"keyword\">in</span> self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __delitem__(self, key, /)</span><br><span class=\"line\"> |      Delete self[key].</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __eq__(self, value, /)</span><br><span class=\"line\"> |      Return self==value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __ge__(self, value, /)</span><br><span class=\"line\"> |      Return self&gt;=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __getattribute__(self, name, /)</span><br><span class=\"line\"> |      Return getattr(self, name).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __getitem__(...)</span><br><span class=\"line\"> |      x.__getitem__(y) &lt;==&gt; x[y]</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __gt__(self, value, /)</span><br><span class=\"line\"> |      Return self&gt;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __iadd__(self, value, /)</span><br><span class=\"line\"> |      Implement self+=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __imul__(self, value, /)</span><br><span class=\"line\"> |      Implement self*=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __init__(self, /, *args, **kwargs)</span><br><span class=\"line\"> |      Initialize self.  See help(type(self)) <span class=\"keyword\">for</span> accurate signature.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __iter__(self, /)</span><br><span class=\"line\"> |      Implement iter(self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __le__(self, value, /)</span><br><span class=\"line\"> |      Return self&lt;=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __len__(self, /)</span><br><span class=\"line\"> |      Return len(self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __lt__(self, value, /)</span><br><span class=\"line\"> |      Return self&lt;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __mul__(self, value, /)</span><br><span class=\"line\"> |      Return self*value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __ne__(self, value, /)</span><br><span class=\"line\"> |      Return self!=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __new__(*args, **kwargs) <span class=\"keyword\">from</span> builtins.type</span><br><span class=\"line\"> |      Create <span class=\"keyword\">and</span> <span class=\"keyword\">return</span> a new object.  See help(type) <span class=\"keyword\">for</span> accurate signature.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __repr__(self, /)</span><br><span class=\"line\"> |      Return repr(self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __reversed__(...)</span><br><span class=\"line\"> |      L.__reversed__() -- <span class=\"keyword\">return</span> a reverse iterator over the list</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rmul__(self, value, /)</span><br><span class=\"line\"> |      Return value*self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __setitem__(self, key, value, /)</span><br><span class=\"line\"> |      Set self[key] to value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __sizeof__(...)</span><br><span class=\"line\"> |      L.__sizeof__() -- size of L <span class=\"keyword\">in</span> memory, <span class=\"keyword\">in</span> bytes</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  append(...)</span><br><span class=\"line\"> |      L.append(object) -&gt; None -- append object to end</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  clear(...)</span><br><span class=\"line\"> |      L.clear() -&gt; None -- remove all items from L</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  copy(...)</span><br><span class=\"line\"> |      L.copy() -&gt; list -- a shallow copy of L</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  count(...)</span><br><span class=\"line\"> |      L.count(value) -&gt; integer -- return number of occurrences of value</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  extend(...)</span><br><span class=\"line\"> |      L.extend(iterable) -&gt; None -- extend list by appending elements from the iterable</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  index(...)</span><br><span class=\"line\"> |      L.index(value, [start, [stop]]) -&gt; integer -- return first index of value.</span><br><span class=\"line\"> |      Raises ValueError <span class=\"keyword\">if</span> the value <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> present.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  insert(...)</span><br><span class=\"line\"> |      L.insert(index, object) -- insert object before index</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  pop(...)</span><br><span class=\"line\"> |      L.pop([index]) -&gt; item -- remove and return item at index (default last).</span><br><span class=\"line\"> |      Raises IndexError <span class=\"keyword\">if</span> list <span class=\"keyword\">is</span> empty <span class=\"keyword\">or</span> index <span class=\"keyword\">is</span> out of range.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  remove(...)</span><br><span class=\"line\"> |      L.remove(value) -&gt; None -- remove first occurrence of value.</span><br><span class=\"line\"> |      Raises ValueError <span class=\"keyword\">if</span> the value <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> present.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  reverse(...)</span><br><span class=\"line\"> |      L.reverse() -- reverse *IN PLACE*</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  sort(...)</span><br><span class=\"line\"> |      L.sort(key=None, reverse=False) -&gt; None -- stable sort *IN PLACE*</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Data <span class=\"keyword\">and</span> other attributes defined here:</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __hash__ = <span class=\"literal\">None</span> </span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>“output” 탭을 클릭해서 전체 도움말을 살펴 보세요. list 에는 <code>__eq__</code> 및 <code>__iadd__</code> 와 같은 이상한 이름의 메소드들이 많이 있습니다. 지금은 이것들에 대해 크게 신경쓸 필요가 없습니다. (이러한 메서드를 아마 평생 여러분이 직접 호출하지는 않을 것입니다. 그러나 색인 연산자나 비교 연산자와 같은 구문을 사용할 때, 이들은 배후에서 호출됩니다) 가장 흥미로운 메서드들은 목록 맨 아래에 있습니다(<code>append</code>, <code>clear</code>, <code>copy</code> 등).</p>\n<h2 id=\"튜플-Tuples\"><a href=\"#튜플-Tuples\" class=\"headerlink\" title=\"튜플(Tuples)\"></a>튜플(Tuples)</h2><p>Tuple은 list와 매우 비슷합니다. 단 2 가지 면에서 조금 다릅니다.</p>\n<p><strong>1:</strong> 대괄호 대신 소괄호를 사용하여 생성합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">t = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) </span><br></pre></td></tr></table></figure>혹은<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">t = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> <span class=\"comment\"># 위와 동일한 내용입니다</span></span><br><span class=\"line\">t </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(1, 2, 3) </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p><strong>2:</strong> 수정이 불가능 합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">0.125</span></span><br><span class=\"line\">x.as_integer_ratio() </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">TypeError                                 Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-36</span>-e6cf7836e708&gt; <span class=\"keyword\">in</span> &lt;module&gt;()</span><br><span class=\"line\">----&gt; 1 t[0] = 100</span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: <span class=\"string\">'tuple'</span> object does <span class=\"keyword\">not</span> support item assignment  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>튜플은 여러 개의 반환 값을 갖는 함수에 자주 사용됩니다.<br>예를 들어, float 객체의 <code>as_integer_ratio()</code> 메소드는 분자와 분모를 튜플 형태로 반환합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">0.125</span></span><br><span class=\"line\">x.as_integer_ratio() </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">8</span>)  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>여러 개의 값들을 각각의 변수로 할당이 가능합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">numerator, denominator = x.as_integer_ratio()</span><br><span class=\"line\">print(numerator / denominator) </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.125</span>  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>이제 우리는 두 개의 변수를 교환하는 것 처럼 보이는 고전적인 Stupid Python Trick™ (파이썬 속임수?)의 본질을 꿰뚫어볼 수 있게 되었습니다!</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">0</span></span><br><span class=\"line\">a, b = b, a</span><br><span class=\"line\">print(a, b) </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span>  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p><br><br><br></p>\n<h1 id=\"연습문제-Your-Turn\"><a href=\"#연습문제-Your-Turn\" class=\"headerlink\" title=\"연습문제(Your Turn)\"></a>연습문제(Your Turn)</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE3Mw==\" title=\"https://www.kaggle.com/kernels/fork/1275173\">리스트(lists) 예제<i class=\"fa fa-external-link\"></i></span></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>Kaggle 홈페이지 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbQ==\" title=\"https://www.kaggle.com\">Kaggle<i class=\"fa fa-external-link\"></i></span></li>\n<li>7강 ‘Lists’ - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jb2xpbm1vcnJpcy9saXN0cw==\" title=\"https://www.kaggle.com/colinmorris/lists\">Python Micro-Course Home Page<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<blockquote>\n<p>영어 실력이 부족하여 문맥이 이해가 가지 않는 부분은 원본을 참고하시길 바랍니다…<br>언젠가는 실력이 나아지기를…</p>\n</blockquote>\n<hr>\n<br>\n\n<h1 id=\"리스트-Lists\"><a href=\"#리스트-Lists\" class=\"headerlink\" title=\"리스트(Lists)\"></a>리스트(Lists)</h1><p>파이썬의 Lists 는 정렬된 순서의 값을 나냅니다. 아래의 예제를 통해 어떻게 생성하는지 살펴보겠습니다.</p>\n<div class=\"tabs\" id=\"create_lists\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#create_lists-1\"><i class=\"fa fa-code\"></i>INT_type</a></li><li class=\"tab\"><a href=\"#create_lists-2\"><i class=\"fa fa-code\"></i>string_type</a></li><li class=\"tab\"><a href=\"#create_lists-3\"><i class=\"fa fa-code\"></i>list_of_lists</a></li><li class=\"tab\"><a href=\"#create_lists-4\"><i class=\"fa fa-code\"></i>mix_type</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"create_lists-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">primes = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"create_lists-2\"><p>lists 에는 다른 타입의 데이터도 넣을 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets = [<span class=\"string\">'Mercury'</span>, <span class=\"string\">'Venus'</span>, <span class=\"string\">'Earth'</span>, <span class=\"string\">'Mars'</span>, <span class=\"string\">'Jupiter'</span>, <span class=\"string\">'Saturn'</span>, <span class=\"string\">'Uranus'</span>, <span class=\"string\">'Neptune'</span>]</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"create_lists-3\"><p>list의 list를 만들 수도 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">hands = [</span><br><span class=\"line\">    [<span class=\"string\">'J'</span>, <span class=\"string\">'Q'</span>, <span class=\"string\">'K'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'2'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'2'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'6'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'K'</span>], <span class=\"comment\"># (Comma after the last element is optional)</span></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\"># (I could also have written this on one line, but it can get hard to read)</span></span><br><span class=\"line\">hands = [[<span class=\"string\">'J'</span>, <span class=\"string\">'Q'</span>, <span class=\"string\">'K'</span>], [<span class=\"string\">'2'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'2'</span>], [<span class=\"string\">'6'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'K'</span>]]</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"create_lists-4\"><p>서로 다른 타입의 변수들도 같이 넣을 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">my_favourite_things = [<span class=\"number\">32</span>, <span class=\"string\">'raindrops on roses'</span>, help]</span><br><span class=\"line\"><span class=\"comment\"># (Yes, Python's help function is *definitely* one of my favourite things)</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h2 id=\"색인-Indexing\"><a href=\"#색인-Indexing\" class=\"headerlink\" title=\"색인(Indexing)\"></a>색인(Indexing)</h2><p>대괄호를 사용하여 list의 각 요소에 접근할 수 있습니다.</p>\n<p><strong>어떤 행성이 태양과 가장 가까울까요?</strong></p>\n<div class=\"tabs\" id=\"indexing\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#indexing-1\"><i class=\"fa fa-code\"></i>CLOSEST</a></li><li class=\"tab\"><a href=\"#indexing-2\"><i class=\"fa fa-code\"></i>NEXT_CLOSEST</a></li><li class=\"tab\"><a href=\"#indexing-3\"><i class=\"fa fa-code\"></i>FURTHEST</a></li><li class=\"tab\"><a href=\"#indexing-4\"><i class=\"fa fa-code\"></i>NEXT_FURTHEST</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"indexing-1\"><p>파이썬은 0부터 시작하는 인덱싱을 사용하므로 첫 번째 요소의 인덱스는 0 입니다.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;Mercury&apos;</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"indexing-2\"><p>다음으로 가까운 행성은 어디일까요?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;Venus&apos;</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"indexing-3\"><p>태양으로 부터 가장 먼 행성은 어느 것일까요?<br>목록의 끝에있는 요소는 -1부터 시작하여 음수로 액세스 할 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;Neptune&apos;</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"indexing-4\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">-2</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;Uranus&apos;</span><br></pre></td></tr></table></figure></div></div></div>\n\n<h2 id=\"슬라이싱-Slicing\"><a href=\"#슬라이싱-Slicing\" class=\"headerlink\" title=\"슬라이싱(Slicing)\"></a>슬라이싱(Slicing)</h2><p>첫 3개의 행성은 어떤 것인가요? <code>slicing</code> 을 통해 우리는 답을 얻을 수 있습니다.</p>\n<div class=\"tabs\" id=\"slicing_1\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#slicing_1-1\"><i class=\"fa fa-code\"></i>CODE_1</a></li><li class=\"tab\"><a href=\"#slicing_1-2\"><i class=\"fa fa-code\"></i>CODE_2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"slicing_1-1\"><p><code>planets[0:3]</code> 은 인덱스 0 이상 3 미만의 <code>planet</code> 의 요소들을 가리킵니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">0</span>:<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Mercury&apos;, &apos;Venus&apos;, &apos;Earth&apos;]</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"slicing_1-2\"><p>시작과 끝 인덱스는 모두 선택사항(optional)입니다. 시작 인덱스를 생략하면 0 으로 간주됩니다. 따라서 다음과 같이 작성할 수도 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[:<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Mercury&apos;, &apos;Venus&apos;, &apos;Earth&apos;]</span><br></pre></td></tr></table></figure>  \n\n<div class=\"note default no-icon\">\n          <p>마지막 인덱스를 생략하면 범위를 list의 길이로 간주합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">3</span>:]</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Mars&apos;, &apos;Jupiter&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Neptune&apos;]</span><br></pre></td></tr></table></figure>즉, 인덱스 3부터 시작하는 모든 요소들을 나타냅니다.\n        </div></div></div></div>\n\n<p>슬라이싱할 때 음수 인덱스를 사용할 수도 있습니다.</p>\n<div class=\"note no-icon\">\n            <p>처음과 마지막을 제외한 모든 행성</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># All the planets except the first and last</span></span><br><span class=\"line\">planets[<span class=\"number\">1</span>:<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Venus&apos;, &apos;Earth&apos;, &apos;Mars&apos;, &apos;Jupiter&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;]</span><br></pre></td></tr></table></figure>\n          </div>\n\n<div class=\"note no-icon\">\n            <p>마지막 행성 3개</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The last 3 planets</span></span><br><span class=\"line\">planets[<span class=\"number\">-3</span>:]</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Neptune&apos;]</span><br></pre></td></tr></table></figure>\n          </div>\n\n<h2 id=\"리스트-수정-Changing-lists\"><a href=\"#리스트-수정-Changing-lists\" class=\"headerlink\" title=\"리스트 수정(Changing lists)\"></a>리스트 수정(Changing lists)</h2><p>list는 “변경 가능(mutable)” 하며, 이는 “제자리(in place)”에서 수정할 수 있음을 의미합니다.</p>\n<p>list를 수정하는 한 가지 방법은 인덱스 또는 슬라이스를 사용하는 방법입니다.</p>\n<p>예를 들어 Mars(화성)의 이름을 바꾸고 싶다고합시다 :</p>\n<div class=\"note no-icon\">\n              <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[<span class=\"number\">3</span>] = <span class=\"string\">'Malacandra'</span></span><br><span class=\"line\">planets</span><br></pre></td></tr></table></figure>  <div class=\"spoiler collapsed\"><div class=\"spoiler-title\">Malacandra가_뭐지?</div><div class=\"spoiler-content\"><p>나니아 연대기로 유명한 C. S. Lewis의 소설 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT3V0X29mX3RoZV9TaWxlbnRfUGxhbmV0\" title=\"https://en.wikipedia.org/wiki/Out_of_the_Silent_Planet\">침묵의 행성 밖으로(Out of the Silent Planet)<i class=\"fa fa-external-link\"></i></span>에서 화성인들을 Ma’aleca’andra 라고 부릅니다.</p></div></div></div>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Mercury&apos;, &apos;Venus&apos;, &apos;Earth&apos;, &apos;Malacandra&apos;, &apos;Jupiter&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Neptune&apos;]</span><br></pre></td></tr></table></figure>\n          \n\n<p>음… 이름이 너무 긴 것 같군요. 첫 3개 행성들의 이름을 줄여보겠습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets[:<span class=\"number\">3</span>] = [<span class=\"string\">'Mur'</span>, <span class=\"string\">'Vee'</span>, <span class=\"string\">'Ur'</span>]</span><br><span class=\"line\">print(planets)</span><br><span class=\"line\"><span class=\"comment\"># 출력 이후 변경 사항들을 되돌려 놓겠습니다.</span></span><br><span class=\"line\">planets[:<span class=\"number\">4</span>] = [<span class=\"string\">'Mercury'</span>, <span class=\"string\">'Venus'</span>, <span class=\"string\">'Earth'</span>, <span class=\"string\">'Mars'</span>,]</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Mur&apos;, &apos;Vee&apos;, &apos;Ur&apos;, &apos;Malacandra&apos;, &apos;Jupiter&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Neptune&apos;]</span><br></pre></td></tr></table></figure>\n          </div>\n\n<h2 id=\"리스트-함수-List-functions\"><a href=\"#리스트-함수-List-functions\" class=\"headerlink\" title=\"리스트 함수(List functions)\"></a>리스트 함수(List functions)</h2><p>파이썬은 list를 사용하는데 매우 유용한 몇 가지 함수들을 제공합니다.</p>\n<div class=\"tabs\" id=\"list_functions\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#list_functions-1\"><i class=\"fa fa-code\"></i>LEN</a></li><li class=\"tab\"><a href=\"#list_functions-2\"><i class=\"fa fa-code\"></i>SORT</a></li><li class=\"tab\"><a href=\"#list_functions-3\"><i class=\"fa fa-code\"></i>SUM</a></li><li class=\"tab\"><a href=\"#list_functions-4\"><i class=\"fa fa-code\"></i>MAX</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"list_functions-1\"><div class=\"note primary no-icon\">\n            <p><code>len</code> 은 list의 길이를 알려줍니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># How many planets are there?</span></span><br><span class=\"line\">len(planets)  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">8 </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"list_functions-2\"><div class=\"note primary no-icon\">\n            <p><code>sorted</code> 는 정렬된 list를 반환합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The planets sorted in alphabetical order</span></span><br><span class=\"line\">sorted(planets) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Earth&apos;, &apos;Jupiter&apos;, &apos;Mars&apos;, &apos;Mercury&apos;, &apos;Neptune&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Venus&apos;] </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"list_functions-3\"><div class=\"note primary no-icon\">\n            <p><code>sum</code> 은 무엇을 반환할지 눈치채셨을 겁니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">primes = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\">sum(primes) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">17 </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"list_functions-4\"><div class=\"note primary no-icon\">\n            <p>이전에 <code>min</code> 및 <code>max</code> 를 사용하여 최소 또는 최대 인수를 구해봤습니다. 우리는 하나의 list를 매개 변수로 전달할 수도 있습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">max(primes) </span><br></pre></td></tr></table></figure>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">7 </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<h2 id=\"참고-객체-Interlude-objects\"><a href=\"#참고-객체-Interlude-objects\" class=\"headerlink\" title=\"참고: 객체(Interlude: objects)\"></a>참고: 객체(Interlude: objects)</h2><p>지금까지 ‘Object(객체)’라는 용어를 많이 사용했습니다 - 파이썬에서 모든 것이 객체라는 것을 들어보셨을 수도 있습니다. 이것이 무엇을 의미할까요?<br>간단히 말해서, 객체들은 무언가(변수, 함수 등)를 주변에 가지고 다닙니다. 그리고 우리는 파이썬의 도트 구문(dot syntax)을 사용하여 그것들에 액세스 할 수 있습니다.</p>\n<p>예를 들어 파이썬의 numbers에는 <code>imag</code> 라는 허수를 나타내는 변수를 가지고 있습니다. (특별한 경우의 수학 연산을 하지 않는 한, 이것을 사용할 필요는 없을 것입니다.)</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"comment\"># x is a real number, so its imaginary part is 0.</span></span><br><span class=\"line\">print(x.imag)</span><br><span class=\"line\"><span class=\"comment\"># Here's how to make a complex number, in case you've ever been curious:</span></span><br><span class=\"line\">c = <span class=\"number\">12</span> + <span class=\"number\">3j</span></span><br><span class=\"line\">print(c.imag) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">3.0 </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>객체가 운반하는 것들 중에는 함수들도 포함되어 있습니다. 객체에 속한 함수를 <strong>메소드(method)</strong> 라고합니다. (<code>imag</code> 와 같이 객체에 속한 기능이 없는 객체를 <strong>속성(attribute)</strong> 이라고 합니다.)</p>\n<p>예를 들어 numbers에는 <code>bit_length</code> 라는 메서드가 있습니다. 다시 말하지만, 도트 ​​구문을 사용하여 액세스할 수 있습니다.</p>\n<div class=\"note danger\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x.bit_length  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;function int.bit_length&gt; </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>메소드를 호출하기 위해서는 괄호를 추가해야 합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x.bit_length()  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">4 </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p><code>help</code> 함수에 함수들을 전달했듯이(e.g. <code>help(max)</code>), 메소드들도 똑같이 전달할 수 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(x.bit_length)  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on built-in function bit_length:</span><br><span class=\"line\"></span><br><span class=\"line\">bit_length(...) method of builtins.int instance</span><br><span class=\"line\">    int.bit_length() -&gt; int</span><br><span class=\"line\"></span><br><span class=\"line\">    Number of bits necessary to represent self in binary.</span><br><span class=\"line\">    &gt;&gt;&gt; bin(37)</span><br><span class=\"line\">    &apos;0b100101&apos;</span><br><span class=\"line\">    &gt;&gt;&gt; (37).bit_length()</span><br><span class=\"line\">    6 </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>앞선 예들은 매우 애매한 것들이였습니다. 지금까지 살펴본 객체 유형들(numbers, functions, booleans)의 속성이나 메소드들은 흔히 사용되지 않는 것들이기 때문입니다.</p>\n<p>하지만 list에는 항상 자주 사용되는 몇 가지 메소드들이 있습니다.</p>\n<h2 id=\"리스트-메소드들-List-methods\"><a href=\"#리스트-메소드들-List-methods\" class=\"headerlink\" title=\"리스트 메소드들(List methods)\"></a>리스트 메소드들(List methods)</h2><p><code>list.append</code> 를 사용하여 list의 마지막에 item을 추가할 수 있습니다:</p>\n<div class=\"tabs\" id=\"list_append\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#list_append-1\"><i class=\"fa fa-code\"></i>.APPEND</a></li><li class=\"tab\"><a href=\"#list_append-2\"><i class=\"fa fa-book\"></i>HELP</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"list_append-1\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Pluto is a planet darn it!</span></span><br><span class=\"line\">planets.append(<span class=\"string\">'Pluto'</span>)</span><br><span class=\"line\">planets </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Mercury&apos;, &apos;Venus&apos;, &apos;Earth&apos;, &apos;Mars&apos;, &apos;Jupiter&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Neptune&apos;, &apos;Pluto&apos;] </span><br></pre></td></tr></table></figure>\n          </div>\n\n\n<p>왜 <code>append()</code> 함수에는 반환값이 없을까요? <code>help(planets.append)</code> 를 호출하여 설명서를 확인해 보세요.</p>\n<blockquote>\n<p><strong>잠깐</strong> : <code>append</code>는 <code>planets</code>에만 있는 메소드가 아니라 모든 리스트 타입의 객체가 가지고 다니는 메소드이므로 <code>help(list.append)</code>를 호출해도 됩니다. 하지만 <code>help(append)</code>는 호출하면 Python에서 “append”라는 변수가 없다고 응답할 것 입니다. “append”는 리스트 내에만 존재합니다 - 내장 함수인 <code>max</code> 나 <code>len</code> 와 같이 독립적으로 존재하지 않습니다.</p>\n</blockquote></div><div class=\"tab-pane\" id=\"list_append-2\"><div class=\"note info no-icon\">\n            <p><code>-&gt; None</code> 은 <code>list.append</code> 가 아무것도 반환하지 않는다는 것을 말합니다. 하지만 <code>planets</code>를 확인해보면 메소드의 호출로 값이 제대로 추가된 것을 볼 수 있습니다 :</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(planets.append) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on built-in function append:</span><br><span class=\"line\"></span><br><span class=\"line\">append(...) method of builtins.list instance</span><br><span class=\"line\">    L.append(object) -&gt; None -- append object to end </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n\n<p><code>list.pop</code> 은 list의 마지막 element를 제거하고 반환합니다:</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets.pop()</span><br><span class=\"line\">planets  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;Pluto&apos;</span><br><span class=\"line\">[&apos;Mercury&apos;, &apos;Venus&apos;, &apos;Earth&apos;, &apos;Mars&apos;, &apos;Jupiter&apos;, &apos;Saturn&apos;, &apos;Uranus&apos;, &apos;Neptune&apos;] </span><br></pre></td></tr></table></figure>\n          </div>\n\n\n<h3 id=\"리스트-검색-Searching-lists\"><a href=\"#리스트-검색-Searching-lists\" class=\"headerlink\" title=\"리스트 검색(Searching lists)\"></a>리스트 검색(Searching lists)</h3><p>지구는 태양계의 몇 번째 행성일까요? <code>list.index</code> 를 사용해서 해당 색인(index)을 알아낼 수 있습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets.index(<span class=\"string\">'Earth'</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<p>3번째 행성이군요.(i.e. 색인은 0에서 시작하기 때문)<br>그렇다면 플루토 행성은 몇 번째 일까요?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planets.index(<span class=\"string\">'Pluto'</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">ValueError                                Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-30</span><span class=\"number\">-3</span>a8584cba91a&gt; <span class=\"keyword\">in</span> &lt;module&gt;()</span><br><span class=\"line\">----&gt; 1 planets.index('Pluto')</span><br><span class=\"line\"></span><br><span class=\"line\">ValueError: <span class=\"string\">'Pluto'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> list</span><br></pre></td></tr></table></figure>\n\n<p>저런, 이전 예제에서 ‘Pluto’를 삭제 했었다는걸 까먹었군요<br>이와 같은 예상치 못한 상황을 피하기 위해 <code>in</code> 연산자를 사용하여 목록에 특정한 값이 들어 있는지를 확인할 수 있습니다.</p>\n<div class=\"tabs\" id=\"search_examples\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#search_examples-1\"><i class=\"fa fa-eye\"></i>EXAMPLE_1</a></li><li class=\"tab\"><a href=\"#search_examples-2\"><i class=\"fa fa-eye\"></i>EXAMPLE_2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"search_examples-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Is Earth a planet?</span></span><br><span class=\"line\"><span class=\"string\">\"Earth\"</span> <span class=\"keyword\">in</span> planets  </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">True  </span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"search_examples-2\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Is Calbefraques a planet?</span></span><br><span class=\"line\"><span class=\"string\">\"Calbefraques\"</span> <span class=\"keyword\">in</span> planets </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">False </span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>이 외에도 여기서 다루지 않은 몇 가지 흥미로운 list 메소드들이 있습니다. 특정 객체에 포함된 모든 메소드와 속성들을 알고 싶다면 객체 자체에서 <code>help()</code> 를 호출하시면 됩니다. 예를 들어, <code>help(planets)</code> 는 모든 list 메서드에 대해 알려줍니다.</p>\n<div class=\"tabs\" id=\"help_planets\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#help_planets-1\"><i class=\"fa fa-code\"></i>CODE</a></li><li class=\"tab\"><a href=\"#help_planets-2\"><i class=\"fa fa-terminal\"></i>output</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"help_planets-1\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">help(planets) </span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"help_planets-2\"><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help on list object:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">list</span><span class=\"params\">(object)</span></span></span><br><span class=\"line\"><span class=\"class\"> |  <span class=\"title\">list</span><span class=\"params\">()</span> -&gt; new empty list</span></span><br><span class=\"line\"><span class=\"class\"> |  list(iterable) -&gt; new list initialized from iterable's items</span></span><br><span class=\"line\"><span class=\"class\"> |  </span></span><br><span class=\"line\"><span class=\"class\"> |  Methods defined here:</span></span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __add__(self, value, /)</span><br><span class=\"line\"> |      Return self+value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __contains__(self, key, /)</span><br><span class=\"line\"> |      Return key <span class=\"keyword\">in</span> self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __delitem__(self, key, /)</span><br><span class=\"line\"> |      Delete self[key].</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __eq__(self, value, /)</span><br><span class=\"line\"> |      Return self==value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __ge__(self, value, /)</span><br><span class=\"line\"> |      Return self&gt;=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __getattribute__(self, name, /)</span><br><span class=\"line\"> |      Return getattr(self, name).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __getitem__(...)</span><br><span class=\"line\"> |      x.__getitem__(y) &lt;==&gt; x[y]</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __gt__(self, value, /)</span><br><span class=\"line\"> |      Return self&gt;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __iadd__(self, value, /)</span><br><span class=\"line\"> |      Implement self+=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __imul__(self, value, /)</span><br><span class=\"line\"> |      Implement self*=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __init__(self, /, *args, **kwargs)</span><br><span class=\"line\"> |      Initialize self.  See help(type(self)) <span class=\"keyword\">for</span> accurate signature.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __iter__(self, /)</span><br><span class=\"line\"> |      Implement iter(self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __le__(self, value, /)</span><br><span class=\"line\"> |      Return self&lt;=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __len__(self, /)</span><br><span class=\"line\"> |      Return len(self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __lt__(self, value, /)</span><br><span class=\"line\"> |      Return self&lt;value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __mul__(self, value, /)</span><br><span class=\"line\"> |      Return self*value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __ne__(self, value, /)</span><br><span class=\"line\"> |      Return self!=value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __new__(*args, **kwargs) <span class=\"keyword\">from</span> builtins.type</span><br><span class=\"line\"> |      Create <span class=\"keyword\">and</span> <span class=\"keyword\">return</span> a new object.  See help(type) <span class=\"keyword\">for</span> accurate signature.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __repr__(self, /)</span><br><span class=\"line\"> |      Return repr(self).</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __reversed__(...)</span><br><span class=\"line\"> |      L.__reversed__() -- <span class=\"keyword\">return</span> a reverse iterator over the list</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __rmul__(self, value, /)</span><br><span class=\"line\"> |      Return value*self.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __setitem__(self, key, value, /)</span><br><span class=\"line\"> |      Set self[key] to value.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __sizeof__(...)</span><br><span class=\"line\"> |      L.__sizeof__() -- size of L <span class=\"keyword\">in</span> memory, <span class=\"keyword\">in</span> bytes</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  append(...)</span><br><span class=\"line\"> |      L.append(object) -&gt; None -- append object to end</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  clear(...)</span><br><span class=\"line\"> |      L.clear() -&gt; None -- remove all items from L</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  copy(...)</span><br><span class=\"line\"> |      L.copy() -&gt; list -- a shallow copy of L</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  count(...)</span><br><span class=\"line\"> |      L.count(value) -&gt; integer -- return number of occurrences of value</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  extend(...)</span><br><span class=\"line\"> |      L.extend(iterable) -&gt; None -- extend list by appending elements from the iterable</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  index(...)</span><br><span class=\"line\"> |      L.index(value, [start, [stop]]) -&gt; integer -- return first index of value.</span><br><span class=\"line\"> |      Raises ValueError <span class=\"keyword\">if</span> the value <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> present.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  insert(...)</span><br><span class=\"line\"> |      L.insert(index, object) -- insert object before index</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  pop(...)</span><br><span class=\"line\"> |      L.pop([index]) -&gt; item -- remove and return item at index (default last).</span><br><span class=\"line\"> |      Raises IndexError <span class=\"keyword\">if</span> list <span class=\"keyword\">is</span> empty <span class=\"keyword\">or</span> index <span class=\"keyword\">is</span> out of range.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  remove(...)</span><br><span class=\"line\"> |      L.remove(value) -&gt; None -- remove first occurrence of value.</span><br><span class=\"line\"> |      Raises ValueError <span class=\"keyword\">if</span> the value <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> present.</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  reverse(...)</span><br><span class=\"line\"> |      L.reverse() -- reverse *IN PLACE*</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  sort(...)</span><br><span class=\"line\"> |      L.sort(key=None, reverse=False) -&gt; None -- stable sort *IN PLACE*</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  ----------------------------------------------------------------------</span><br><span class=\"line\"> |  Data <span class=\"keyword\">and</span> other attributes defined here:</span><br><span class=\"line\"> |  </span><br><span class=\"line\"> |  __hash__ = <span class=\"literal\">None</span> </span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>“output” 탭을 클릭해서 전체 도움말을 살펴 보세요. list 에는 <code>__eq__</code> 및 <code>__iadd__</code> 와 같은 이상한 이름의 메소드들이 많이 있습니다. 지금은 이것들에 대해 크게 신경쓸 필요가 없습니다. (이러한 메서드를 아마 평생 여러분이 직접 호출하지는 않을 것입니다. 그러나 색인 연산자나 비교 연산자와 같은 구문을 사용할 때, 이들은 배후에서 호출됩니다) 가장 흥미로운 메서드들은 목록 맨 아래에 있습니다(<code>append</code>, <code>clear</code>, <code>copy</code> 등).</p>\n<h2 id=\"튜플-Tuples\"><a href=\"#튜플-Tuples\" class=\"headerlink\" title=\"튜플(Tuples)\"></a>튜플(Tuples)</h2><p>Tuple은 list와 매우 비슷합니다. 단 2 가지 면에서 조금 다릅니다.</p>\n<p><strong>1:</strong> 대괄호 대신 소괄호를 사용하여 생성합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">t = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) </span><br></pre></td></tr></table></figure>혹은<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">t = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> <span class=\"comment\"># 위와 동일한 내용입니다</span></span><br><span class=\"line\">t </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(1, 2, 3) </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p><strong>2:</strong> 수정이 불가능 합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">0.125</span></span><br><span class=\"line\">x.as_integer_ratio() </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">TypeError                                 Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-36</span>-e6cf7836e708&gt; <span class=\"keyword\">in</span> &lt;module&gt;()</span><br><span class=\"line\">----&gt; 1 t[0] = 100</span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: <span class=\"string\">'tuple'</span> object does <span class=\"keyword\">not</span> support item assignment  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>튜플은 여러 개의 반환 값을 갖는 함수에 자주 사용됩니다.<br>예를 들어, float 객체의 <code>as_integer_ratio()</code> 메소드는 분자와 분모를 튜플 형태로 반환합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">0.125</span></span><br><span class=\"line\">x.as_integer_ratio() </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">8</span>)  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>여러 개의 값들을 각각의 변수로 할당이 가능합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">numerator, denominator = x.as_integer_ratio()</span><br><span class=\"line\">print(numerator / denominator) </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.125</span>  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>이제 우리는 두 개의 변수를 교환하는 것 처럼 보이는 고전적인 Stupid Python Trick™ (파이썬 속임수?)의 본질을 꿰뚫어볼 수 있게 되었습니다!</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">0</span></span><br><span class=\"line\">a, b = b, a</span><br><span class=\"line\">print(a, b) </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span>  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p><br><br><br></p>\n<h1 id=\"연습문제-Your-Turn\"><a href=\"#연습문제-Your-Turn\" class=\"headerlink\" title=\"연습문제(Your Turn)\"></a>연습문제(Your Turn)</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE3Mw==\" title=\"https://www.kaggle.com/kernels/fork/1275173\">리스트(lists) 예제<i class=\"fa fa-external-link\"></i></span></p>\n"},{"title":"(SW Expert Academy) 흐름과 제어 If - 6218번 6219번 6220번 6221번","date":"2019-07-28T11:52:23.000Z","subtitle":"파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법","_content":"\n# 1번 - 6218번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 반복문은 뒤에 나오는거 같은데... if문만으로 풀 수 있...나..?\n\n{% note success %}\n{% code lang:python %}\na = int(input())\n\nfor i in range(1, a+1):\n    if(a%i==0):\n        print(\"{}(은)는 {}의 약수입니다.\".format(i, a))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 2번 - 6219번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n\n{% note success %}\n{% code lang:python %}\na = int(input())\ncnt=0\n\nfor i in range(1, a+1):\n    if(a%i==0):\n        cnt+=1\n        print(\"{}(은)는 {}의 약수입니다.\".format(i, a))\n\n\nif(cnt==2):\n    print(\"{}(은)는 1과 {}로만 나눌 수 있는 소수입니다.\".format(a, a))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 3번 - 6220번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> ASCII 코드를 활용\n\n{% note success %}\n{% code lang:python %}\na = input()\n\nif(ord(a)>96):\n    print(\"{} 는 소문자 입니다.\".format(a))\nelse:\n\tprint(\"{} 는 대문자 입니다.\".format(a))\n\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 4번 - 6221번\n\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 입력을 랜덤으로 주는게 아닌데 굳이 list를 사용해야 하는가...?\n\n{% note success %}\n{% code lang:python %}\nMan1 = input()\nMan2 = input()\n\nRSP = [\"가위\", \"바위\", \"보\"]\n\nif(Man1 == Man2):\n    print(\"Result : Draw\")\nelif((Man1==RSP[0] and Man2==RSP[1]) or (Man1==RSP[1] and Man2==RSP[2]) or (Man1==RSP[2] and Man2==RSP[0])):\n    print(\"Result : Man2 Win!\")\nelse:\n    print(\"Result : Man1 Win!\")\n\n# 직접 입력하는게 아니라 랜덤으로 값을 주고 싶다면...\n# from random import *\n#\n# RSP = [\"가위\", \"바위\", \"보\"]\n#\n# Man1 = RSP[randrange(3)]\n# Man2 = RSP[randrange(3)]\n{% endcode %}\n{% endnote %}\n","source":"_posts/20190728-sw-6218.md","raw":"---\ntitle: (SW Expert Academy) 흐름과 제어 If - 6218번 6219번 6220번 6221번\ndate: 2019-07-28 20:52:23\ncategories: SW 아카데미\ntags: [삼성, 파이썬 ,SW Academy, python]\nsubtitle: 파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법\n---\n\n# 1번 - 6218번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 반복문은 뒤에 나오는거 같은데... if문만으로 풀 수 있...나..?\n\n{% note success %}\n{% code lang:python %}\na = int(input())\n\nfor i in range(1, a+1):\n    if(a%i==0):\n        print(\"{}(은)는 {}의 약수입니다.\".format(i, a))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 2번 - 6219번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n\n{% note success %}\n{% code lang:python %}\na = int(input())\ncnt=0\n\nfor i in range(1, a+1):\n    if(a%i==0):\n        cnt+=1\n        print(\"{}(은)는 {}의 약수입니다.\".format(i, a))\n\n\nif(cnt==2):\n    print(\"{}(은)는 1과 {}로만 나눌 수 있는 소수입니다.\".format(a, a))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 3번 - 6220번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> ASCII 코드를 활용\n\n{% note success %}\n{% code lang:python %}\na = input()\n\nif(ord(a)>96):\n    print(\"{} 는 소문자 입니다.\".format(a))\nelse:\n\tprint(\"{} 는 대문자 입니다.\".format(a))\n\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 4번 - 6221번\n\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 입력을 랜덤으로 주는게 아닌데 굳이 list를 사용해야 하는가...?\n\n{% note success %}\n{% code lang:python %}\nMan1 = input()\nMan2 = input()\n\nRSP = [\"가위\", \"바위\", \"보\"]\n\nif(Man1 == Man2):\n    print(\"Result : Draw\")\nelif((Man1==RSP[0] and Man2==RSP[1]) or (Man1==RSP[1] and Man2==RSP[2]) or (Man1==RSP[2] and Man2==RSP[0])):\n    print(\"Result : Man2 Win!\")\nelse:\n    print(\"Result : Man1 Win!\")\n\n# 직접 입력하는게 아니라 랜덤으로 값을 주고 싶다면...\n# from random import *\n#\n# RSP = [\"가위\", \"바위\", \"보\"]\n#\n# Man1 = RSP[randrange(3)]\n# Man2 = RSP[randrange(3)]\n{% endcode %}\n{% endnote %}\n","slug":"sw-6218","published":1,"updated":"2019-07-28T16:20:40.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt87q002z26466gy3afa9","content":"<h1 id=\"1번-6218번\"><a href=\"#1번-6218번\" class=\"headerlink\" title=\"1번 - 6218번\"></a>1번 - 6218번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>반복문은 뒤에 나오는거 같은데… if문만으로 풀 수 있…나..?</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = int(input())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, a+<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a%i==<span class=\"number\">0</span>):</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125;(은)는 &#123;&#125;의 약수입니다.\"</span>.format(i, a))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"2번-6219번\"><a href=\"#2번-6219번\" class=\"headerlink\" title=\"2번 - 6219번\"></a>2번 - 6219번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = int(input())</span><br><span class=\"line\">cnt=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, a+<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a%i==<span class=\"number\">0</span>):</span><br><span class=\"line\">        cnt+=<span class=\"number\">1</span></span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125;(은)는 &#123;&#125;의 약수입니다.\"</span>.format(i, a))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(cnt==<span class=\"number\">2</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125;(은)는 1과 &#123;&#125;로만 나눌 수 있는 소수입니다.\"</span>.format(a, a))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"3번-6220번\"><a href=\"#3번-6220번\" class=\"headerlink\" title=\"3번 - 6220번\"></a>3번 - 6220번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>ASCII 코드를 활용</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = input()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(ord(a)&gt;<span class=\"number\">96</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125; 는 소문자 입니다.\"</span>.format(a))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125; 는 대문자 입니다.\"</span>.format(a))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"4번-6221번\"><a href=\"#4번-6221번\" class=\"headerlink\" title=\"4번 - 6221번\"></a>4번 - 6221번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>입력을 랜덤으로 주는게 아닌데 굳이 list를 사용해야 하는가…?</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">Man1 = input()</span><br><span class=\"line\">Man2 = input()</span><br><span class=\"line\"></span><br><span class=\"line\">RSP = [<span class=\"string\">\"가위\"</span>, <span class=\"string\">\"바위\"</span>, <span class=\"string\">\"보\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(Man1 == Man2):</span><br><span class=\"line\">    print(<span class=\"string\">\"Result : Draw\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span>((Man1==RSP[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> Man2==RSP[<span class=\"number\">1</span>]) <span class=\"keyword\">or</span> (Man1==RSP[<span class=\"number\">1</span>] <span class=\"keyword\">and</span> Man2==RSP[<span class=\"number\">2</span>]) <span class=\"keyword\">or</span> (Man1==RSP[<span class=\"number\">2</span>] <span class=\"keyword\">and</span> Man2==RSP[<span class=\"number\">0</span>])):</span><br><span class=\"line\">    print(<span class=\"string\">\"Result : Man2 Win!\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Result : Man1 Win!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 직접 입력하는게 아니라 랜덤으로 값을 주고 싶다면...</span></span><br><span class=\"line\"><span class=\"comment\"># from random import *</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># RSP = [\"가위\", \"바위\", \"보\"]</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Man1 = RSP[randrange(3)]</span></span><br><span class=\"line\"><span class=\"comment\"># Man2 = RSP[randrange(3)]</span></span><br></pre></td></tr></table></figure>\n          </div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1번-6218번\"><a href=\"#1번-6218번\" class=\"headerlink\" title=\"1번 - 6218번\"></a>1번 - 6218번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>반복문은 뒤에 나오는거 같은데… if문만으로 풀 수 있…나..?</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = int(input())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, a+<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a%i==<span class=\"number\">0</span>):</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125;(은)는 &#123;&#125;의 약수입니다.\"</span>.format(i, a))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"2번-6219번\"><a href=\"#2번-6219번\" class=\"headerlink\" title=\"2번 - 6219번\"></a>2번 - 6219번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = int(input())</span><br><span class=\"line\">cnt=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, a+<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a%i==<span class=\"number\">0</span>):</span><br><span class=\"line\">        cnt+=<span class=\"number\">1</span></span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125;(은)는 &#123;&#125;의 약수입니다.\"</span>.format(i, a))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(cnt==<span class=\"number\">2</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125;(은)는 1과 &#123;&#125;로만 나눌 수 있는 소수입니다.\"</span>.format(a, a))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"3번-6220번\"><a href=\"#3번-6220번\" class=\"headerlink\" title=\"3번 - 6220번\"></a>3번 - 6220번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>ASCII 코드를 활용</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = input()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(ord(a)&gt;<span class=\"number\">96</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125; 는 소문자 입니다.\"</span>.format(a))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125; 는 대문자 입니다.\"</span>.format(a))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"4번-6221번\"><a href=\"#4번-6221번\" class=\"headerlink\" title=\"4번 - 6221번\"></a>4번 - 6221번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>입력을 랜덤으로 주는게 아닌데 굳이 list를 사용해야 하는가…?</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">Man1 = input()</span><br><span class=\"line\">Man2 = input()</span><br><span class=\"line\"></span><br><span class=\"line\">RSP = [<span class=\"string\">\"가위\"</span>, <span class=\"string\">\"바위\"</span>, <span class=\"string\">\"보\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(Man1 == Man2):</span><br><span class=\"line\">    print(<span class=\"string\">\"Result : Draw\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span>((Man1==RSP[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> Man2==RSP[<span class=\"number\">1</span>]) <span class=\"keyword\">or</span> (Man1==RSP[<span class=\"number\">1</span>] <span class=\"keyword\">and</span> Man2==RSP[<span class=\"number\">2</span>]) <span class=\"keyword\">or</span> (Man1==RSP[<span class=\"number\">2</span>] <span class=\"keyword\">and</span> Man2==RSP[<span class=\"number\">0</span>])):</span><br><span class=\"line\">    print(<span class=\"string\">\"Result : Man2 Win!\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Result : Man1 Win!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 직접 입력하는게 아니라 랜덤으로 값을 주고 싶다면...</span></span><br><span class=\"line\"><span class=\"comment\"># from random import *</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># RSP = [\"가위\", \"바위\", \"보\"]</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Man1 = RSP[randrange(3)]</span></span><br><span class=\"line\"><span class=\"comment\"># Man2 = RSP[randrange(3)]</span></span><br></pre></td></tr></table></figure>\n          </div>\n"},{"title":"(파이썬) 06 Strings and Dictionaries","date":"2019-07-26T13:11:36.000Z","subtitle":"Kaggle 홈페이지 Python 강좌 참고","_content":"\n# Reference\n\n- Kaggle 홈페이지 - [Kaggle](https://www.kaggle.com)\n- 11강 'Strings and Dictionaries' - [Python Micro-Course Home Page](https://www.kaggle.com/colinmorris/strings-and-dictionaries)\n\n> 영어 실력이 부족하여 문맥이 이해가 가지 않는 부분은 원문을 참고하시길 바랍니다...\n> 언젠가는 실력이 나아지기를...\n\n------\n\n이번 강에서는 파이썬의 필수적인 타입인 **strings** 와 **dictionaries** 에 대해 알아보겠습니다.\n\n# 문자열(Strings)\n\n파이썬의 장점이 빛나는 순간 중 하나는 문자열을 조작할 때 입니다. 이번 섹션에서 파이썬에 내장된 문자열 함수들과 포맷팅 작업들에 대해 알아보겠습니다.\n\n문자열 조작 패턴들은 데이터 사이언스(데이터 분석/마이닝) 작업할 때 자주 등장하는데, 이런 맥락에서 볼 때 문자열 조작은 파이썬의 큰 장점 중 하나라고 할 수 있습니다.\n\n## 문자열 문법(String syntax)\n\n이전 수업들의 예제에서 많은 문자열들을 다루며 이미 아시겠지만, 간단히 요약하자면 파이썬의 문자열은 작은 따옴표나 큰 따옴표 중 하나를 사용하여 정의 할 수 있습니다. 둘은 기능적으로 동일합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nx = 'Pluto is a planet'\ny = \"Pluto is a planet\"\nx == y  {% endcode %}\n{% code lang:python %}\nTrue  {% endcode %}\n{% endnote %}\n\n문자열에 작은 따옴표가 들어가는 경우(e.g. apostrophe) 큰 따옴표를 사용하면 편리합니다.\n마찬가지로 큰 따옴표가 포함된 문자열은 작은 따옴표로 묶으면 쉽게 만들 수 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\nprint(\"Pluto's a planet!\")\nprint('My dog is named \"Pluto\"') {% endcode %}\n{% code lang:python %}\nPluto's a planet!\nMy dog is named \"Pluto\" {% endcode %}\n{% endnote %}\n\n만약 작은 따옴표로 묶은 문자열에 작은 따옴표 문자를 넣으면 우리가 원하는 것과는 다르게 파이썬은 잘못 이해할 수 있습니다.\n\n{% note warning %}\n{% code lang:python %}\n'Pluto's a planet!' {% endcode %}\n{% code lang:python %}\nFile \"<ipython-input-3-a43631749f52>\", line 1\n  'Pluto's a planet!'\n         ^\nSyntaxError: invalid syntax{% endcode %}\n{% endnote %}\n\n작은 따옴표 문자에 백슬래시로 \"예외\" 처리하여 이를 해결할 수는 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\n'Pluto\\'s a planet!' {% endcode %}\n{% code lang:python %}\n'Pluto's a planet!' {% endcode %}\n{% endnote %}\n\n아래의 표는 백슬래시 문자 사용법의 요약입니다.\n\n| What you type... | What you get | example                   | `print(example)`       |\n| :--------------- | :----------- | :------------------------ | :--------------------- |\n| `\\'`             | `'`          | `'What\\'s up?'`           | `What's up?`           |\n| `\\\"`             | `\"`          | `\"That's \\\"cool\\\"\"`       | `That's \"cool\"`        |\n| `\\\\`             | `\\`          | `\"Look, a mountain: /\\\\\"` | `Look, a mountain: /\\` |\n| `\\n`             |              | `\"1\\n2 3\"`                | `1`<br> `2` `3`        |\n\n표 마지막의 `\\n` 은 개행 문자를 나타냅니다. 이를 통해 파이썬에서 줄 바꿈이 발생합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nhello = \"hello\\nworld\"\nprint(hello) {% endcode %}\n{% code lang:python %}\nhello\nworld {% endcode %}\n{% endnote %}\n\n또 다른 방법으로, 파이썬에서 문자열에 따옴표 세 개(triple quote syntax for strings)를 사용하면 입력하는 문자 그대로 개행 문자도 포함 할 수 있습니다.(즉, '\\n' 시퀀스를 사용하지 않고 키보드에서 'Enter'키를 치는 것만으로 줄 바꿈이 일어납니다). 우리는 함수를 문서화하는 데 사용하는 docstrings 을 배우면서 이것을 한번 본적이 있는데 사실 문자열을 정의하고자 하는 곳이면 어디에서나 사용할 수 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\ntriplequoted_hello = \"\"\"hello\nworld\"\"\"\nprint(triplequoted_hello)\nprint(triplequoted_hello == hello) {% endcode %}\n{% code %}\nhello\nworld\nTrue {% endcode %}\n{% endnote %}\n\n`print()` 함수는 `end` 키워드 인자에 특별한 값을 지정하지 않는한 기본값으로 `'\\n'` 을 가지기 때문에 자동으로 개행 문자를 추가합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nprint(\"hello\")\nprint(\"world\")\nprint(\"hello\", end='')\nprint(\"pluto\", end='') {% endcode %}\n{% code %}\nhello\nworld\nhellopluto {% endcode %}\n{% endnote %}\n\n## Strings are sequences\n\n문자열(string)은 연속된 문자들(characters)로 생각할 수 있습니다. 우리가 list로 할 수 있는 거의 모든 것을 문자열에서도 할 수 있습니다.\n\n{% tabs example_string %}\n<!-- tab Indexing @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # Indexing\n  planet = 'Pluto'\n  planet[0] {% endcode %}\n  {% code %}\n  'P' {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Slicing @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # Slicing\n  planet[-3:] {% endcode %}\n  {% code %}\n  'uto' {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Length @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # How long is this string?\n  len(planet)  {% endcode %}\n  {% code %}\n  5 {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Loop @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # Yes, we can even loop over them\n  [char+'! ' for char in planet]  {% endcode %}\n  {% code %}\n  ['P! ', 'l! ', 'u! ', 't! ', 'o! '] {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n하지만 list와 가장 큰 차이점은 문자열은 불변(immutable)이라는 점입니다. 우리는 문자열을 수정할 수 없습니다.\n\n{% note danger %}\n{% code lang:python %}\nplanet[0] = 'B'\n# planet.append doesn't work either {% endcode %}\n{% code lang:python %}\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-12-6ca42463b9f9> in <module>()\n----> 1 planet[0] = 'B'\n      2 # planet.append doesn't work either\n\nTypeError: 'str' object does not support item assignment  {% endcode %}\n{% endnote %}\n\n## 문자열 메소드(String methods)\n\n`list` 처럼, `str` 타입에는 매우 유용한 메소드들일 많이 있습니다. 몇 가지 예시를 보여드리겠습니다.\n\n```python\n  claim = \"Pluto is a planet!\"\n```\n\n{% tabs example_string_methods %}\n<!-- tab UpperCase @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # 모두 대문자\n  claim.upper() {% endcode %}\n  {% code %}\n  'PLUTO IS A PLANET!' {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab LowerCase @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # 모두 소문자\n  claim.lower() {% endcode %}\n  {% code %}\n  'pluto is a planet!' {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Index @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # substring의 첫번째 인덱스 값\n  claim.index('plan') {% endcode %}\n  {% code %}\n  11 {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Startswith @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  claim.startswith(planet)  {% endcode %}\n  {% code %}\n  True {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Endswith @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  claim.endswith('dwarf planet')  {% endcode %}\n  {% code %}\n  False {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n### Going between strings and lists: .split() and .join()\n\n`str.split()` 은 하나의 문자열을 공백 문자를 기준으로 분리한 작은 문자들로 이루어진 list로 바꿔 줍니다. 이는 하나의 큰 문자열을 단어 하나하나로 나눈 list로 바꾸는데 매우 유용합니다.\n\n{% tabs example_split %}\n<!-- tab Default @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  words = claim.split()\n  words  {% endcode %}\n  {% code %}\n  ['Pluto', 'is', 'a', 'planet!'] {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Custom @eye -->\n{% note no-icon %}\n때로는 공백 이외의 다른 것을 기준으로 나눠야 할 때도 있습니다.\n\n{% code lang:python %}\ndatestr = '1956-01-31'\nyear, month, day = datestr.split('-') {% endcode %}\n\nyear, month, day은 이제 각각 1956, 01, 31을 참조할 것입니다.\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n`str.join()` 은 반대의 기능을 한다고 보시면 됩니다, seperator(분리자)로 분리되었던 문자(열) list를 하나의 긴 문자열로 묶어줍니다.\n\n{% tabs example_join %}\n<!-- tab Basic @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  '/'.join([month, day, year]) {% endcode %}\n  {% code %}\n  '01/31/1956' {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Unicode @eye -->\n{% note no-icon %}\n  문자열 리터럴에 유니코드 문자를 넣을 수 도 있습니다 :)\n  {% code lang:python %}\n  ' 👏 '.join([word.upper() for word in words]) {% endcode %}\n  {% code %}\n  'PLUTO 👏 IS 👏 A 👏 PLANET!' {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n\n### Building strings with .format()\n\n파이썬에서는 `+` 연산자를 사용해서 문자열을 합칠 수 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\nplanet + ', we miss you.' {% endcode %}\n{% code %}\n'Pluto, we miss you.' {% endcode %}\n{% endnote %}\n\n{% note warning %}\n문자열이 아닌 객체를 사용할 때는 `str()` 을 먼저 호출하여 문자열로 바꿔줘야 하는 점을 주의하셔야 합니다.\n\n{% code lang:python %}\nposition = 9\nplanet + \", you'll always be the \" + position + \"th planet to me.\" {% endcode %}\n{% code lang:python %}\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-23-73295f9638cc> in <module>()\n      1 position = 9\n----> 2 planet + \", you'll always be the \" + position + \"th planet to me.\"\n\nTypeError: must be str, not int {% endcode %}\n{% endnote %}\n\n{% note no-icon %}\n{% code lang:python %}\nplanet + \", you'll always be the \" + str(position) + \"th planet to me.\" {% endcode %}\n{% code %}\n\"Pluto, you'll always be the 9th planet to me.\" {% endcode %}\n{% endnote %}\n\n가독성이 떨어지고 일일이 타입을 확인하며 바꿔줘야하는게 귀찮을 것 같습니다. `str.format()` 을 사용하면 이를 해결할 수 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\n\"{}, you'll always be the {}th planet to me.\".format(planet, position) {% endcode %}\n{% code %}\n\"Pluto, you'll always be the 9th planet to me.\" {% endcode %}\n{% endnote %}\n\n훨씬 깔끔한 것 같습니다! \"format string\"에 `.format()` 을 호출하고, 우리가 삽입하고자 하는 파이썬 값은 `{}` 로 표현되는 placeholder에 들어갈 것 입니다.\n우리가 int형인 `position` 을 변환하기 위해 `str()` 을 호출 할 필요가 없었던 점에 주목하십시오. `format()` 에서 이를 알아서 처리합니다.\n이게 `format()` 이 하는 일의 전부라해도 우리는 이를 매우 유용하게 사용할 것 입니다. 하지만 알아갈 수록 이 함수로 할 수 있는게 훨씬 더 많다는 것을 깨닫게 될 것 입니다. 조금만 더 알아보겠습니다.\n\n{% tabs example_format %}\n<!-- tab Example_1 @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  pluto_mass = 1.303 * 10**22\n  earth_mass = 5.9722 * 10**24\n  population = 52910390\n  #         2 decimal points   3 decimal points, format as percent     separate with commas\n  \"{} weighs about {:.2} kilograms ({:.3%} of Earth's mass). It is home to {:,} Plutonians.\".format(\n      planet, pluto_mass, pluto_mass / earth_mass, population,\n  ) {% endcode %}\n  {% code %}\n  \"Pluto weighs about 1.3e+22 kilograms (0.218% of Earth's mass). It is home to 52,910,390 Plutonians.\" {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Example_2 @eye -->\n{% note no-icon %}\n  문자열 리터럴에 유니코드 문자를 넣을 수 도 있습니다 :)\n  {% code lang:python %}\n  # Referring to format() arguments by index, starting from 0\n  s = \"\"\"Pluto's a {0}.\n  No, it's a {1}.\n  {0}!\n  {1}!\"\"\".format('planet', 'dwarf planet')\n  print(s) {% endcode %}\n  {% code %}\n  Pluto's a planet.\n  No, it's a dwarf planet.\n  planet!\n  dwarf planet! {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n조금 과장하자면 `str.format` 에 대한 설명과 내용으로 짧은 책을 쓸 수도 있기 때문에 가볍게 알아보는 본 강의에서는 이쯤에서 멈추겠습니다.\n더 자세히 알고 싶으신 분은 [pyformat.info](https://pyformat.info/)와 [the offical docs](https://docs.python.org/3/library/string.html#formatstrings) 를 읽어 보시길 바랍니다.\n\n-----\n\n# 딕셔너리(Dictionaries)\n\n-----\n\n<br><br><br>\n# 연습문제(Your Turn)\n\n[strings and dictionaries 예제](https://www.kaggle.com/kernels/fork/1275185)\n","source":"_posts/20190726-06-strings-and-dictionaries.md","raw":"---\ntitle: (파이썬) 06 Strings and Dictionaries\ndate: 2019-07-26 22:11:36\ncategories:\n  - LANGUAGE\n  - PYTHON\ntags: [파이썬, 캐글, 튜토리얼, kaggle, programming language, python, language, strings, dictionaries, tutorial]\nsubtitle: Kaggle 홈페이지 Python 강좌 참고\n---\n\n# Reference\n\n- Kaggle 홈페이지 - [Kaggle](https://www.kaggle.com)\n- 11강 'Strings and Dictionaries' - [Python Micro-Course Home Page](https://www.kaggle.com/colinmorris/strings-and-dictionaries)\n\n> 영어 실력이 부족하여 문맥이 이해가 가지 않는 부분은 원문을 참고하시길 바랍니다...\n> 언젠가는 실력이 나아지기를...\n\n------\n\n이번 강에서는 파이썬의 필수적인 타입인 **strings** 와 **dictionaries** 에 대해 알아보겠습니다.\n\n# 문자열(Strings)\n\n파이썬의 장점이 빛나는 순간 중 하나는 문자열을 조작할 때 입니다. 이번 섹션에서 파이썬에 내장된 문자열 함수들과 포맷팅 작업들에 대해 알아보겠습니다.\n\n문자열 조작 패턴들은 데이터 사이언스(데이터 분석/마이닝) 작업할 때 자주 등장하는데, 이런 맥락에서 볼 때 문자열 조작은 파이썬의 큰 장점 중 하나라고 할 수 있습니다.\n\n## 문자열 문법(String syntax)\n\n이전 수업들의 예제에서 많은 문자열들을 다루며 이미 아시겠지만, 간단히 요약하자면 파이썬의 문자열은 작은 따옴표나 큰 따옴표 중 하나를 사용하여 정의 할 수 있습니다. 둘은 기능적으로 동일합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nx = 'Pluto is a planet'\ny = \"Pluto is a planet\"\nx == y  {% endcode %}\n{% code lang:python %}\nTrue  {% endcode %}\n{% endnote %}\n\n문자열에 작은 따옴표가 들어가는 경우(e.g. apostrophe) 큰 따옴표를 사용하면 편리합니다.\n마찬가지로 큰 따옴표가 포함된 문자열은 작은 따옴표로 묶으면 쉽게 만들 수 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\nprint(\"Pluto's a planet!\")\nprint('My dog is named \"Pluto\"') {% endcode %}\n{% code lang:python %}\nPluto's a planet!\nMy dog is named \"Pluto\" {% endcode %}\n{% endnote %}\n\n만약 작은 따옴표로 묶은 문자열에 작은 따옴표 문자를 넣으면 우리가 원하는 것과는 다르게 파이썬은 잘못 이해할 수 있습니다.\n\n{% note warning %}\n{% code lang:python %}\n'Pluto's a planet!' {% endcode %}\n{% code lang:python %}\nFile \"<ipython-input-3-a43631749f52>\", line 1\n  'Pluto's a planet!'\n         ^\nSyntaxError: invalid syntax{% endcode %}\n{% endnote %}\n\n작은 따옴표 문자에 백슬래시로 \"예외\" 처리하여 이를 해결할 수는 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\n'Pluto\\'s a planet!' {% endcode %}\n{% code lang:python %}\n'Pluto's a planet!' {% endcode %}\n{% endnote %}\n\n아래의 표는 백슬래시 문자 사용법의 요약입니다.\n\n| What you type... | What you get | example                   | `print(example)`       |\n| :--------------- | :----------- | :------------------------ | :--------------------- |\n| `\\'`             | `'`          | `'What\\'s up?'`           | `What's up?`           |\n| `\\\"`             | `\"`          | `\"That's \\\"cool\\\"\"`       | `That's \"cool\"`        |\n| `\\\\`             | `\\`          | `\"Look, a mountain: /\\\\\"` | `Look, a mountain: /\\` |\n| `\\n`             |              | `\"1\\n2 3\"`                | `1`<br> `2` `3`        |\n\n표 마지막의 `\\n` 은 개행 문자를 나타냅니다. 이를 통해 파이썬에서 줄 바꿈이 발생합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nhello = \"hello\\nworld\"\nprint(hello) {% endcode %}\n{% code lang:python %}\nhello\nworld {% endcode %}\n{% endnote %}\n\n또 다른 방법으로, 파이썬에서 문자열에 따옴표 세 개(triple quote syntax for strings)를 사용하면 입력하는 문자 그대로 개행 문자도 포함 할 수 있습니다.(즉, '\\n' 시퀀스를 사용하지 않고 키보드에서 'Enter'키를 치는 것만으로 줄 바꿈이 일어납니다). 우리는 함수를 문서화하는 데 사용하는 docstrings 을 배우면서 이것을 한번 본적이 있는데 사실 문자열을 정의하고자 하는 곳이면 어디에서나 사용할 수 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\ntriplequoted_hello = \"\"\"hello\nworld\"\"\"\nprint(triplequoted_hello)\nprint(triplequoted_hello == hello) {% endcode %}\n{% code %}\nhello\nworld\nTrue {% endcode %}\n{% endnote %}\n\n`print()` 함수는 `end` 키워드 인자에 특별한 값을 지정하지 않는한 기본값으로 `'\\n'` 을 가지기 때문에 자동으로 개행 문자를 추가합니다.\n\n{% note no-icon %}\n{% code lang:python %}\nprint(\"hello\")\nprint(\"world\")\nprint(\"hello\", end='')\nprint(\"pluto\", end='') {% endcode %}\n{% code %}\nhello\nworld\nhellopluto {% endcode %}\n{% endnote %}\n\n## Strings are sequences\n\n문자열(string)은 연속된 문자들(characters)로 생각할 수 있습니다. 우리가 list로 할 수 있는 거의 모든 것을 문자열에서도 할 수 있습니다.\n\n{% tabs example_string %}\n<!-- tab Indexing @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # Indexing\n  planet = 'Pluto'\n  planet[0] {% endcode %}\n  {% code %}\n  'P' {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Slicing @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # Slicing\n  planet[-3:] {% endcode %}\n  {% code %}\n  'uto' {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Length @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # How long is this string?\n  len(planet)  {% endcode %}\n  {% code %}\n  5 {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Loop @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # Yes, we can even loop over them\n  [char+'! ' for char in planet]  {% endcode %}\n  {% code %}\n  ['P! ', 'l! ', 'u! ', 't! ', 'o! '] {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n하지만 list와 가장 큰 차이점은 문자열은 불변(immutable)이라는 점입니다. 우리는 문자열을 수정할 수 없습니다.\n\n{% note danger %}\n{% code lang:python %}\nplanet[0] = 'B'\n# planet.append doesn't work either {% endcode %}\n{% code lang:python %}\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-12-6ca42463b9f9> in <module>()\n----> 1 planet[0] = 'B'\n      2 # planet.append doesn't work either\n\nTypeError: 'str' object does not support item assignment  {% endcode %}\n{% endnote %}\n\n## 문자열 메소드(String methods)\n\n`list` 처럼, `str` 타입에는 매우 유용한 메소드들일 많이 있습니다. 몇 가지 예시를 보여드리겠습니다.\n\n```python\n  claim = \"Pluto is a planet!\"\n```\n\n{% tabs example_string_methods %}\n<!-- tab UpperCase @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # 모두 대문자\n  claim.upper() {% endcode %}\n  {% code %}\n  'PLUTO IS A PLANET!' {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab LowerCase @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # 모두 소문자\n  claim.lower() {% endcode %}\n  {% code %}\n  'pluto is a planet!' {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Index @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  # substring의 첫번째 인덱스 값\n  claim.index('plan') {% endcode %}\n  {% code %}\n  11 {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Startswith @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  claim.startswith(planet)  {% endcode %}\n  {% code %}\n  True {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Endswith @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  claim.endswith('dwarf planet')  {% endcode %}\n  {% code %}\n  False {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n### Going between strings and lists: .split() and .join()\n\n`str.split()` 은 하나의 문자열을 공백 문자를 기준으로 분리한 작은 문자들로 이루어진 list로 바꿔 줍니다. 이는 하나의 큰 문자열을 단어 하나하나로 나눈 list로 바꾸는데 매우 유용합니다.\n\n{% tabs example_split %}\n<!-- tab Default @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  words = claim.split()\n  words  {% endcode %}\n  {% code %}\n  ['Pluto', 'is', 'a', 'planet!'] {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Custom @eye -->\n{% note no-icon %}\n때로는 공백 이외의 다른 것을 기준으로 나눠야 할 때도 있습니다.\n\n{% code lang:python %}\ndatestr = '1956-01-31'\nyear, month, day = datestr.split('-') {% endcode %}\n\nyear, month, day은 이제 각각 1956, 01, 31을 참조할 것입니다.\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n`str.join()` 은 반대의 기능을 한다고 보시면 됩니다, seperator(분리자)로 분리되었던 문자(열) list를 하나의 긴 문자열로 묶어줍니다.\n\n{% tabs example_join %}\n<!-- tab Basic @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  '/'.join([month, day, year]) {% endcode %}\n  {% code %}\n  '01/31/1956' {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Unicode @eye -->\n{% note no-icon %}\n  문자열 리터럴에 유니코드 문자를 넣을 수 도 있습니다 :)\n  {% code lang:python %}\n  ' 👏 '.join([word.upper() for word in words]) {% endcode %}\n  {% code %}\n  'PLUTO 👏 IS 👏 A 👏 PLANET!' {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n\n### Building strings with .format()\n\n파이썬에서는 `+` 연산자를 사용해서 문자열을 합칠 수 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\nplanet + ', we miss you.' {% endcode %}\n{% code %}\n'Pluto, we miss you.' {% endcode %}\n{% endnote %}\n\n{% note warning %}\n문자열이 아닌 객체를 사용할 때는 `str()` 을 먼저 호출하여 문자열로 바꿔줘야 하는 점을 주의하셔야 합니다.\n\n{% code lang:python %}\nposition = 9\nplanet + \", you'll always be the \" + position + \"th planet to me.\" {% endcode %}\n{% code lang:python %}\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-23-73295f9638cc> in <module>()\n      1 position = 9\n----> 2 planet + \", you'll always be the \" + position + \"th planet to me.\"\n\nTypeError: must be str, not int {% endcode %}\n{% endnote %}\n\n{% note no-icon %}\n{% code lang:python %}\nplanet + \", you'll always be the \" + str(position) + \"th planet to me.\" {% endcode %}\n{% code %}\n\"Pluto, you'll always be the 9th planet to me.\" {% endcode %}\n{% endnote %}\n\n가독성이 떨어지고 일일이 타입을 확인하며 바꿔줘야하는게 귀찮을 것 같습니다. `str.format()` 을 사용하면 이를 해결할 수 있습니다.\n\n{% note no-icon %}\n{% code lang:python %}\n\"{}, you'll always be the {}th planet to me.\".format(planet, position) {% endcode %}\n{% code %}\n\"Pluto, you'll always be the 9th planet to me.\" {% endcode %}\n{% endnote %}\n\n훨씬 깔끔한 것 같습니다! \"format string\"에 `.format()` 을 호출하고, 우리가 삽입하고자 하는 파이썬 값은 `{}` 로 표현되는 placeholder에 들어갈 것 입니다.\n우리가 int형인 `position` 을 변환하기 위해 `str()` 을 호출 할 필요가 없었던 점에 주목하십시오. `format()` 에서 이를 알아서 처리합니다.\n이게 `format()` 이 하는 일의 전부라해도 우리는 이를 매우 유용하게 사용할 것 입니다. 하지만 알아갈 수록 이 함수로 할 수 있는게 훨씬 더 많다는 것을 깨닫게 될 것 입니다. 조금만 더 알아보겠습니다.\n\n{% tabs example_format %}\n<!-- tab Example_1 @eye -->\n{% note no-icon %}\n  {% code lang:python %}\n  pluto_mass = 1.303 * 10**22\n  earth_mass = 5.9722 * 10**24\n  population = 52910390\n  #         2 decimal points   3 decimal points, format as percent     separate with commas\n  \"{} weighs about {:.2} kilograms ({:.3%} of Earth's mass). It is home to {:,} Plutonians.\".format(\n      planet, pluto_mass, pluto_mass / earth_mass, population,\n  ) {% endcode %}\n  {% code %}\n  \"Pluto weighs about 1.3e+22 kilograms (0.218% of Earth's mass). It is home to 52,910,390 Plutonians.\" {% endcode %}\n{% endnote %}\n<!-- endtab -->\n\n<!-- tab Example_2 @eye -->\n{% note no-icon %}\n  문자열 리터럴에 유니코드 문자를 넣을 수 도 있습니다 :)\n  {% code lang:python %}\n  # Referring to format() arguments by index, starting from 0\n  s = \"\"\"Pluto's a {0}.\n  No, it's a {1}.\n  {0}!\n  {1}!\"\"\".format('planet', 'dwarf planet')\n  print(s) {% endcode %}\n  {% code %}\n  Pluto's a planet.\n  No, it's a dwarf planet.\n  planet!\n  dwarf planet! {% endcode %}\n{% endnote %}\n<!-- endtab -->\n{% endtabs %}\n\n조금 과장하자면 `str.format` 에 대한 설명과 내용으로 짧은 책을 쓸 수도 있기 때문에 가볍게 알아보는 본 강의에서는 이쯤에서 멈추겠습니다.\n더 자세히 알고 싶으신 분은 [pyformat.info](https://pyformat.info/)와 [the offical docs](https://docs.python.org/3/library/string.html#formatstrings) 를 읽어 보시길 바랍니다.\n\n-----\n\n# 딕셔너리(Dictionaries)\n\n-----\n\n<br><br><br>\n# 연습문제(Your Turn)\n\n[strings and dictionaries 예제](https://www.kaggle.com/kernels/fork/1275185)\n","slug":"06-strings-and-dictionaries","published":1,"updated":"2019-07-31T05:24:19.757Z","_id":"cjyplt87u00332646pgsn6531","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>Kaggle 홈페이지 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbQ==\" title=\"https://www.kaggle.com\">Kaggle<i class=\"fa fa-external-link\"></i></span></li>\n<li>11강 ‘Strings and Dictionaries’ - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jb2xpbm1vcnJpcy9zdHJpbmdzLWFuZC1kaWN0aW9uYXJpZXM=\" title=\"https://www.kaggle.com/colinmorris/strings-and-dictionaries\">Python Micro-Course Home Page<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<blockquote>\n<p>영어 실력이 부족하여 문맥이 이해가 가지 않는 부분은 원문을 참고하시길 바랍니다…<br>언젠가는 실력이 나아지기를…</p>\n</blockquote>\n<hr>\n<p>이번 강에서는 파이썬의 필수적인 타입인 <strong>strings</strong> 와 <strong>dictionaries</strong> 에 대해 알아보겠습니다.</p>\n<h1 id=\"문자열-Strings\"><a href=\"#문자열-Strings\" class=\"headerlink\" title=\"문자열(Strings)\"></a>문자열(Strings)</h1><p>파이썬의 장점이 빛나는 순간 중 하나는 문자열을 조작할 때 입니다. 이번 섹션에서 파이썬에 내장된 문자열 함수들과 포맷팅 작업들에 대해 알아보겠습니다.</p>\n<p>문자열 조작 패턴들은 데이터 사이언스(데이터 분석/마이닝) 작업할 때 자주 등장하는데, 이런 맥락에서 볼 때 문자열 조작은 파이썬의 큰 장점 중 하나라고 할 수 있습니다.</p>\n<h2 id=\"문자열-문법-String-syntax\"><a href=\"#문자열-문법-String-syntax\" class=\"headerlink\" title=\"문자열 문법(String syntax)\"></a>문자열 문법(String syntax)</h2><p>이전 수업들의 예제에서 많은 문자열들을 다루며 이미 아시겠지만, 간단히 요약하자면 파이썬의 문자열은 작은 따옴표나 큰 따옴표 중 하나를 사용하여 정의 할 수 있습니다. 둘은 기능적으로 동일합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"string\">'Pluto is a planet'</span></span><br><span class=\"line\">y = <span class=\"string\">\"Pluto is a planet\"</span></span><br><span class=\"line\">x == y  </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span>  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>문자열에 작은 따옴표가 들어가는 경우(e.g. apostrophe) 큰 따옴표를 사용하면 편리합니다.<br>마찬가지로 큰 따옴표가 포함된 문자열은 작은 따옴표로 묶으면 쉽게 만들 수 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"Pluto's a planet!\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'My dog is named \"Pluto\"'</span>) </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">Pluto<span class=\"string\">'s a planet!</span></span><br><span class=\"line\"><span class=\"string\">My dog is named \"Pluto\" </span></span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>만약 작은 따옴표로 묶은 문자열에 작은 따옴표 문자를 넣으면 우리가 원하는 것과는 다르게 파이썬은 잘못 이해할 수 있습니다.</p>\n<div class=\"note warning\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Pluto'</span>s a planet!<span class=\"string\">' </span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">File <span class=\"string\">\"&lt;ipython-input-3-a43631749f52&gt;\"</span>, line <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"string\">'Pluto'</span>s a planet!<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">         ^</span></span><br><span class=\"line\"><span class=\"string\">SyntaxError: invalid syntax</span></span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>작은 따옴표 문자에 백슬래시로 “예외” 처리하여 이를 해결할 수는 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Pluto\\'s a planet!'</span> </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Pluto'</span>s a planet!<span class=\"string\">' </span></span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>아래의 표는 백슬래시 문자 사용법의 요약입니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">What you type…</th>\n<th align=\"left\">What you get</th>\n<th align=\"left\">example</th>\n<th align=\"left\"><code>print(example)</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>\\&#39;</code></td>\n<td align=\"left\"><code>&#39;</code></td>\n<td align=\"left\"><code>&#39;What\\&#39;s up?&#39;</code></td>\n<td align=\"left\"><code>What&#39;s up?</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\&quot;</code></td>\n<td align=\"left\"><code>&quot;</code></td>\n<td align=\"left\"><code>&quot;That&#39;s \\&quot;cool\\&quot;&quot;</code></td>\n<td align=\"left\"><code>That&#39;s &quot;cool&quot;</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\\\</code></td>\n<td align=\"left\"><code>\\</code></td>\n<td align=\"left\"><code>&quot;Look, a mountain: /\\\\&quot;</code></td>\n<td align=\"left\"><code>Look, a mountain: /\\</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\n</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>&quot;1\\n2 3&quot;</code></td>\n<td align=\"left\"><code>1</code><br> <code>2</code> <code>3</code></td>\n</tr>\n</tbody></table>\n<p>표 마지막의 <code>\\n</code> 은 개행 문자를 나타냅니다. 이를 통해 파이썬에서 줄 바꿈이 발생합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello = <span class=\"string\">\"hello\\nworld\"</span></span><br><span class=\"line\">print(hello) </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">world </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>또 다른 방법으로, 파이썬에서 문자열에 따옴표 세 개(triple quote syntax for strings)를 사용하면 입력하는 문자 그대로 개행 문자도 포함 할 수 있습니다.(즉, ‘\\n’ 시퀀스를 사용하지 않고 키보드에서 ‘Enter’키를 치는 것만으로 줄 바꿈이 일어납니다). 우리는 함수를 문서화하는 데 사용하는 docstrings 을 배우면서 이것을 한번 본적이 있는데 사실 문자열을 정의하고자 하는 곳이면 어디에서나 사용할 수 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">triplequoted_hello = <span class=\"string\">\"\"\"hello</span></span><br><span class=\"line\"><span class=\"string\">world\"\"\"</span></span><br><span class=\"line\">print(triplequoted_hello)</span><br><span class=\"line\">print(triplequoted_hello == hello) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\">True </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p><code>print()</code> 함수는 <code>end</code> 키워드 인자에 특별한 값을 지정하지 않는한 기본값으로 <code>&#39;\\n&#39;</code> 을 가지기 때문에 자동으로 개행 문자를 추가합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"world\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"hello\"</span>, end=<span class=\"string\">''</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"pluto\"</span>, end=<span class=\"string\">''</span>) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\">hellopluto </span><br></pre></td></tr></table></figure>\n          </div>\n\n<h2 id=\"Strings-are-sequences\"><a href=\"#Strings-are-sequences\" class=\"headerlink\" title=\"Strings are sequences\"></a>Strings are sequences</h2><p>문자열(string)은 연속된 문자들(characters)로 생각할 수 있습니다. 우리가 list로 할 수 있는 거의 모든 것을 문자열에서도 할 수 있습니다.</p>\n<div class=\"tabs\" id=\"example_string\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_string-1\"><i class=\"fa fa-eye\"></i>Indexing</a></li><li class=\"tab\"><a href=\"#example_string-2\"><i class=\"fa fa-eye\"></i>Slicing</a></li><li class=\"tab\"><a href=\"#example_string-3\"><i class=\"fa fa-eye\"></i>Length</a></li><li class=\"tab\"><a href=\"#example_string-4\"><i class=\"fa fa-eye\"></i>Loop</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_string-1\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Indexing</span></span><br><span class=\"line\">planet = <span class=\"string\">'Pluto'</span></span><br><span class=\"line\">planet[<span class=\"number\">0</span>] </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;P&apos; </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string-2\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Slicing</span></span><br><span class=\"line\">planet[<span class=\"number\">-3</span>:] </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;uto&apos; </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string-3\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># How long is this string?</span></span><br><span class=\"line\">len(planet)  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">5 </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string-4\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Yes, we can even loop over them</span></span><br><span class=\"line\">[char+<span class=\"string\">'! '</span> <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> planet]  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;P! &apos;, &apos;l! &apos;, &apos;u! &apos;, &apos;t! &apos;, &apos;o! &apos;] </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<p>하지만 list와 가장 큰 차이점은 문자열은 불변(immutable)이라는 점입니다. 우리는 문자열을 수정할 수 없습니다.</p>\n<div class=\"note danger\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planet[<span class=\"number\">0</span>] = <span class=\"string\">'B'</span></span><br><span class=\"line\"><span class=\"comment\"># planet.append doesn't work either </span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">TypeError                                 Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-12</span><span class=\"number\">-6</span>ca42463b9f9&gt; <span class=\"keyword\">in</span> &lt;module&gt;()</span><br><span class=\"line\">----&gt; 1 planet[0] = 'B'</span><br><span class=\"line\">      <span class=\"number\">2</span> <span class=\"comment\"># planet.append doesn't work either</span></span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: <span class=\"string\">'str'</span> object does <span class=\"keyword\">not</span> support item assignment  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<h2 id=\"문자열-메소드-String-methods\"><a href=\"#문자열-메소드-String-methods\" class=\"headerlink\" title=\"문자열 메소드(String methods)\"></a>문자열 메소드(String methods)</h2><p><code>list</code> 처럼, <code>str</code> 타입에는 매우 유용한 메소드들일 많이 있습니다. 몇 가지 예시를 보여드리겠습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">claim = <span class=\"string\">\"Pluto is a planet!\"</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"example_string_methods\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_string_methods-1\"><i class=\"fa fa-eye\"></i>UpperCase</a></li><li class=\"tab\"><a href=\"#example_string_methods-2\"><i class=\"fa fa-eye\"></i>LowerCase</a></li><li class=\"tab\"><a href=\"#example_string_methods-3\"><i class=\"fa fa-eye\"></i>Index</a></li><li class=\"tab\"><a href=\"#example_string_methods-4\"><i class=\"fa fa-eye\"></i>Startswith</a></li><li class=\"tab\"><a href=\"#example_string_methods-5\"><i class=\"fa fa-eye\"></i>Endswith</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_string_methods-1\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 모두 대문자</span></span><br><span class=\"line\">claim.upper() </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;PLUTO IS A PLANET!&apos; </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string_methods-2\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 모두 소문자</span></span><br><span class=\"line\">claim.lower() </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;pluto is a planet!&apos; </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string_methods-3\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># substring의 첫번째 인덱스 값</span></span><br><span class=\"line\">claim.index(<span class=\"string\">'plan'</span>) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">11 </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string_methods-4\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">claim.startswith(planet)  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">True </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string_methods-5\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">claim.endswith(<span class=\"string\">'dwarf planet'</span>)  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">False </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<h3 id=\"Going-between-strings-and-lists-split-and-join\"><a href=\"#Going-between-strings-and-lists-split-and-join\" class=\"headerlink\" title=\"Going between strings and lists: .split() and .join()\"></a>Going between strings and lists: .split() and .join()</h3><p><code>str.split()</code> 은 하나의 문자열을 공백 문자를 기준으로 분리한 작은 문자들로 이루어진 list로 바꿔 줍니다. 이는 하나의 큰 문자열을 단어 하나하나로 나눈 list로 바꾸는데 매우 유용합니다.</p>\n<div class=\"tabs\" id=\"example_split\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_split-1\"><i class=\"fa fa-eye\"></i>Default</a></li><li class=\"tab\"><a href=\"#example_split-2\"><i class=\"fa fa-eye\"></i>Custom</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_split-1\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">words = claim.split()</span><br><span class=\"line\">words  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Pluto&apos;, &apos;is&apos;, &apos;a&apos;, &apos;planet!&apos;] </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_split-2\"><div class=\"note no-icon\">\n            <p>때로는 공백 이외의 다른 것을 기준으로 나눠야 할 때도 있습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">datestr = <span class=\"string\">'1956-01-31'</span></span><br><span class=\"line\">year, month, day = datestr.split(<span class=\"string\">'-'</span>) </span><br></pre></td></tr></table></figure><p>year, month, day은 이제 각각 1956, 01, 31을 참조할 것입니다.</p>\n          </div></div></div></div>\n\n<p><code>str.join()</code> 은 반대의 기능을 한다고 보시면 됩니다, seperator(분리자)로 분리되었던 문자(열) list를 하나의 긴 문자열로 묶어줍니다.</p>\n<div class=\"tabs\" id=\"example_join\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_join-1\"><i class=\"fa fa-eye\"></i>Basic</a></li><li class=\"tab\"><a href=\"#example_join-2\"><i class=\"fa fa-eye\"></i>Unicode</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_join-1\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'/'</span>.join([month, day, year]) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;01/31/1956&apos; </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_join-2\"><div class=\"note no-icon\">\n            <p>문자열 리터럴에 유니코드 문자를 넣을 수 도 있습니다 :)</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">' 👏 '</span>.join([word.upper() <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words]) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;PLUTO 👏 IS 👏 A 👏 PLANET!&apos; </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n\n<h3 id=\"Building-strings-with-format\"><a href=\"#Building-strings-with-format\" class=\"headerlink\" title=\"Building strings with .format()\"></a>Building strings with .format()</h3><p>파이썬에서는 <code>+</code> 연산자를 사용해서 문자열을 합칠 수 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planet + <span class=\"string\">', we miss you.'</span> </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;Pluto, we miss you.&apos; </span><br></pre></td></tr></table></figure>\n          </div>\n\n<div class=\"note warning\">\n            <p>문자열이 아닌 객체를 사용할 때는 <code>str()</code> 을 먼저 호출하여 문자열로 바꿔줘야 하는 점을 주의하셔야 합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">position = <span class=\"number\">9</span></span><br><span class=\"line\">planet + <span class=\"string\">\", you'll always be the \"</span> + position + <span class=\"string\">\"th planet to me.\"</span> </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">TypeError                                 Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-23</span><span class=\"number\">-73295</span>f9638cc&gt; <span class=\"keyword\">in</span> &lt;module&gt;()</span><br><span class=\"line\">      <span class=\"number\">1</span> position = <span class=\"number\">9</span></span><br><span class=\"line\">----&gt; 2 planet + \", you'll always be the \" + position + \"th planet to me.\"</span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: must be str, <span class=\"keyword\">not</span> int </span><br></pre></td></tr></table></figure>\n          </div>\n\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planet + <span class=\"string\">\", you'll always be the \"</span> + str(position) + <span class=\"string\">\"th planet to me.\"</span> </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Pluto, you&apos;ll always be the 9th planet to me.&quot; </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>가독성이 떨어지고 일일이 타입을 확인하며 바꿔줘야하는게 귀찮을 것 같습니다. <code>str.format()</code> 을 사용하면 이를 해결할 수 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"&#123;&#125;, you'll always be the &#123;&#125;th planet to me.\"</span>.format(planet, position) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Pluto, you&apos;ll always be the 9th planet to me.&quot; </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>훨씬 깔끔한 것 같습니다! “format string”에 <code>.format()</code> 을 호출하고, 우리가 삽입하고자 하는 파이썬 값은 <code>{}</code> 로 표현되는 placeholder에 들어갈 것 입니다.<br>우리가 int형인 <code>position</code> 을 변환하기 위해 <code>str()</code> 을 호출 할 필요가 없었던 점에 주목하십시오. <code>format()</code> 에서 이를 알아서 처리합니다.<br>이게 <code>format()</code> 이 하는 일의 전부라해도 우리는 이를 매우 유용하게 사용할 것 입니다. 하지만 알아갈 수록 이 함수로 할 수 있는게 훨씬 더 많다는 것을 깨닫게 될 것 입니다. 조금만 더 알아보겠습니다.</p>\n<div class=\"tabs\" id=\"example_format\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_format-1\"><i class=\"fa fa-eye\"></i>Example_1</a></li><li class=\"tab\"><a href=\"#example_format-2\"><i class=\"fa fa-eye\"></i>Example_2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_format-1\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">pluto_mass = <span class=\"number\">1.303</span> * <span class=\"number\">10</span>**<span class=\"number\">22</span></span><br><span class=\"line\">earth_mass = <span class=\"number\">5.9722</span> * <span class=\"number\">10</span>**<span class=\"number\">24</span></span><br><span class=\"line\">population = <span class=\"number\">52910390</span></span><br><span class=\"line\"><span class=\"comment\">#         2 decimal points   3 decimal points, format as percent     separate with commas</span></span><br><span class=\"line\"><span class=\"string\">\"&#123;&#125; weighs about &#123;:.2&#125; kilograms (&#123;:.3%&#125; of Earth's mass). It is home to &#123;:,&#125; Plutonians.\"</span>.format(</span><br><span class=\"line\">    planet, pluto_mass, pluto_mass / earth_mass, population,</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Pluto weighs about 1.3e+22 kilograms (0.218% of Earth&apos;s mass). It is home to 52,910,390 Plutonians.&quot; </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_format-2\"><div class=\"note no-icon\">\n            <p>문자열 리터럴에 유니코드 문자를 넣을 수 도 있습니다 :)</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Referring to format() arguments by index, starting from 0</span></span><br><span class=\"line\">s = <span class=\"string\">\"\"\"Pluto's a &#123;0&#125;.</span></span><br><span class=\"line\"><span class=\"string\">No, it's a &#123;1&#125;.</span></span><br><span class=\"line\"><span class=\"string\">&#123;0&#125;!</span></span><br><span class=\"line\"><span class=\"string\">&#123;1&#125;!\"\"\"</span>.format(<span class=\"string\">'planet'</span>, <span class=\"string\">'dwarf planet'</span>)</span><br><span class=\"line\">print(s) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Pluto&apos;s a planet.</span><br><span class=\"line\">No, it&apos;s a dwarf planet.</span><br><span class=\"line\">planet!</span><br><span class=\"line\">dwarf planet! </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<p>조금 과장하자면 <code>str.format</code> 에 대한 설명과 내용으로 짧은 책을 쓸 수도 있기 때문에 가볍게 알아보는 본 강의에서는 이쯤에서 멈추겠습니다.<br>더 자세히 알고 싶으신 분은 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9weWZvcm1hdC5pbmZvLw==\" title=\"https://pyformat.info/\">pyformat.info<i class=\"fa fa-external-link\"></i></span>와 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L3N0cmluZy5odG1sI2Zvcm1hdHN0cmluZ3M=\" title=\"https://docs.python.org/3/library/string.html#formatstrings\">the offical docs<i class=\"fa fa-external-link\"></i></span> 를 읽어 보시길 바랍니다.</p>\n<hr>\n<h1 id=\"딕셔너리-Dictionaries\"><a href=\"#딕셔너리-Dictionaries\" class=\"headerlink\" title=\"딕셔너리(Dictionaries)\"></a>딕셔너리(Dictionaries)</h1><hr>\n<p><br><br><br></p>\n<h1 id=\"연습문제-Your-Turn\"><a href=\"#연습문제-Your-Turn\" class=\"headerlink\" title=\"연습문제(Your Turn)\"></a>연습문제(Your Turn)</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE4NQ==\" title=\"https://www.kaggle.com/kernels/fork/1275185\">strings and dictionaries 예제<i class=\"fa fa-external-link\"></i></span></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>Kaggle 홈페이지 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbQ==\" title=\"https://www.kaggle.com\">Kaggle<i class=\"fa fa-external-link\"></i></span></li>\n<li>11강 ‘Strings and Dictionaries’ - <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9jb2xpbm1vcnJpcy9zdHJpbmdzLWFuZC1kaWN0aW9uYXJpZXM=\" title=\"https://www.kaggle.com/colinmorris/strings-and-dictionaries\">Python Micro-Course Home Page<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n<blockquote>\n<p>영어 실력이 부족하여 문맥이 이해가 가지 않는 부분은 원문을 참고하시길 바랍니다…<br>언젠가는 실력이 나아지기를…</p>\n</blockquote>\n<hr>\n<p>이번 강에서는 파이썬의 필수적인 타입인 <strong>strings</strong> 와 <strong>dictionaries</strong> 에 대해 알아보겠습니다.</p>\n<h1 id=\"문자열-Strings\"><a href=\"#문자열-Strings\" class=\"headerlink\" title=\"문자열(Strings)\"></a>문자열(Strings)</h1><p>파이썬의 장점이 빛나는 순간 중 하나는 문자열을 조작할 때 입니다. 이번 섹션에서 파이썬에 내장된 문자열 함수들과 포맷팅 작업들에 대해 알아보겠습니다.</p>\n<p>문자열 조작 패턴들은 데이터 사이언스(데이터 분석/마이닝) 작업할 때 자주 등장하는데, 이런 맥락에서 볼 때 문자열 조작은 파이썬의 큰 장점 중 하나라고 할 수 있습니다.</p>\n<h2 id=\"문자열-문법-String-syntax\"><a href=\"#문자열-문법-String-syntax\" class=\"headerlink\" title=\"문자열 문법(String syntax)\"></a>문자열 문법(String syntax)</h2><p>이전 수업들의 예제에서 많은 문자열들을 다루며 이미 아시겠지만, 간단히 요약하자면 파이썬의 문자열은 작은 따옴표나 큰 따옴표 중 하나를 사용하여 정의 할 수 있습니다. 둘은 기능적으로 동일합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"string\">'Pluto is a planet'</span></span><br><span class=\"line\">y = <span class=\"string\">\"Pluto is a planet\"</span></span><br><span class=\"line\">x == y  </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span>  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>문자열에 작은 따옴표가 들어가는 경우(e.g. apostrophe) 큰 따옴표를 사용하면 편리합니다.<br>마찬가지로 큰 따옴표가 포함된 문자열은 작은 따옴표로 묶으면 쉽게 만들 수 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"Pluto's a planet!\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">'My dog is named \"Pluto\"'</span>) </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">Pluto<span class=\"string\">'s a planet!</span></span><br><span class=\"line\"><span class=\"string\">My dog is named \"Pluto\" </span></span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>만약 작은 따옴표로 묶은 문자열에 작은 따옴표 문자를 넣으면 우리가 원하는 것과는 다르게 파이썬은 잘못 이해할 수 있습니다.</p>\n<div class=\"note warning\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Pluto'</span>s a planet!<span class=\"string\">' </span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">File <span class=\"string\">\"&lt;ipython-input-3-a43631749f52&gt;\"</span>, line <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"string\">'Pluto'</span>s a planet!<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">         ^</span></span><br><span class=\"line\"><span class=\"string\">SyntaxError: invalid syntax</span></span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>작은 따옴표 문자에 백슬래시로 “예외” 처리하여 이를 해결할 수는 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Pluto\\'s a planet!'</span> </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Pluto'</span>s a planet!<span class=\"string\">' </span></span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>아래의 표는 백슬래시 문자 사용법의 요약입니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">What you type…</th>\n<th align=\"left\">What you get</th>\n<th align=\"left\">example</th>\n<th align=\"left\"><code>print(example)</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>\\&#39;</code></td>\n<td align=\"left\"><code>&#39;</code></td>\n<td align=\"left\"><code>&#39;What\\&#39;s up?&#39;</code></td>\n<td align=\"left\"><code>What&#39;s up?</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\&quot;</code></td>\n<td align=\"left\"><code>&quot;</code></td>\n<td align=\"left\"><code>&quot;That&#39;s \\&quot;cool\\&quot;&quot;</code></td>\n<td align=\"left\"><code>That&#39;s &quot;cool&quot;</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\\\</code></td>\n<td align=\"left\"><code>\\</code></td>\n<td align=\"left\"><code>&quot;Look, a mountain: /\\\\&quot;</code></td>\n<td align=\"left\"><code>Look, a mountain: /\\</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\n</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>&quot;1\\n2 3&quot;</code></td>\n<td align=\"left\"><code>1</code><br> <code>2</code> <code>3</code></td>\n</tr>\n</tbody></table>\n<p>표 마지막의 <code>\\n</code> 은 개행 문자를 나타냅니다. 이를 통해 파이썬에서 줄 바꿈이 발생합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello = <span class=\"string\">\"hello\\nworld\"</span></span><br><span class=\"line\">print(hello) </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">world </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>또 다른 방법으로, 파이썬에서 문자열에 따옴표 세 개(triple quote syntax for strings)를 사용하면 입력하는 문자 그대로 개행 문자도 포함 할 수 있습니다.(즉, ‘\\n’ 시퀀스를 사용하지 않고 키보드에서 ‘Enter’키를 치는 것만으로 줄 바꿈이 일어납니다). 우리는 함수를 문서화하는 데 사용하는 docstrings 을 배우면서 이것을 한번 본적이 있는데 사실 문자열을 정의하고자 하는 곳이면 어디에서나 사용할 수 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">triplequoted_hello = <span class=\"string\">\"\"\"hello</span></span><br><span class=\"line\"><span class=\"string\">world\"\"\"</span></span><br><span class=\"line\">print(triplequoted_hello)</span><br><span class=\"line\">print(triplequoted_hello == hello) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\">True </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p><code>print()</code> 함수는 <code>end</code> 키워드 인자에 특별한 값을 지정하지 않는한 기본값으로 <code>&#39;\\n&#39;</code> 을 가지기 때문에 자동으로 개행 문자를 추가합니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"world\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"hello\"</span>, end=<span class=\"string\">''</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"pluto\"</span>, end=<span class=\"string\">''</span>) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\">hellopluto </span><br></pre></td></tr></table></figure>\n          </div>\n\n<h2 id=\"Strings-are-sequences\"><a href=\"#Strings-are-sequences\" class=\"headerlink\" title=\"Strings are sequences\"></a>Strings are sequences</h2><p>문자열(string)은 연속된 문자들(characters)로 생각할 수 있습니다. 우리가 list로 할 수 있는 거의 모든 것을 문자열에서도 할 수 있습니다.</p>\n<div class=\"tabs\" id=\"example_string\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_string-1\"><i class=\"fa fa-eye\"></i>Indexing</a></li><li class=\"tab\"><a href=\"#example_string-2\"><i class=\"fa fa-eye\"></i>Slicing</a></li><li class=\"tab\"><a href=\"#example_string-3\"><i class=\"fa fa-eye\"></i>Length</a></li><li class=\"tab\"><a href=\"#example_string-4\"><i class=\"fa fa-eye\"></i>Loop</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_string-1\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Indexing</span></span><br><span class=\"line\">planet = <span class=\"string\">'Pluto'</span></span><br><span class=\"line\">planet[<span class=\"number\">0</span>] </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;P&apos; </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string-2\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Slicing</span></span><br><span class=\"line\">planet[<span class=\"number\">-3</span>:] </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;uto&apos; </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string-3\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># How long is this string?</span></span><br><span class=\"line\">len(planet)  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">5 </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string-4\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Yes, we can even loop over them</span></span><br><span class=\"line\">[char+<span class=\"string\">'! '</span> <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> planet]  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;P! &apos;, &apos;l! &apos;, &apos;u! &apos;, &apos;t! &apos;, &apos;o! &apos;] </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<p>하지만 list와 가장 큰 차이점은 문자열은 불변(immutable)이라는 점입니다. 우리는 문자열을 수정할 수 없습니다.</p>\n<div class=\"note danger\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planet[<span class=\"number\">0</span>] = <span class=\"string\">'B'</span></span><br><span class=\"line\"><span class=\"comment\"># planet.append doesn't work either </span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">TypeError                                 Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-12</span><span class=\"number\">-6</span>ca42463b9f9&gt; <span class=\"keyword\">in</span> &lt;module&gt;()</span><br><span class=\"line\">----&gt; 1 planet[0] = 'B'</span><br><span class=\"line\">      <span class=\"number\">2</span> <span class=\"comment\"># planet.append doesn't work either</span></span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: <span class=\"string\">'str'</span> object does <span class=\"keyword\">not</span> support item assignment  </span><br></pre></td></tr></table></figure>\n          </div>\n\n<h2 id=\"문자열-메소드-String-methods\"><a href=\"#문자열-메소드-String-methods\" class=\"headerlink\" title=\"문자열 메소드(String methods)\"></a>문자열 메소드(String methods)</h2><p><code>list</code> 처럼, <code>str</code> 타입에는 매우 유용한 메소드들일 많이 있습니다. 몇 가지 예시를 보여드리겠습니다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">claim = <span class=\"string\">\"Pluto is a planet!\"</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"example_string_methods\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_string_methods-1\"><i class=\"fa fa-eye\"></i>UpperCase</a></li><li class=\"tab\"><a href=\"#example_string_methods-2\"><i class=\"fa fa-eye\"></i>LowerCase</a></li><li class=\"tab\"><a href=\"#example_string_methods-3\"><i class=\"fa fa-eye\"></i>Index</a></li><li class=\"tab\"><a href=\"#example_string_methods-4\"><i class=\"fa fa-eye\"></i>Startswith</a></li><li class=\"tab\"><a href=\"#example_string_methods-5\"><i class=\"fa fa-eye\"></i>Endswith</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_string_methods-1\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 모두 대문자</span></span><br><span class=\"line\">claim.upper() </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;PLUTO IS A PLANET!&apos; </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string_methods-2\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 모두 소문자</span></span><br><span class=\"line\">claim.lower() </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;pluto is a planet!&apos; </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string_methods-3\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># substring의 첫번째 인덱스 값</span></span><br><span class=\"line\">claim.index(<span class=\"string\">'plan'</span>) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">11 </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string_methods-4\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">claim.startswith(planet)  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">True </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_string_methods-5\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">claim.endswith(<span class=\"string\">'dwarf planet'</span>)  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">False </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<h3 id=\"Going-between-strings-and-lists-split-and-join\"><a href=\"#Going-between-strings-and-lists-split-and-join\" class=\"headerlink\" title=\"Going between strings and lists: .split() and .join()\"></a>Going between strings and lists: .split() and .join()</h3><p><code>str.split()</code> 은 하나의 문자열을 공백 문자를 기준으로 분리한 작은 문자들로 이루어진 list로 바꿔 줍니다. 이는 하나의 큰 문자열을 단어 하나하나로 나눈 list로 바꾸는데 매우 유용합니다.</p>\n<div class=\"tabs\" id=\"example_split\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_split-1\"><i class=\"fa fa-eye\"></i>Default</a></li><li class=\"tab\"><a href=\"#example_split-2\"><i class=\"fa fa-eye\"></i>Custom</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_split-1\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">words = claim.split()</span><br><span class=\"line\">words  </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;Pluto&apos;, &apos;is&apos;, &apos;a&apos;, &apos;planet!&apos;] </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_split-2\"><div class=\"note no-icon\">\n            <p>때로는 공백 이외의 다른 것을 기준으로 나눠야 할 때도 있습니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">datestr = <span class=\"string\">'1956-01-31'</span></span><br><span class=\"line\">year, month, day = datestr.split(<span class=\"string\">'-'</span>) </span><br></pre></td></tr></table></figure><p>year, month, day은 이제 각각 1956, 01, 31을 참조할 것입니다.</p>\n          </div></div></div></div>\n\n<p><code>str.join()</code> 은 반대의 기능을 한다고 보시면 됩니다, seperator(분리자)로 분리되었던 문자(열) list를 하나의 긴 문자열로 묶어줍니다.</p>\n<div class=\"tabs\" id=\"example_join\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_join-1\"><i class=\"fa fa-eye\"></i>Basic</a></li><li class=\"tab\"><a href=\"#example_join-2\"><i class=\"fa fa-eye\"></i>Unicode</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_join-1\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'/'</span>.join([month, day, year]) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;01/31/1956&apos; </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_join-2\"><div class=\"note no-icon\">\n            <p>문자열 리터럴에 유니코드 문자를 넣을 수 도 있습니다 :)</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">' 👏 '</span>.join([word.upper() <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words]) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;PLUTO 👏 IS 👏 A 👏 PLANET!&apos; </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n\n<h3 id=\"Building-strings-with-format\"><a href=\"#Building-strings-with-format\" class=\"headerlink\" title=\"Building strings with .format()\"></a>Building strings with .format()</h3><p>파이썬에서는 <code>+</code> 연산자를 사용해서 문자열을 합칠 수 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planet + <span class=\"string\">', we miss you.'</span> </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&apos;Pluto, we miss you.&apos; </span><br></pre></td></tr></table></figure>\n          </div>\n\n<div class=\"note warning\">\n            <p>문자열이 아닌 객체를 사용할 때는 <code>str()</code> 을 먼저 호출하여 문자열로 바꿔줘야 하는 점을 주의하셔야 합니다.</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">position = <span class=\"number\">9</span></span><br><span class=\"line\">planet + <span class=\"string\">\", you'll always be the \"</span> + position + <span class=\"string\">\"th planet to me.\"</span> </span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">TypeError                                 Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-23</span><span class=\"number\">-73295</span>f9638cc&gt; <span class=\"keyword\">in</span> &lt;module&gt;()</span><br><span class=\"line\">      <span class=\"number\">1</span> position = <span class=\"number\">9</span></span><br><span class=\"line\">----&gt; 2 planet + \", you'll always be the \" + position + \"th planet to me.\"</span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: must be str, <span class=\"keyword\">not</span> int </span><br></pre></td></tr></table></figure>\n          </div>\n\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">planet + <span class=\"string\">\", you'll always be the \"</span> + str(position) + <span class=\"string\">\"th planet to me.\"</span> </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Pluto, you&apos;ll always be the 9th planet to me.&quot; </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>가독성이 떨어지고 일일이 타입을 확인하며 바꿔줘야하는게 귀찮을 것 같습니다. <code>str.format()</code> 을 사용하면 이를 해결할 수 있습니다.</p>\n<div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"&#123;&#125;, you'll always be the &#123;&#125;th planet to me.\"</span>.format(planet, position) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Pluto, you&apos;ll always be the 9th planet to me.&quot; </span><br></pre></td></tr></table></figure>\n          </div>\n\n<p>훨씬 깔끔한 것 같습니다! “format string”에 <code>.format()</code> 을 호출하고, 우리가 삽입하고자 하는 파이썬 값은 <code>{}</code> 로 표현되는 placeholder에 들어갈 것 입니다.<br>우리가 int형인 <code>position</code> 을 변환하기 위해 <code>str()</code> 을 호출 할 필요가 없었던 점에 주목하십시오. <code>format()</code> 에서 이를 알아서 처리합니다.<br>이게 <code>format()</code> 이 하는 일의 전부라해도 우리는 이를 매우 유용하게 사용할 것 입니다. 하지만 알아갈 수록 이 함수로 할 수 있는게 훨씬 더 많다는 것을 깨닫게 될 것 입니다. 조금만 더 알아보겠습니다.</p>\n<div class=\"tabs\" id=\"example_format\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#example_format-1\"><i class=\"fa fa-eye\"></i>Example_1</a></li><li class=\"tab\"><a href=\"#example_format-2\"><i class=\"fa fa-eye\"></i>Example_2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"example_format-1\"><div class=\"note no-icon\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">pluto_mass = <span class=\"number\">1.303</span> * <span class=\"number\">10</span>**<span class=\"number\">22</span></span><br><span class=\"line\">earth_mass = <span class=\"number\">5.9722</span> * <span class=\"number\">10</span>**<span class=\"number\">24</span></span><br><span class=\"line\">population = <span class=\"number\">52910390</span></span><br><span class=\"line\"><span class=\"comment\">#         2 decimal points   3 decimal points, format as percent     separate with commas</span></span><br><span class=\"line\"><span class=\"string\">\"&#123;&#125; weighs about &#123;:.2&#125; kilograms (&#123;:.3%&#125; of Earth's mass). It is home to &#123;:,&#125; Plutonians.\"</span>.format(</span><br><span class=\"line\">    planet, pluto_mass, pluto_mass / earth_mass, population,</span><br><span class=\"line\">) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Pluto weighs about 1.3e+22 kilograms (0.218% of Earth&apos;s mass). It is home to 52,910,390 Plutonians.&quot; </span><br></pre></td></tr></table></figure>\n          </div></div><div class=\"tab-pane\" id=\"example_format-2\"><div class=\"note no-icon\">\n            <p>문자열 리터럴에 유니코드 문자를 넣을 수 도 있습니다 :)</p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Referring to format() arguments by index, starting from 0</span></span><br><span class=\"line\">s = <span class=\"string\">\"\"\"Pluto's a &#123;0&#125;.</span></span><br><span class=\"line\"><span class=\"string\">No, it's a &#123;1&#125;.</span></span><br><span class=\"line\"><span class=\"string\">&#123;0&#125;!</span></span><br><span class=\"line\"><span class=\"string\">&#123;1&#125;!\"\"\"</span>.format(<span class=\"string\">'planet'</span>, <span class=\"string\">'dwarf planet'</span>)</span><br><span class=\"line\">print(s) </span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Pluto&apos;s a planet.</span><br><span class=\"line\">No, it&apos;s a dwarf planet.</span><br><span class=\"line\">planet!</span><br><span class=\"line\">dwarf planet! </span><br></pre></td></tr></table></figure>\n          </div></div></div></div>\n\n<p>조금 과장하자면 <code>str.format</code> 에 대한 설명과 내용으로 짧은 책을 쓸 수도 있기 때문에 가볍게 알아보는 본 강의에서는 이쯤에서 멈추겠습니다.<br>더 자세히 알고 싶으신 분은 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9weWZvcm1hdC5pbmZvLw==\" title=\"https://pyformat.info/\">pyformat.info<i class=\"fa fa-external-link\"></i></span>와 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L3N0cmluZy5odG1sI2Zvcm1hdHN0cmluZ3M=\" title=\"https://docs.python.org/3/library/string.html#formatstrings\">the offical docs<i class=\"fa fa-external-link\"></i></span> 를 읽어 보시길 바랍니다.</p>\n<hr>\n<h1 id=\"딕셔너리-Dictionaries\"><a href=\"#딕셔너리-Dictionaries\" class=\"headerlink\" title=\"딕셔너리(Dictionaries)\"></a>딕셔너리(Dictionaries)</h1><hr>\n<p><br><br><br></p>\n<h1 id=\"연습문제-Your-Turn\"><a href=\"#연습문제-Your-Turn\" class=\"headerlink\" title=\"연습문제(Your Turn)\"></a>연습문제(Your Turn)</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9rZXJuZWxzL2ZvcmsvMTI3NTE4NQ==\" title=\"https://www.kaggle.com/kernels/fork/1275185\">strings and dictionaries 예제<i class=\"fa fa-external-link\"></i></span></p>\n"},{"title":"(SW Expert Academy) 흐름과 제어 If - 6222번 6226번 6227번","date":"2019-07-28T12:51:04.000Z","subtitle":"파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법","_content":"\n# 5번 - 6222번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> ASCII 코드 값은 ord()함수 사용\n> 대소문자 변환은 32를 더하고 빼도 되고\n> 내장함수 lower(), upper()를 사용해도 좋음\n\n{% note success %}\n{% code lang:python %}\nx = input()\n\nif(ord(x)>96 and ord(x)<123):   # 소문자\n    print(\"{0}(ASCII: {1}) => {2}(ASCII: {3})\".format(x, ord(x), chr(ord(x)-32), ord(x)-32))\nelif(ord(x)>64 and ord(x)<91):  # 대문자\n    print(\"{}(ASCII: {}) => {}(ASCII: {})\".format(x, ord(x), x.lower(), ord(x.lower())))\nelse:\n    print(x)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 7번 - 6226번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 연습문제 6은 없는 것 같다... 바로 7로 넘어감\n> 처음에 if문 안에서 바로 print 하려다가 맨 마지막 ',' 쉼표 처리하는게 까다로워서 그냥 string 객체에 추가해서 출력하는 식으로 해결하였다\n\n{% note success %}\n{% code lang:python %}\nans = ''\n\nfor i in range(1, 200):\n    if(i%7==0 and i%5!=0):\n        ans += str(i) + \",\"\nprint(ans[:-1])\n{% endcode %}\n{% endnote %}\n\n\n-----\n\n# 8번 - 6227번\n\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 이게 될까? 싶은게 된다\n> 각 자리수를 string형의 index로 구분하고 int형으로 다시 바꿔서 조건식을 만듬\n\n{% note success %}\n{% code lang:python %}\nans = ''\n\nfor i in range(100, 300):\n    if(int(str(i)[0])%2==0 and int(str(i)[1])%2==0 and int(str(i)[2])%2==0):\n        ans += str(i) + \",\"\nprint(ans[:-1])\n{% endcode %}\n{% endnote %}\n","source":"_posts/20190728-sw-6222.md","raw":"---\ntitle: (SW Expert Academy) 흐름과 제어 If - 6222번 6226번 6227번\ndate: 2019-07-28 21:51:04\ncategories: SW 아카데미\ntags: [삼성, 파이썬 ,SW Academy, python]\nsubtitle: 파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법\n---\n\n# 5번 - 6222번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> ASCII 코드 값은 ord()함수 사용\n> 대소문자 변환은 32를 더하고 빼도 되고\n> 내장함수 lower(), upper()를 사용해도 좋음\n\n{% note success %}\n{% code lang:python %}\nx = input()\n\nif(ord(x)>96 and ord(x)<123):   # 소문자\n    print(\"{0}(ASCII: {1}) => {2}(ASCII: {3})\".format(x, ord(x), chr(ord(x)-32), ord(x)-32))\nelif(ord(x)>64 and ord(x)<91):  # 대문자\n    print(\"{}(ASCII: {}) => {}(ASCII: {})\".format(x, ord(x), x.lower(), ord(x.lower())))\nelse:\n    print(x)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 7번 - 6226번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 연습문제 6은 없는 것 같다... 바로 7로 넘어감\n> 처음에 if문 안에서 바로 print 하려다가 맨 마지막 ',' 쉼표 처리하는게 까다로워서 그냥 string 객체에 추가해서 출력하는 식으로 해결하였다\n\n{% note success %}\n{% code lang:python %}\nans = ''\n\nfor i in range(1, 200):\n    if(i%7==0 and i%5!=0):\n        ans += str(i) + \",\"\nprint(ans[:-1])\n{% endcode %}\n{% endnote %}\n\n\n-----\n\n# 8번 - 6227번\n\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 이게 될까? 싶은게 된다\n> 각 자리수를 string형의 index로 구분하고 int형으로 다시 바꿔서 조건식을 만듬\n\n{% note success %}\n{% code lang:python %}\nans = ''\n\nfor i in range(100, 300):\n    if(int(str(i)[0])%2==0 and int(str(i)[1])%2==0 and int(str(i)[2])%2==0):\n        ans += str(i) + \",\"\nprint(ans[:-1])\n{% endcode %}\n{% endnote %}\n","slug":"sw-6222","published":1,"updated":"2019-07-29T06:43:33.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt87y00362646x8z6ktl1","content":"<h1 id=\"5번-6222번\"><a href=\"#5번-6222번\" class=\"headerlink\" title=\"5번 - 6222번\"></a>5번 - 6222번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>ASCII 코드 값은 ord()함수 사용<br>대소문자 변환은 32를 더하고 빼도 되고<br>내장함수 lower(), upper()를 사용해도 좋음</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = input()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(ord(x)&gt;<span class=\"number\">96</span> <span class=\"keyword\">and</span> ord(x)&lt;<span class=\"number\">123</span>):   <span class=\"comment\"># 소문자</span></span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;0&#125;(ASCII: &#123;1&#125;) =&gt; &#123;2&#125;(ASCII: &#123;3&#125;)\"</span>.format(x, ord(x), chr(ord(x)<span class=\"number\">-32</span>), ord(x)<span class=\"number\">-32</span>))</span><br><span class=\"line\"><span class=\"keyword\">elif</span>(ord(x)&gt;<span class=\"number\">64</span> <span class=\"keyword\">and</span> ord(x)&lt;<span class=\"number\">91</span>):  <span class=\"comment\"># 대문자</span></span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125;(ASCII: &#123;&#125;) =&gt; &#123;&#125;(ASCII: &#123;&#125;)\"</span>.format(x, ord(x), x.lower(), ord(x.lower())))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(x)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"7번-6226번\"><a href=\"#7번-6226번\" class=\"headerlink\" title=\"7번 - 6226번\"></a>7번 - 6226번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>연습문제 6은 없는 것 같다… 바로 7로 넘어감<br>처음에 if문 안에서 바로 print 하려다가 맨 마지막 ‘,’ 쉼표 처리하는게 까다로워서 그냥 string 객체에 추가해서 출력하는 식으로 해결하였다</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ans = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">200</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i%<span class=\"number\">7</span>==<span class=\"number\">0</span> <span class=\"keyword\">and</span> i%<span class=\"number\">5</span>!=<span class=\"number\">0</span>):</span><br><span class=\"line\">        ans += str(i) + <span class=\"string\">\",\"</span></span><br><span class=\"line\">print(ans[:<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n          </div>\n\n\n<hr>\n<h1 id=\"8번-6227번\"><a href=\"#8번-6227번\" class=\"headerlink\" title=\"8번 - 6227번\"></a>8번 - 6227번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>이게 될까? 싶은게 된다<br>각 자리수를 string형의 index로 구분하고 int형으로 다시 바꿔서 조건식을 만듬</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ans = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>, <span class=\"number\">300</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(int(str(i)[<span class=\"number\">0</span>])%<span class=\"number\">2</span>==<span class=\"number\">0</span> <span class=\"keyword\">and</span> int(str(i)[<span class=\"number\">1</span>])%<span class=\"number\">2</span>==<span class=\"number\">0</span> <span class=\"keyword\">and</span> int(str(i)[<span class=\"number\">2</span>])%<span class=\"number\">2</span>==<span class=\"number\">0</span>):</span><br><span class=\"line\">        ans += str(i) + <span class=\"string\">\",\"</span></span><br><span class=\"line\">print(ans[:<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n          </div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"5번-6222번\"><a href=\"#5번-6222번\" class=\"headerlink\" title=\"5번 - 6222번\"></a>5번 - 6222번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>ASCII 코드 값은 ord()함수 사용<br>대소문자 변환은 32를 더하고 빼도 되고<br>내장함수 lower(), upper()를 사용해도 좋음</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = input()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(ord(x)&gt;<span class=\"number\">96</span> <span class=\"keyword\">and</span> ord(x)&lt;<span class=\"number\">123</span>):   <span class=\"comment\"># 소문자</span></span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;0&#125;(ASCII: &#123;1&#125;) =&gt; &#123;2&#125;(ASCII: &#123;3&#125;)\"</span>.format(x, ord(x), chr(ord(x)<span class=\"number\">-32</span>), ord(x)<span class=\"number\">-32</span>))</span><br><span class=\"line\"><span class=\"keyword\">elif</span>(ord(x)&gt;<span class=\"number\">64</span> <span class=\"keyword\">and</span> ord(x)&lt;<span class=\"number\">91</span>):  <span class=\"comment\"># 대문자</span></span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125;(ASCII: &#123;&#125;) =&gt; &#123;&#125;(ASCII: &#123;&#125;)\"</span>.format(x, ord(x), x.lower(), ord(x.lower())))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(x)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"7번-6226번\"><a href=\"#7번-6226번\" class=\"headerlink\" title=\"7번 - 6226번\"></a>7번 - 6226번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>연습문제 6은 없는 것 같다… 바로 7로 넘어감<br>처음에 if문 안에서 바로 print 하려다가 맨 마지막 ‘,’ 쉼표 처리하는게 까다로워서 그냥 string 객체에 추가해서 출력하는 식으로 해결하였다</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ans = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">200</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i%<span class=\"number\">7</span>==<span class=\"number\">0</span> <span class=\"keyword\">and</span> i%<span class=\"number\">5</span>!=<span class=\"number\">0</span>):</span><br><span class=\"line\">        ans += str(i) + <span class=\"string\">\",\"</span></span><br><span class=\"line\">print(ans[:<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n          </div>\n\n\n<hr>\n<h1 id=\"8번-6227번\"><a href=\"#8번-6227번\" class=\"headerlink\" title=\"8번 - 6227번\"></a>8번 - 6227번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>이게 될까? 싶은게 된다<br>각 자리수를 string형의 index로 구분하고 int형으로 다시 바꿔서 조건식을 만듬</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ans = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>, <span class=\"number\">300</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(int(str(i)[<span class=\"number\">0</span>])%<span class=\"number\">2</span>==<span class=\"number\">0</span> <span class=\"keyword\">and</span> int(str(i)[<span class=\"number\">1</span>])%<span class=\"number\">2</span>==<span class=\"number\">0</span> <span class=\"keyword\">and</span> int(str(i)[<span class=\"number\">2</span>])%<span class=\"number\">2</span>==<span class=\"number\">0</span>):</span><br><span class=\"line\">        ans += str(i) + <span class=\"string\">\",\"</span></span><br><span class=\"line\">print(ans[:<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n          </div>\n"},{"title":"(SW Expert Academy) 흐름과 제어 반복 - 6242번 6244번 6246번 6247번","date":"2019-07-28T14:19:24.000Z","subtitle":"파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법","_content":"\n# 6번 - 6242번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> \"\".format() 형식 말고 \"\" % () 형식도 익숙해져야겠다\n> \"\".format() 으로 출력했을 때 KeyError \"'A'\" 오류 발생\n\n{% note success %}\n{% code lang:python %}\nstudent = ['A', 'A', 'A', 'O', 'B', 'B', 'O', 'AB', 'AB', 'O']\na, b, o, ab = 0, 0, 0, 0\nfor blood in student:\n    if(blood=='A'):\n        a+=1\n    if(blood=='B'):\n        b+=1\n    if(blood=='O'):\n        o+=1\n    if(blood=='AB'):\n        ab+=1\n\nprint(\"{'A': %d, 'O': %d, 'B': %d, 'AB': %d}\" % (a, o, b, ab))\n\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 7번 - 6244번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> list 내장함수... 앞선 강의 내용에 없었던 것 같은데\n\n{% note success %}\n{% code lang:python %}\nscore = [85, 65, 77, 83, 75, 22, 98, 88, 38, 100]\n\nsum=0\nwhile(score):\n    x = score.pop()\n    if(x>=80):\n        sum += x\n\nprint(sum)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 8번 - 6246번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 난의도가 너무 들쭉날쭉인거 같다\n\n{% note success %}\n{% code lang:python %}\ni=5\nwhile(i):\n    print(\"*\" * i)\n    i-=1\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 9번 - 6247번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 난의도가 너무 들쭉날쭉인거 같다\n\n{% note success %}\n{% code lang:python %}\ni, a, b = 4, 7, 0\n\nwhile(i):\n    print(\"{}{}{}\".format(\" \"*b, \"*\"*a, \" \"*b))\n    a-=2; b+=1\n    i-=1\n{% endcode %}\n{% endnote %}\n","source":"_posts/20190728-sw-6242.md","raw":"---\ntitle: (SW Expert Academy) 흐름과 제어 반복 - 6242번 6244번 6246번 6247번\ndate: 2019-07-28 23:19:24\ncategories: SW 아카데미\ntags: [삼성, 파이썬 ,SW Academy, python]\nsubtitle: 파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법\n---\n\n# 6번 - 6242번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> \"\".format() 형식 말고 \"\" % () 형식도 익숙해져야겠다\n> \"\".format() 으로 출력했을 때 KeyError \"'A'\" 오류 발생\n\n{% note success %}\n{% code lang:python %}\nstudent = ['A', 'A', 'A', 'O', 'B', 'B', 'O', 'AB', 'AB', 'O']\na, b, o, ab = 0, 0, 0, 0\nfor blood in student:\n    if(blood=='A'):\n        a+=1\n    if(blood=='B'):\n        b+=1\n    if(blood=='O'):\n        o+=1\n    if(blood=='AB'):\n        ab+=1\n\nprint(\"{'A': %d, 'O': %d, 'B': %d, 'AB': %d}\" % (a, o, b, ab))\n\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 7번 - 6244번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> list 내장함수... 앞선 강의 내용에 없었던 것 같은데\n\n{% note success %}\n{% code lang:python %}\nscore = [85, 65, 77, 83, 75, 22, 98, 88, 38, 100]\n\nsum=0\nwhile(score):\n    x = score.pop()\n    if(x>=80):\n        sum += x\n\nprint(sum)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 8번 - 6246번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 난의도가 너무 들쭉날쭉인거 같다\n\n{% note success %}\n{% code lang:python %}\ni=5\nwhile(i):\n    print(\"*\" * i)\n    i-=1\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 9번 - 6247번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 난의도가 너무 들쭉날쭉인거 같다\n\n{% note success %}\n{% code lang:python %}\ni, a, b = 4, 7, 0\n\nwhile(i):\n    print(\"{}{}{}\".format(\" \"*b, \"*\"*a, \" \"*b))\n    a-=2; b+=1\n    i-=1\n{% endcode %}\n{% endnote %}\n","slug":"sw-6242","published":1,"updated":"2019-07-28T16:20:12.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt883003b2646t0myr7wf","content":"<h1 id=\"6번-6242번\"><a href=\"#6번-6242번\" class=\"headerlink\" title=\"6번 - 6242번\"></a>6번 - 6242번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>“”.format() 형식 말고 “” % () 형식도 익숙해져야겠다<br>“”.format() 으로 출력했을 때 KeyError “‘A’” 오류 발생</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">student = [<span class=\"string\">'A'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'O'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'O'</span>, <span class=\"string\">'AB'</span>, <span class=\"string\">'AB'</span>, <span class=\"string\">'O'</span>]</span><br><span class=\"line\">a, b, o, ab = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> blood <span class=\"keyword\">in</span> student:</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(blood==<span class=\"string\">'A'</span>):</span><br><span class=\"line\">        a+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(blood==<span class=\"string\">'B'</span>):</span><br><span class=\"line\">        b+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(blood==<span class=\"string\">'O'</span>):</span><br><span class=\"line\">        o+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(blood==<span class=\"string\">'AB'</span>):</span><br><span class=\"line\">        ab+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;'A': %d, 'O': %d, 'B': %d, 'AB': %d&#125;\"</span> % (a, o, b, ab))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"7번-6244번\"><a href=\"#7번-6244번\" class=\"headerlink\" title=\"7번 - 6244번\"></a>7번 - 6244번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>list 내장함수… 앞선 강의 내용에 없었던 것 같은데</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">score = [<span class=\"number\">85</span>, <span class=\"number\">65</span>, <span class=\"number\">77</span>, <span class=\"number\">83</span>, <span class=\"number\">75</span>, <span class=\"number\">22</span>, <span class=\"number\">98</span>, <span class=\"number\">88</span>, <span class=\"number\">38</span>, <span class=\"number\">100</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">sum=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(score):</span><br><span class=\"line\">    x = score.pop()</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">80</span>):</span><br><span class=\"line\">        sum += x</span><br><span class=\"line\"></span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"8번-6246번\"><a href=\"#8번-6246번\" class=\"headerlink\" title=\"8번 - 6246번\"></a>8번 - 6246번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>난의도가 너무 들쭉날쭉인거 같다</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">i=<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(i):</span><br><span class=\"line\">    print(<span class=\"string\">\"*\"</span> * i)</span><br><span class=\"line\">    i-=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"9번-6247번\"><a href=\"#9번-6247번\" class=\"headerlink\" title=\"9번 - 6247번\"></a>9번 - 6247번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>난의도가 너무 들쭉날쭉인거 같다</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">i, a, b = <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(i):</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125;&#123;&#125;&#123;&#125;\"</span>.format(<span class=\"string\">\" \"</span>*b, <span class=\"string\">\"*\"</span>*a, <span class=\"string\">\" \"</span>*b))</span><br><span class=\"line\">    a-=<span class=\"number\">2</span>; b+=<span class=\"number\">1</span></span><br><span class=\"line\">    i-=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n          </div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"6번-6242번\"><a href=\"#6번-6242번\" class=\"headerlink\" title=\"6번 - 6242번\"></a>6번 - 6242번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>“”.format() 형식 말고 “” % () 형식도 익숙해져야겠다<br>“”.format() 으로 출력했을 때 KeyError “‘A’” 오류 발생</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">student = [<span class=\"string\">'A'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'O'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'O'</span>, <span class=\"string\">'AB'</span>, <span class=\"string\">'AB'</span>, <span class=\"string\">'O'</span>]</span><br><span class=\"line\">a, b, o, ab = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> blood <span class=\"keyword\">in</span> student:</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(blood==<span class=\"string\">'A'</span>):</span><br><span class=\"line\">        a+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(blood==<span class=\"string\">'B'</span>):</span><br><span class=\"line\">        b+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(blood==<span class=\"string\">'O'</span>):</span><br><span class=\"line\">        o+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(blood==<span class=\"string\">'AB'</span>):</span><br><span class=\"line\">        ab+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;'A': %d, 'O': %d, 'B': %d, 'AB': %d&#125;\"</span> % (a, o, b, ab))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"7번-6244번\"><a href=\"#7번-6244번\" class=\"headerlink\" title=\"7번 - 6244번\"></a>7번 - 6244번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>list 내장함수… 앞선 강의 내용에 없었던 것 같은데</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">score = [<span class=\"number\">85</span>, <span class=\"number\">65</span>, <span class=\"number\">77</span>, <span class=\"number\">83</span>, <span class=\"number\">75</span>, <span class=\"number\">22</span>, <span class=\"number\">98</span>, <span class=\"number\">88</span>, <span class=\"number\">38</span>, <span class=\"number\">100</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">sum=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(score):</span><br><span class=\"line\">    x = score.pop()</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">80</span>):</span><br><span class=\"line\">        sum += x</span><br><span class=\"line\"></span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"8번-6246번\"><a href=\"#8번-6246번\" class=\"headerlink\" title=\"8번 - 6246번\"></a>8번 - 6246번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>난의도가 너무 들쭉날쭉인거 같다</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">i=<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(i):</span><br><span class=\"line\">    print(<span class=\"string\">\"*\"</span> * i)</span><br><span class=\"line\">    i-=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"9번-6247번\"><a href=\"#9번-6247번\" class=\"headerlink\" title=\"9번 - 6247번\"></a>9번 - 6247번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>난의도가 너무 들쭉날쭉인거 같다</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">i, a, b = <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(i):</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125;&#123;&#125;&#123;&#125;\"</span>.format(<span class=\"string\">\" \"</span>*b, <span class=\"string\">\"*\"</span>*a, <span class=\"string\">\" \"</span>*b))</span><br><span class=\"line\">    a-=<span class=\"number\">2</span>; b+=<span class=\"number\">1</span></span><br><span class=\"line\">    i-=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n          </div>\n"},{"title":"(SW Expert Academy) 흐름과 제어 반복 - 6249번 6251번 6253번","date":"2019-07-28T14:54:52.000Z","subtitle":"파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법","_content":"\n# 10번 - 6249번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 솔직히 출력값에 띄여쓰기 한칸 차이난다고 오답처리 하는건 좀...\n\n{% note success %}\n{% code lang:python %}\nnum = input()\nnum_list = [0] * 10\n\n# 또는  num_list = [0 for i in range(10)]\n\nfor n in str(num):\n    num_list[int(n)]+=1\n\nfor i in range(10):\n    print(i, end=' ')\nprint()\nans=''\nfor i in range(10):\n    ans += str(num_list[i]) + \" \"\n\nprint(ans[:-1])\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 11번 - 6251번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 반복\n\n{% note success %}\n{% code lang:python %}\nfor i in range(5):\n    print(\"{}{}\".format(\" \"*(4-i), \"*\"*(i+1)))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 13번 - 6253번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 12번 문제 없음\n> 내장함수를 쓰면 2줄만에 끝남 (주석 부분)\n> 굳이 직접 연산하면 아래와 같음 (파이썬은 동적으로 타입을 정하기 때문에 몫을 구할 때 '//' 연산자를 사용해야함. '/' 사용시 실수형으로 바뀜)\n\n{% note success %}\n{% code lang:python %}\n# x = bin(int(input()))\n#\n# print(x[2:])\n\nx = int(input())\n\nbinary=''\n\nprint(x)\n\nwhile True:\n    if(x==1):\n        binary += '1'\n        break;\n    binary += str(x%2)\n    x //= 2\n    print(x)\n\nprint(x)\nprint(binary[::-1])\n\n{% endcode %}\n{% endnote %}\n","source":"_posts/20190728-sw-6249.md","raw":"---\ntitle: (SW Expert Academy) 흐름과 제어 반복 - 6249번 6251번 6253번\ndate: 2019-07-28 23:54:52\ncategories: SW 아카데미\ntags: [삼성, 파이썬 ,SW Academy, python]\nsubtitle: 파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법\n---\n\n# 10번 - 6249번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 솔직히 출력값에 띄여쓰기 한칸 차이난다고 오답처리 하는건 좀...\n\n{% note success %}\n{% code lang:python %}\nnum = input()\nnum_list = [0] * 10\n\n# 또는  num_list = [0 for i in range(10)]\n\nfor n in str(num):\n    num_list[int(n)]+=1\n\nfor i in range(10):\n    print(i, end=' ')\nprint()\nans=''\nfor i in range(10):\n    ans += str(num_list[i]) + \" \"\n\nprint(ans[:-1])\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 11번 - 6251번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 반복\n\n{% note success %}\n{% code lang:python %}\nfor i in range(5):\n    print(\"{}{}\".format(\" \"*(4-i), \"*\"*(i+1)))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 13번 - 6253번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 12번 문제 없음\n> 내장함수를 쓰면 2줄만에 끝남 (주석 부분)\n> 굳이 직접 연산하면 아래와 같음 (파이썬은 동적으로 타입을 정하기 때문에 몫을 구할 때 '//' 연산자를 사용해야함. '/' 사용시 실수형으로 바뀜)\n\n{% note success %}\n{% code lang:python %}\n# x = bin(int(input()))\n#\n# print(x[2:])\n\nx = int(input())\n\nbinary=''\n\nprint(x)\n\nwhile True:\n    if(x==1):\n        binary += '1'\n        break;\n    binary += str(x%2)\n    x //= 2\n    print(x)\n\nprint(x)\nprint(binary[::-1])\n\n{% endcode %}\n{% endnote %}\n","slug":"sw-6249","published":1,"updated":"2019-07-28T16:20:22.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt885003d2646j3l90k0p","content":"<h1 id=\"10번-6249번\"><a href=\"#10번-6249번\" class=\"headerlink\" title=\"10번 - 6249번\"></a>10번 - 6249번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>솔직히 출력값에 띄여쓰기 한칸 차이난다고 오답처리 하는건 좀…</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">num = input()</span><br><span class=\"line\">num_list = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 또는  num_list = [0 for i in range(10)]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> str(num):</span><br><span class=\"line\">    num_list[int(n)]+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    print(i, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">print()</span><br><span class=\"line\">ans=<span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    ans += str(num_list[i]) + <span class=\"string\">\" \"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(ans[:<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"11번-6251번\"><a href=\"#11번-6251번\" class=\"headerlink\" title=\"11번 - 6251번\"></a>11번 - 6251번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>반복</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125;&#123;&#125;\"</span>.format(<span class=\"string\">\" \"</span>*(<span class=\"number\">4</span>-i), <span class=\"string\">\"*\"</span>*(i+<span class=\"number\">1</span>)))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"13번-6253번\"><a href=\"#13번-6253번\" class=\"headerlink\" title=\"13번 - 6253번\"></a>13번 - 6253번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>12번 문제 없음<br>내장함수를 쓰면 2줄만에 끝남 (주석 부분)<br>굳이 직접 연산하면 아래와 같음 (파이썬은 동적으로 타입을 정하기 때문에 몫을 구할 때 ‘//‘ 연산자를 사용해야함. ‘/‘ 사용시 실수형으로 바뀜)</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># x = bin(int(input()))</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># print(x[2:])</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = int(input())</span><br><span class=\"line\"></span><br><span class=\"line\">binary=<span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>):</span><br><span class=\"line\">        binary += <span class=\"string\">'1'</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    binary += str(x%<span class=\"number\">2</span>)</span><br><span class=\"line\">    x //= <span class=\"number\">2</span></span><br><span class=\"line\">    print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">print(x)</span><br><span class=\"line\">print(binary[::<span class=\"number\">-1</span>])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n          </div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"10번-6249번\"><a href=\"#10번-6249번\" class=\"headerlink\" title=\"10번 - 6249번\"></a>10번 - 6249번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>솔직히 출력값에 띄여쓰기 한칸 차이난다고 오답처리 하는건 좀…</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">num = input()</span><br><span class=\"line\">num_list = [<span class=\"number\">0</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 또는  num_list = [0 for i in range(10)]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> str(num):</span><br><span class=\"line\">    num_list[int(n)]+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    print(i, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">print()</span><br><span class=\"line\">ans=<span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    ans += str(num_list[i]) + <span class=\"string\">\" \"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(ans[:<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"11번-6251번\"><a href=\"#11번-6251번\" class=\"headerlink\" title=\"11번 - 6251번\"></a>11번 - 6251번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>반복</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125;&#123;&#125;\"</span>.format(<span class=\"string\">\" \"</span>*(<span class=\"number\">4</span>-i), <span class=\"string\">\"*\"</span>*(i+<span class=\"number\">1</span>)))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"13번-6253번\"><a href=\"#13번-6253번\" class=\"headerlink\" title=\"13번 - 6253번\"></a>13번 - 6253번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>12번 문제 없음<br>내장함수를 쓰면 2줄만에 끝남 (주석 부분)<br>굳이 직접 연산하면 아래와 같음 (파이썬은 동적으로 타입을 정하기 때문에 몫을 구할 때 ‘//‘ 연산자를 사용해야함. ‘/‘ 사용시 실수형으로 바뀜)</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># x = bin(int(input()))</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># print(x[2:])</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = int(input())</span><br><span class=\"line\"></span><br><span class=\"line\">binary=<span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>):</span><br><span class=\"line\">        binary += <span class=\"string\">'1'</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    binary += str(x%<span class=\"number\">2</span>)</span><br><span class=\"line\">    x //= <span class=\"number\">2</span></span><br><span class=\"line\">    print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">print(x)</span><br><span class=\"line\">print(binary[::<span class=\"number\">-1</span>])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n          </div>\n"},{"title":"(SW Expert Academy) 흐름과 제어 반복 - 6230번 6231번 6234번 6238번 6240번","date":"2019-07-28T14:06:26.000Z","subtitle":"파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법","_content":"\n# 1번 - 6230번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 웹페이지에 입력값이 없어서 제대로 채점이 이루어지는 것 같지가 않다..\n> 아마 이렇게 작성하면 되지 않을까?\n\n{% note success %}\n{% code lang:python %}\nfor i in range(5):\n    score = int(input())\n    if(score<60):\n        print(\"{}번 학생은 {}점으로 불합격입니다.\".format(i+1, score))\n    else:\n        print(\"{}번 학생은 {}점으로 합격입니다.\".format(i+1, score))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 2번 - 6231번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n{% note success %}\n{% code lang:python %}\nfor i in range(1, 101):\n    print(i)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 3번 - 6234번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 이것도 입력값이 없지만... 채점은 됨?\n\n{% note success %}\n{% code lang:python %}\nfor i in range(1, 101):\n    if(i%2==0):\n        print(\"{} \".format(i), end='')\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 4번 - 6238번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 조건문 없이 2칸씩 뛰는 방식으로 홀수 출력\n\n{% note success %}\n{% code lang:python %}\nans=''\n\nfor i in range(1, 101, 2):\n        ans += str(i) +\", \"\n\nprint(ans[:-2])\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 5번 - 6240번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n{% note success %}\n{% code lang:python %}\nsum=0\n\nfor i in range(1, 101):\n    if(i%3==0):\n        sum += i\n\nprint(\"1부터 100사이의 숫자 중 3의 배수의 총합: {}\".format(sum))\n{% endcode %}\n{% endnote %}\n","source":"_posts/20190728-sw-6230.md","raw":"---\ntitle: (SW Expert Academy) 흐름과 제어 반복 - 6230번 6231번 6234번 6238번 6240번\ndate: 2019-07-28 23:06:26\ncategories: SW 아카데미\ntags: [삼성, 파이썬 ,SW Academy, python]\nsubtitle: 파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법\n---\n\n# 1번 - 6230번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 웹페이지에 입력값이 없어서 제대로 채점이 이루어지는 것 같지가 않다..\n> 아마 이렇게 작성하면 되지 않을까?\n\n{% note success %}\n{% code lang:python %}\nfor i in range(5):\n    score = int(input())\n    if(score<60):\n        print(\"{}번 학생은 {}점으로 불합격입니다.\".format(i+1, score))\n    else:\n        print(\"{}번 학생은 {}점으로 합격입니다.\".format(i+1, score))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 2번 - 6231번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n{% note success %}\n{% code lang:python %}\nfor i in range(1, 101):\n    print(i)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 3번 - 6234번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 이것도 입력값이 없지만... 채점은 됨?\n\n{% note success %}\n{% code lang:python %}\nfor i in range(1, 101):\n    if(i%2==0):\n        print(\"{} \".format(i), end='')\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 4번 - 6238번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 조건문 없이 2칸씩 뛰는 방식으로 홀수 출력\n\n{% note success %}\n{% code lang:python %}\nans=''\n\nfor i in range(1, 101, 2):\n        ans += str(i) +\", \"\n\nprint(ans[:-2])\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 5번 - 6240번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n{% note success %}\n{% code lang:python %}\nsum=0\n\nfor i in range(1, 101):\n    if(i%3==0):\n        sum += i\n\nprint(\"1부터 100사이의 숫자 중 3의 배수의 총합: {}\".format(sum))\n{% endcode %}\n{% endnote %}\n","slug":"sw-6230","published":1,"updated":"2019-07-28T16:20:19.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt887003h2646vjosgjmg","content":"<h1 id=\"1번-6230번\"><a href=\"#1번-6230번\" class=\"headerlink\" title=\"1번 - 6230번\"></a>1번 - 6230번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>웹페이지에 입력값이 없어서 제대로 채점이 이루어지는 것 같지가 않다..<br>아마 이렇게 작성하면 되지 않을까?</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    score = int(input())</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(score&lt;<span class=\"number\">60</span>):</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125;번 학생은 &#123;&#125;점으로 불합격입니다.\"</span>.format(i+<span class=\"number\">1</span>, score))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125;번 학생은 &#123;&#125;점으로 합격입니다.\"</span>.format(i+<span class=\"number\">1</span>, score))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"2번-6231번\"><a href=\"#2번-6231번\" class=\"headerlink\" title=\"2번 - 6231번\"></a>2번 - 6231번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">101</span>):</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"3번-6234번\"><a href=\"#3번-6234번\" class=\"headerlink\" title=\"3번 - 6234번\"></a>3번 - 6234번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>이것도 입력값이 없지만… 채점은 됨?</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">101</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>==<span class=\"number\">0</span>):</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125; \"</span>.format(i), end=<span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"4번-6238번\"><a href=\"#4번-6238번\" class=\"headerlink\" title=\"4번 - 6238번\"></a>4번 - 6238번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>조건문 없이 2칸씩 뛰는 방식으로 홀수 출력</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ans=<span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">        ans += str(i) +<span class=\"string\">\", \"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(ans[:<span class=\"number\">-2</span>])</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"5번-6240번\"><a href=\"#5번-6240번\" class=\"headerlink\" title=\"5번 - 6240번\"></a>5번 - 6240번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sum=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">101</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i%<span class=\"number\">3</span>==<span class=\"number\">0</span>):</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"1부터 100사이의 숫자 중 3의 배수의 총합: &#123;&#125;\"</span>.format(sum))</span><br></pre></td></tr></table></figure>\n          </div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1번-6230번\"><a href=\"#1번-6230번\" class=\"headerlink\" title=\"1번 - 6230번\"></a>1번 - 6230번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>웹페이지에 입력값이 없어서 제대로 채점이 이루어지는 것 같지가 않다..<br>아마 이렇게 작성하면 되지 않을까?</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    score = int(input())</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(score&lt;<span class=\"number\">60</span>):</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125;번 학생은 &#123;&#125;점으로 불합격입니다.\"</span>.format(i+<span class=\"number\">1</span>, score))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125;번 학생은 &#123;&#125;점으로 합격입니다.\"</span>.format(i+<span class=\"number\">1</span>, score))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"2번-6231번\"><a href=\"#2번-6231번\" class=\"headerlink\" title=\"2번 - 6231번\"></a>2번 - 6231번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">101</span>):</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"3번-6234번\"><a href=\"#3번-6234번\" class=\"headerlink\" title=\"3번 - 6234번\"></a>3번 - 6234번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>이것도 입력값이 없지만… 채점은 됨?</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">101</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>==<span class=\"number\">0</span>):</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125; \"</span>.format(i), end=<span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"4번-6238번\"><a href=\"#4번-6238번\" class=\"headerlink\" title=\"4번 - 6238번\"></a>4번 - 6238번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>조건문 없이 2칸씩 뛰는 방식으로 홀수 출력</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ans=<span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">        ans += str(i) +<span class=\"string\">\", \"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(ans[:<span class=\"number\">-2</span>])</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"5번-6240번\"><a href=\"#5번-6240번\" class=\"headerlink\" title=\"5번 - 6240번\"></a>5번 - 6240번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sum=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">101</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i%<span class=\"number\">3</span>==<span class=\"number\">0</span>):</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"1부터 100사이의 숫자 중 3의 배수의 총합: &#123;&#125;\"</span>.format(sum))</span><br></pre></td></tr></table></figure>\n          </div>\n"},{"title":"(SW Expert Academy) 내장함수 - 6315번 6316번 6317번 6318번","date":"2019-07-30T08:22:28.000Z","subtitle":"파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법","_content":"\n# 8번 - 6315번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n\n{% note success %}\n{% code lang:python %}\nprint(list(map(lambda x: x**2, list(range(1,11)))))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 9번 - 6316번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 점점 가독성이 떨어지는...\n\n{% note success %}\n{% code lang:python %}\nprint(list(map(lambda y: y**2, list((filter(lambda x: x%2==0, list(range(1,11))))))))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 10번 - 6317번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n{% note success %}\n{% code lang:python %}\ninput_list = (3, 5, 4, 1, 8, 10, 2)\n\nprint(\"max{} => {}\".format(input_list, max(input_list)))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 11번 - 6318번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n{% note success %}\n{% code lang:python %}\ninput_dict = enumerate({'a':0, 'b':1, 'c':2, 'd':3, 'e':4, 'f':5})\n\nfor i, value in input_dict:\n    print(\"{}: {}\".format(value, i))\n{% endcode %}\n{% endnote %}\n","source":"_posts/20190730-sw-6315.md","raw":"---\ntitle: (SW Expert Academy) 내장함수 - 6315번 6316번 6317번 6318번\ndate: 2019-07-30 17:22:28\ncategories: SW 아카데미\ntags: [삼성, 파이썬 ,SW Academy, python]\nsubtitle: 파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법\n---\n\n# 8번 - 6315번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n\n{% note success %}\n{% code lang:python %}\nprint(list(map(lambda x: x**2, list(range(1,11)))))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 9번 - 6316번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 점점 가독성이 떨어지는...\n\n{% note success %}\n{% code lang:python %}\nprint(list(map(lambda y: y**2, list((filter(lambda x: x%2==0, list(range(1,11))))))))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 10번 - 6317번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n{% note success %}\n{% code lang:python %}\ninput_list = (3, 5, 4, 1, 8, 10, 2)\n\nprint(\"max{} => {}\".format(input_list, max(input_list)))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 11번 - 6318번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n{% note success %}\n{% code lang:python %}\ninput_dict = enumerate({'a':0, 'b':1, 'c':2, 'd':3, 'e':4, 'f':5})\n\nfor i, value in input_dict:\n    print(\"{}: {}\".format(value, i))\n{% endcode %}\n{% endnote %}\n","slug":"sw-6315","published":1,"updated":"2019-07-30T09:15:01.389Z","_id":"cjyplt889003k2646ta58ew2p","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"8번-6315번\"><a href=\"#8번-6315번\" class=\"headerlink\" title=\"8번 - 6315번\"></a>8번 - 6315번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(list(map(<span class=\"keyword\">lambda</span> x: x**<span class=\"number\">2</span>, list(range(<span class=\"number\">1</span>,<span class=\"number\">11</span>)))))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"9번-6316번\"><a href=\"#9번-6316번\" class=\"headerlink\" title=\"9번 - 6316번\"></a>9번 - 6316번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>점점 가독성이 떨어지는…</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(list(map(<span class=\"keyword\">lambda</span> y: y**<span class=\"number\">2</span>, list((filter(<span class=\"keyword\">lambda</span> x: x%<span class=\"number\">2</span>==<span class=\"number\">0</span>, list(range(<span class=\"number\">1</span>,<span class=\"number\">11</span>))))))))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"10번-6317번\"><a href=\"#10번-6317번\" class=\"headerlink\" title=\"10번 - 6317번\"></a>10번 - 6317번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">input_list = (<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"max&#123;&#125; =&gt; &#123;&#125;\"</span>.format(input_list, max(input_list)))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"11번-6318번\"><a href=\"#11번-6318번\" class=\"headerlink\" title=\"11번 - 6318번\"></a>11번 - 6318번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">input_dict = enumerate(&#123;<span class=\"string\">'a'</span>:<span class=\"number\">0</span>, <span class=\"string\">'b'</span>:<span class=\"number\">1</span>, <span class=\"string\">'c'</span>:<span class=\"number\">2</span>, <span class=\"string\">'d'</span>:<span class=\"number\">3</span>, <span class=\"string\">'e'</span>:<span class=\"number\">4</span>, <span class=\"string\">'f'</span>:<span class=\"number\">5</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, value <span class=\"keyword\">in</span> input_dict:</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125;: &#123;&#125;\"</span>.format(value, i))</span><br></pre></td></tr></table></figure>\n          </div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"8번-6315번\"><a href=\"#8번-6315번\" class=\"headerlink\" title=\"8번 - 6315번\"></a>8번 - 6315번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(list(map(<span class=\"keyword\">lambda</span> x: x**<span class=\"number\">2</span>, list(range(<span class=\"number\">1</span>,<span class=\"number\">11</span>)))))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"9번-6316번\"><a href=\"#9번-6316번\" class=\"headerlink\" title=\"9번 - 6316번\"></a>9번 - 6316번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>점점 가독성이 떨어지는…</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(list(map(<span class=\"keyword\">lambda</span> y: y**<span class=\"number\">2</span>, list((filter(<span class=\"keyword\">lambda</span> x: x%<span class=\"number\">2</span>==<span class=\"number\">0</span>, list(range(<span class=\"number\">1</span>,<span class=\"number\">11</span>))))))))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"10번-6317번\"><a href=\"#10번-6317번\" class=\"headerlink\" title=\"10번 - 6317번\"></a>10번 - 6317번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">input_list = (<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"max&#123;&#125; =&gt; &#123;&#125;\"</span>.format(input_list, max(input_list)))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"11번-6318번\"><a href=\"#11번-6318번\" class=\"headerlink\" title=\"11번 - 6318번\"></a>11번 - 6318번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">input_dict = enumerate(&#123;<span class=\"string\">'a'</span>:<span class=\"number\">0</span>, <span class=\"string\">'b'</span>:<span class=\"number\">1</span>, <span class=\"string\">'c'</span>:<span class=\"number\">2</span>, <span class=\"string\">'d'</span>:<span class=\"number\">3</span>, <span class=\"string\">'e'</span>:<span class=\"number\">4</span>, <span class=\"string\">'f'</span>:<span class=\"number\">5</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, value <span class=\"keyword\">in</span> input_dict:</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125;: &#123;&#125;\"</span>.format(value, i))</span><br></pre></td></tr></table></figure>\n          </div>\n"},{"title":"(SW Expert Academy) 함수의 기초 - 6319번 6320번 6321번 6323번 6324번","date":"2019-07-28T16:27:35.000Z","subtitle":"파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법","_content":"\n# 1번 - 6319번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> string 뒤집는 방법 2가지\n> 내장함수 사용 -> \"\".join(reverse(_string_))\n> 문자 하나하나 잘라서 뒤집기 -> _string_[::-1]\n\n{% note success %}\n{% code lang:python %}\ndef check_palindrome(w):\n    #if(w == ''.join(reversed(w))):\n    if(w == w[::-1]):\n        print(\"입력하신 단어는 회문(Palindrome)입니다.\")\n    else:\n        print(\"입력하신 단어는 회문(Palindrome)이 아닙니다.\")\n\nword = input()\nprint(word)\ncheck_palindrome(word)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 2번 - 6320번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> Test case도 별로 없고... 문제와 입력값의 설명이 부실하니 출력값을 그냥 print해도 맞다고 할듯...\n> 아마 가위바위보에서 이긴 사람의 이름을 출력해야하는게 원래 의도였지 않았을까 싶다.(주석 처리한 부분들)\n\n{% note success %}\n{% code lang:python %}\n#def RSP_game(name1, name2, x, y):\ndef RSP_game(x, y):\n    if(x == y):\n        print(\"비겼습니다!\")\n    elif((x=='가위' and y=='바위') or (x=='바위' and y=='보') or (x=='보' and y=='가위')):\n        #print(\"{}가 이겼습니다!\".format(name2))\n        print(\"{}가 이겼습니다!\".format(y))\n    else:\n        #print(\"{}가 이겼습니다!\".format(name1))\n        print(\"{}가 이겼습니다!\".format(x))\n\n\nPlayer1 = input()\nPlayer2 = input()\nh1 = input()\nh2 = input()\n\n#RSP_game(Player1, Player2, h1, h2)\nRSP_game(h1, h2)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 3번 - 6321번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 소수 정의에 충실하게 함수를 만들면 아래와 같다.\n> 에라토스테네스의 체를 활용하는 방법은 두 번째 방법이다.\n\n{% note success %}\n{% code lang:python %}\ndef is_prime(num):\n    for i in range(2, num):\n        if(num%i==0):\n            return False\n    return True\n\nnum = int(input())\nif(is_prime(num)):\n    print(\"소수입니다.\")\nelse:\n    print(\"소수가 아닙니다.\")\n{% endcode %}\n{% endnote %}\n\n{% note info %}\n{% code lang:python %}\nn=1000\na = [False,False] + [True]*(n-1) # 0,1은 소수가 아니고 나머지는 일단 True로 리스트 생성\nprimes=[] # 소수를 담을 리스트\n\nfor i in range(2,n+1):\n  if a[i]:\n    primes.append(i)\n    for j in range(2*i, n+1, i):  # 범위에서 합성수를 False로 전환\n        a[j] = False\nprint(primes)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 4번 - 6323번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 재귀함수로도 풀 수 있지만 Memoization을 사용하면 O(n) 시간에 풀 수 있음\n\n{% note success %}\n{% code lang:python %}\nmemo = {1:1, 2:1}   #첫 번째와 두 번째는 1\n\ndef fibo(n):\n    if n not in memo:\n        memo[n] = fibo(n-1) + fibo(n-2)\n    return memo[n]\n\nnum = int(input())\nfibo(num)\n\nprint(\"[\", end='')\nfor i in range(1, num):\n    print(\"{}, \".format(memo[i]), end='')\nprint(\"{}]\".format(memo[num]))\n{% endcode %}\n{% endnote %}\n\n> 아래는 굉장히 python 다운 깔끔한 코딩방법\n\n{% note info %}\n{% code lang:python %}\ndef fibonacci(n):\n    a, b = 1, 0\n    for i in range(n):\n        a, b = b, a + b\n    return b\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 5번 - 6324번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> set 자료형을 사용하면 중복값을 쉽게 제거할 수 있지만 index를 지원하지 않음 (이 문제에서 출력 형식에 맞추기 까다로움)\n> 전역변수로 list를 하나 만들고 함수 안에서 변경값이 적용되도록 global 사용 (global 사용하지 않고 return 시킬 수도 있지만 배운 강의내용 활용)\n\n{% note success %}\n{% code lang:python %}\nli = [1, 2, 3, 4, 3, 2, 1]\n# print(li)\n# print(set(li))\n\nunique_list = list()\ndef unique_value(li):\n    global unique_list\n    for i in range(len(li)):\n        num = li[i]\n        if num not in unique_list:\n            unique_list.append(num)\n\nprint(li)\nunique_value(li)\nprint(unique_list)\n{% endcode %}\n{% endnote %}\n","source":"_posts/20190729-sw-6319.md","raw":"---\ntitle: (SW Expert Academy) 함수의 기초 - 6319번 6320번 6321번 6323번 6324번\ndate: 2019-07-29 01:27:35\ncategories: SW 아카데미\ntags: [삼성, 파이썬 ,SW Academy, python]\nsubtitle: 파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법\n---\n\n# 1번 - 6319번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> string 뒤집는 방법 2가지\n> 내장함수 사용 -> \"\".join(reverse(_string_))\n> 문자 하나하나 잘라서 뒤집기 -> _string_[::-1]\n\n{% note success %}\n{% code lang:python %}\ndef check_palindrome(w):\n    #if(w == ''.join(reversed(w))):\n    if(w == w[::-1]):\n        print(\"입력하신 단어는 회문(Palindrome)입니다.\")\n    else:\n        print(\"입력하신 단어는 회문(Palindrome)이 아닙니다.\")\n\nword = input()\nprint(word)\ncheck_palindrome(word)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 2번 - 6320번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> Test case도 별로 없고... 문제와 입력값의 설명이 부실하니 출력값을 그냥 print해도 맞다고 할듯...\n> 아마 가위바위보에서 이긴 사람의 이름을 출력해야하는게 원래 의도였지 않았을까 싶다.(주석 처리한 부분들)\n\n{% note success %}\n{% code lang:python %}\n#def RSP_game(name1, name2, x, y):\ndef RSP_game(x, y):\n    if(x == y):\n        print(\"비겼습니다!\")\n    elif((x=='가위' and y=='바위') or (x=='바위' and y=='보') or (x=='보' and y=='가위')):\n        #print(\"{}가 이겼습니다!\".format(name2))\n        print(\"{}가 이겼습니다!\".format(y))\n    else:\n        #print(\"{}가 이겼습니다!\".format(name1))\n        print(\"{}가 이겼습니다!\".format(x))\n\n\nPlayer1 = input()\nPlayer2 = input()\nh1 = input()\nh2 = input()\n\n#RSP_game(Player1, Player2, h1, h2)\nRSP_game(h1, h2)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 3번 - 6321번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 소수 정의에 충실하게 함수를 만들면 아래와 같다.\n> 에라토스테네스의 체를 활용하는 방법은 두 번째 방법이다.\n\n{% note success %}\n{% code lang:python %}\ndef is_prime(num):\n    for i in range(2, num):\n        if(num%i==0):\n            return False\n    return True\n\nnum = int(input())\nif(is_prime(num)):\n    print(\"소수입니다.\")\nelse:\n    print(\"소수가 아닙니다.\")\n{% endcode %}\n{% endnote %}\n\n{% note info %}\n{% code lang:python %}\nn=1000\na = [False,False] + [True]*(n-1) # 0,1은 소수가 아니고 나머지는 일단 True로 리스트 생성\nprimes=[] # 소수를 담을 리스트\n\nfor i in range(2,n+1):\n  if a[i]:\n    primes.append(i)\n    for j in range(2*i, n+1, i):  # 범위에서 합성수를 False로 전환\n        a[j] = False\nprint(primes)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 4번 - 6323번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 재귀함수로도 풀 수 있지만 Memoization을 사용하면 O(n) 시간에 풀 수 있음\n\n{% note success %}\n{% code lang:python %}\nmemo = {1:1, 2:1}   #첫 번째와 두 번째는 1\n\ndef fibo(n):\n    if n not in memo:\n        memo[n] = fibo(n-1) + fibo(n-2)\n    return memo[n]\n\nnum = int(input())\nfibo(num)\n\nprint(\"[\", end='')\nfor i in range(1, num):\n    print(\"{}, \".format(memo[i]), end='')\nprint(\"{}]\".format(memo[num]))\n{% endcode %}\n{% endnote %}\n\n> 아래는 굉장히 python 다운 깔끔한 코딩방법\n\n{% note info %}\n{% code lang:python %}\ndef fibonacci(n):\n    a, b = 1, 0\n    for i in range(n):\n        a, b = b, a + b\n    return b\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 5번 - 6324번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> set 자료형을 사용하면 중복값을 쉽게 제거할 수 있지만 index를 지원하지 않음 (이 문제에서 출력 형식에 맞추기 까다로움)\n> 전역변수로 list를 하나 만들고 함수 안에서 변경값이 적용되도록 global 사용 (global 사용하지 않고 return 시킬 수도 있지만 배운 강의내용 활용)\n\n{% note success %}\n{% code lang:python %}\nli = [1, 2, 3, 4, 3, 2, 1]\n# print(li)\n# print(set(li))\n\nunique_list = list()\ndef unique_value(li):\n    global unique_list\n    for i in range(len(li)):\n        num = li[i]\n        if num not in unique_list:\n            unique_list.append(num)\n\nprint(li)\nunique_value(li)\nprint(unique_list)\n{% endcode %}\n{% endnote %}\n","slug":"sw-6319","published":1,"updated":"2019-07-29T06:25:39.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt88c003p2646nl0tatle","content":"<h1 id=\"1번-6319번\"><a href=\"#1번-6319번\" class=\"headerlink\" title=\"1번 - 6319번\"></a>1번 - 6319번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>string 뒤집는 방법 2가지<br>내장함수 사용 -&gt; “”.join(reverse(<em>string</em>))<br>문자 하나하나 잘라서 뒤집기 -&gt; <em>string</em>[::-1]</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_palindrome</span><span class=\"params\">(w)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#if(w == ''.join(reversed(w))):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(w == w[::<span class=\"number\">-1</span>]):</span><br><span class=\"line\">        print(<span class=\"string\">\"입력하신 단어는 회문(Palindrome)입니다.\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"입력하신 단어는 회문(Palindrome)이 아닙니다.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">word = input()</span><br><span class=\"line\">print(word)</span><br><span class=\"line\">check_palindrome(word)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"2번-6320번\"><a href=\"#2번-6320번\" class=\"headerlink\" title=\"2번 - 6320번\"></a>2번 - 6320번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>Test case도 별로 없고… 문제와 입력값의 설명이 부실하니 출력값을 그냥 print해도 맞다고 할듯…<br>아마 가위바위보에서 이긴 사람의 이름을 출력해야하는게 원래 의도였지 않았을까 싶다.(주석 처리한 부분들)</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#def RSP_game(name1, name2, x, y):</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">RSP_game</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == y):</span><br><span class=\"line\">        print(<span class=\"string\">\"비겼습니다!\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span>((x==<span class=\"string\">'가위'</span> <span class=\"keyword\">and</span> y==<span class=\"string\">'바위'</span>) <span class=\"keyword\">or</span> (x==<span class=\"string\">'바위'</span> <span class=\"keyword\">and</span> y==<span class=\"string\">'보'</span>) <span class=\"keyword\">or</span> (x==<span class=\"string\">'보'</span> <span class=\"keyword\">and</span> y==<span class=\"string\">'가위'</span>)):</span><br><span class=\"line\">        <span class=\"comment\">#print(\"&#123;&#125;가 이겼습니다!\".format(name2))</span></span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125;가 이겼습니다!\"</span>.format(y))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\">#print(\"&#123;&#125;가 이겼습니다!\".format(name1))</span></span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125;가 이겼습니다!\"</span>.format(x))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Player1 = input()</span><br><span class=\"line\">Player2 = input()</span><br><span class=\"line\">h1 = input()</span><br><span class=\"line\">h2 = input()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#RSP_game(Player1, Player2, h1, h2)</span></span><br><span class=\"line\">RSP_game(h1, h2)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"3번-6321번\"><a href=\"#3번-6321번\" class=\"headerlink\" title=\"3번 - 6321번\"></a>3번 - 6321번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>소수 정의에 충실하게 함수를 만들면 아래와 같다.<br>에라토스테네스의 체를 활용하는 방법은 두 번째 방법이다.</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_prime</span><span class=\"params\">(num)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, num):</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num%i==<span class=\"number\">0</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">num = int(input())</span><br><span class=\"line\"><span class=\"keyword\">if</span>(is_prime(num)):</span><br><span class=\"line\">    print(<span class=\"string\">\"소수입니다.\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"소수가 아닙니다.\"</span>)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<div class=\"note info\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">n=<span class=\"number\">1000</span></span><br><span class=\"line\">a = [<span class=\"literal\">False</span>,<span class=\"literal\">False</span>] + [<span class=\"literal\">True</span>]*(n<span class=\"number\">-1</span>) <span class=\"comment\"># 0,1은 소수가 아니고 나머지는 일단 True로 리스트 생성</span></span><br><span class=\"line\">primes=[] <span class=\"comment\"># 소수를 담을 리스트</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,n+<span class=\"number\">1</span>):</span><br><span class=\"line\">  <span class=\"keyword\">if</span> a[i]:</span><br><span class=\"line\">    primes.append(i)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>*i, n+<span class=\"number\">1</span>, i):  <span class=\"comment\"># 범위에서 합성수를 False로 전환</span></span><br><span class=\"line\">        a[j] = <span class=\"literal\">False</span></span><br><span class=\"line\">print(primes)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"4번-6323번\"><a href=\"#4번-6323번\" class=\"headerlink\" title=\"4번 - 6323번\"></a>4번 - 6323번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>재귀함수로도 풀 수 있지만 Memoization을 사용하면 O(n) 시간에 풀 수 있음</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">memo = &#123;<span class=\"number\">1</span>:<span class=\"number\">1</span>, <span class=\"number\">2</span>:<span class=\"number\">1</span>&#125;   <span class=\"comment\">#첫 번째와 두 번째는 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibo</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> memo:</span><br><span class=\"line\">        memo[n] = fibo(n<span class=\"number\">-1</span>) + fibo(n<span class=\"number\">-2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo[n]</span><br><span class=\"line\"></span><br><span class=\"line\">num = int(input())</span><br><span class=\"line\">fibo(num)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"[\"</span>, end=<span class=\"string\">''</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, num):</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125;, \"</span>.format(memo[i]), end=<span class=\"string\">''</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"&#123;&#125;]\"</span>.format(memo[num]))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<blockquote>\n<p>아래는 굉장히 python 다운 깔끔한 코딩방법</p>\n</blockquote>\n<div class=\"note info\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    a, b = <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"5번-6324번\"><a href=\"#5번-6324번\" class=\"headerlink\" title=\"5번 - 6324번\"></a>5번 - 6324번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>set 자료형을 사용하면 중복값을 쉽게 제거할 수 있지만 index를 지원하지 않음 (이 문제에서 출력 형식에 맞추기 까다로움)<br>전역변수로 list를 하나 만들고 함수 안에서 변경값이 적용되도록 global 사용 (global 사용하지 않고 return 시킬 수도 있지만 배운 강의내용 활용)</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">li = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\"># print(li)</span></span><br><span class=\"line\"><span class=\"comment\"># print(set(li))</span></span><br><span class=\"line\"></span><br><span class=\"line\">unique_list = list()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unique_value</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> unique_list</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(li)):</span><br><span class=\"line\">        num = li[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> unique_list:</span><br><span class=\"line\">            unique_list.append(num)</span><br><span class=\"line\"></span><br><span class=\"line\">print(li)</span><br><span class=\"line\">unique_value(li)</span><br><span class=\"line\">print(unique_list)</span><br></pre></td></tr></table></figure>\n          </div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1번-6319번\"><a href=\"#1번-6319번\" class=\"headerlink\" title=\"1번 - 6319번\"></a>1번 - 6319번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>string 뒤집는 방법 2가지<br>내장함수 사용 -&gt; “”.join(reverse(<em>string</em>))<br>문자 하나하나 잘라서 뒤집기 -&gt; <em>string</em>[::-1]</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_palindrome</span><span class=\"params\">(w)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#if(w == ''.join(reversed(w))):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(w == w[::<span class=\"number\">-1</span>]):</span><br><span class=\"line\">        print(<span class=\"string\">\"입력하신 단어는 회문(Palindrome)입니다.\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"입력하신 단어는 회문(Palindrome)이 아닙니다.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">word = input()</span><br><span class=\"line\">print(word)</span><br><span class=\"line\">check_palindrome(word)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"2번-6320번\"><a href=\"#2번-6320번\" class=\"headerlink\" title=\"2번 - 6320번\"></a>2번 - 6320번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>Test case도 별로 없고… 문제와 입력값의 설명이 부실하니 출력값을 그냥 print해도 맞다고 할듯…<br>아마 가위바위보에서 이긴 사람의 이름을 출력해야하는게 원래 의도였지 않았을까 싶다.(주석 처리한 부분들)</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#def RSP_game(name1, name2, x, y):</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">RSP_game</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == y):</span><br><span class=\"line\">        print(<span class=\"string\">\"비겼습니다!\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span>((x==<span class=\"string\">'가위'</span> <span class=\"keyword\">and</span> y==<span class=\"string\">'바위'</span>) <span class=\"keyword\">or</span> (x==<span class=\"string\">'바위'</span> <span class=\"keyword\">and</span> y==<span class=\"string\">'보'</span>) <span class=\"keyword\">or</span> (x==<span class=\"string\">'보'</span> <span class=\"keyword\">and</span> y==<span class=\"string\">'가위'</span>)):</span><br><span class=\"line\">        <span class=\"comment\">#print(\"&#123;&#125;가 이겼습니다!\".format(name2))</span></span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125;가 이겼습니다!\"</span>.format(y))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\">#print(\"&#123;&#125;가 이겼습니다!\".format(name1))</span></span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125;가 이겼습니다!\"</span>.format(x))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Player1 = input()</span><br><span class=\"line\">Player2 = input()</span><br><span class=\"line\">h1 = input()</span><br><span class=\"line\">h2 = input()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#RSP_game(Player1, Player2, h1, h2)</span></span><br><span class=\"line\">RSP_game(h1, h2)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"3번-6321번\"><a href=\"#3번-6321번\" class=\"headerlink\" title=\"3번 - 6321번\"></a>3번 - 6321번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>소수 정의에 충실하게 함수를 만들면 아래와 같다.<br>에라토스테네스의 체를 활용하는 방법은 두 번째 방법이다.</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_prime</span><span class=\"params\">(num)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, num):</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num%i==<span class=\"number\">0</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">num = int(input())</span><br><span class=\"line\"><span class=\"keyword\">if</span>(is_prime(num)):</span><br><span class=\"line\">    print(<span class=\"string\">\"소수입니다.\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"소수가 아닙니다.\"</span>)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<div class=\"note info\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">n=<span class=\"number\">1000</span></span><br><span class=\"line\">a = [<span class=\"literal\">False</span>,<span class=\"literal\">False</span>] + [<span class=\"literal\">True</span>]*(n<span class=\"number\">-1</span>) <span class=\"comment\"># 0,1은 소수가 아니고 나머지는 일단 True로 리스트 생성</span></span><br><span class=\"line\">primes=[] <span class=\"comment\"># 소수를 담을 리스트</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,n+<span class=\"number\">1</span>):</span><br><span class=\"line\">  <span class=\"keyword\">if</span> a[i]:</span><br><span class=\"line\">    primes.append(i)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>*i, n+<span class=\"number\">1</span>, i):  <span class=\"comment\"># 범위에서 합성수를 False로 전환</span></span><br><span class=\"line\">        a[j] = <span class=\"literal\">False</span></span><br><span class=\"line\">print(primes)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"4번-6323번\"><a href=\"#4번-6323번\" class=\"headerlink\" title=\"4번 - 6323번\"></a>4번 - 6323번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>재귀함수로도 풀 수 있지만 Memoization을 사용하면 O(n) 시간에 풀 수 있음</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">memo = &#123;<span class=\"number\">1</span>:<span class=\"number\">1</span>, <span class=\"number\">2</span>:<span class=\"number\">1</span>&#125;   <span class=\"comment\">#첫 번째와 두 번째는 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibo</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> memo:</span><br><span class=\"line\">        memo[n] = fibo(n<span class=\"number\">-1</span>) + fibo(n<span class=\"number\">-2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo[n]</span><br><span class=\"line\"></span><br><span class=\"line\">num = int(input())</span><br><span class=\"line\">fibo(num)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"[\"</span>, end=<span class=\"string\">''</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, num):</span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;&#125;, \"</span>.format(memo[i]), end=<span class=\"string\">''</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"&#123;&#125;]\"</span>.format(memo[num]))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<blockquote>\n<p>아래는 굉장히 python 다운 깔끔한 코딩방법</p>\n</blockquote>\n<div class=\"note info\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    a, b = <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"5번-6324번\"><a href=\"#5번-6324번\" class=\"headerlink\" title=\"5번 - 6324번\"></a>5번 - 6324번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>set 자료형을 사용하면 중복값을 쉽게 제거할 수 있지만 index를 지원하지 않음 (이 문제에서 출력 형식에 맞추기 까다로움)<br>전역변수로 list를 하나 만들고 함수 안에서 변경값이 적용되도록 global 사용 (global 사용하지 않고 return 시킬 수도 있지만 배운 강의내용 활용)</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">li = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"comment\"># print(li)</span></span><br><span class=\"line\"><span class=\"comment\"># print(set(li))</span></span><br><span class=\"line\"></span><br><span class=\"line\">unique_list = list()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unique_value</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> unique_list</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(li)):</span><br><span class=\"line\">        num = li[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> num <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> unique_list:</span><br><span class=\"line\">            unique_list.append(num)</span><br><span class=\"line\"></span><br><span class=\"line\">print(li)</span><br><span class=\"line\">unique_value(li)</span><br><span class=\"line\">print(unique_list)</span><br></pre></td></tr></table></figure>\n          </div>\n"},{"title":"(SW Expert Academy) 내장함수 - 6308번 6311번 6312번 6313번 6314번","date":"2019-07-30T07:08:09.000Z","subtitle":"파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법","_content":"\n# 1번 - 6308번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 문제의 입출력에서 '올해''를 기준으로 20살이 100가 되는게 2099년이기 때문에 '올해'=2018년 임을 알 수 있다.\n> 지금 날짜를 적용시키고 싶다면 그냥 datetime.now()를 쓰면 된다.\n\n{% note success %}\n{% code lang:python %}\nfrom datetime import datetime, date\n\nname = input()\nage = int(input())\nnow = date(2018, 1, 1).year\n\nprint(\"{}(은)는 {}년에 100세가 될 것입니다.\".format(name, now-age+101))\n{% endcode %}\n{% endnote %}\n\n------\n\n# 4번 - 6311번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 2,3번 문제는 없음\n> 조금 더 간결하게 풀 수 있지 않을까? 아쉽다\n\n{% note success %}\n{% code lang:python %}\nfrom datetime import datetime, date\n\nname = input()\nage = int(input())\nnow = date(2018, 1, 1).year\n\nprint(\"{}(은)는 {}년에 100세가 될 것입니다.\".format(name, now-age+101))\n{% endcode %}\n{% endnote %}\n\n------\n\n# 5번 - 6312번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 정확하게 무엇을 요구하는지 이해를 못하겠다...\n> SKIP\n\n-----\n\n# 6번 - 6313번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n\n{% note success %}\n{% code lang:python %}\nvalue = int(input())\n\nprint(\"ASCII {} => {}\".format(value, chr(value)))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 7번 - 6314번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 한줄이면 끝\n\n{% note success %}\n{% code lang:python %}\nprint(list(filter(lambda x: x%2==0, list(range(1,11)))))\n\n# int_list = list(range(1,11))\n# even_list = list(filter(lambda x:x%2==0, int_list))\n# print(even_list)\n{% endcode %}\n{% endnote %}\n","source":"_posts/20190730-sw-6308.md","raw":"---\ntitle: (SW Expert Academy) 내장함수 - 6308번 6311번 6312번 6313번 6314번\ndate: 2019-07-30 16:08:09\ncategories: SW 아카데미\ntags: [삼성, 파이썬 ,SW Academy, python]\nsubtitle: 파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법\n---\n\n# 1번 - 6308번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 문제의 입출력에서 '올해''를 기준으로 20살이 100가 되는게 2099년이기 때문에 '올해'=2018년 임을 알 수 있다.\n> 지금 날짜를 적용시키고 싶다면 그냥 datetime.now()를 쓰면 된다.\n\n{% note success %}\n{% code lang:python %}\nfrom datetime import datetime, date\n\nname = input()\nage = int(input())\nnow = date(2018, 1, 1).year\n\nprint(\"{}(은)는 {}년에 100세가 될 것입니다.\".format(name, now-age+101))\n{% endcode %}\n{% endnote %}\n\n------\n\n# 4번 - 6311번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 2,3번 문제는 없음\n> 조금 더 간결하게 풀 수 있지 않을까? 아쉽다\n\n{% note success %}\n{% code lang:python %}\nfrom datetime import datetime, date\n\nname = input()\nage = int(input())\nnow = date(2018, 1, 1).year\n\nprint(\"{}(은)는 {}년에 100세가 될 것입니다.\".format(name, now-age+101))\n{% endcode %}\n{% endnote %}\n\n------\n\n# 5번 - 6312번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 정확하게 무엇을 요구하는지 이해를 못하겠다...\n> SKIP\n\n-----\n\n# 6번 - 6313번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n\n{% note success %}\n{% code lang:python %}\nvalue = int(input())\n\nprint(\"ASCII {} => {}\".format(value, chr(value)))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 7번 - 6314번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 한줄이면 끝\n\n{% note success %}\n{% code lang:python %}\nprint(list(filter(lambda x: x%2==0, list(range(1,11)))))\n\n# int_list = list(range(1,11))\n# even_list = list(filter(lambda x:x%2==0, int_list))\n# print(even_list)\n{% endcode %}\n{% endnote %}\n","slug":"sw-6308","published":1,"updated":"2019-07-30T08:22:00.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt88e003r2646eth3xy6u","content":"<h1 id=\"1번-6308번\"><a href=\"#1번-6308번\" class=\"headerlink\" title=\"1번 - 6308번\"></a>1번 - 6308번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>문제의 입출력에서 ‘올해’’를 기준으로 20살이 100가 되는게 2099년이기 때문에 ‘올해’=2018년 임을 알 수 있다.<br>지금 날짜를 적용시키고 싶다면 그냥 datetime.now()를 쓰면 된다.</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime, date</span><br><span class=\"line\"></span><br><span class=\"line\">name = input()</span><br><span class=\"line\">age = int(input())</span><br><span class=\"line\">now = date(<span class=\"number\">2018</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).year</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;&#125;(은)는 &#123;&#125;년에 100세가 될 것입니다.\"</span>.format(name, now-age+<span class=\"number\">101</span>))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"4번-6311번\"><a href=\"#4번-6311번\" class=\"headerlink\" title=\"4번 - 6311번\"></a>4번 - 6311번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>2,3번 문제는 없음<br>조금 더 간결하게 풀 수 있지 않을까? 아쉽다</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime, date</span><br><span class=\"line\"></span><br><span class=\"line\">name = input()</span><br><span class=\"line\">age = int(input())</span><br><span class=\"line\">now = date(<span class=\"number\">2018</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).year</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;&#125;(은)는 &#123;&#125;년에 100세가 될 것입니다.\"</span>.format(name, now-age+<span class=\"number\">101</span>))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"5번-6312번\"><a href=\"#5번-6312번\" class=\"headerlink\" title=\"5번 - 6312번\"></a>5번 - 6312번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>정확하게 무엇을 요구하는지 이해를 못하겠다…<br>SKIP</p>\n</blockquote>\n<hr>\n<h1 id=\"6번-6313번\"><a href=\"#6번-6313번\" class=\"headerlink\" title=\"6번 - 6313번\"></a>6번 - 6313번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">value = int(input())</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"ASCII &#123;&#125; =&gt; &#123;&#125;\"</span>.format(value, chr(value)))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"7번-6314번\"><a href=\"#7번-6314번\" class=\"headerlink\" title=\"7번 - 6314번\"></a>7번 - 6314번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>한줄이면 끝</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(list(filter(<span class=\"keyword\">lambda</span> x: x%<span class=\"number\">2</span>==<span class=\"number\">0</span>, list(range(<span class=\"number\">1</span>,<span class=\"number\">11</span>)))))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># int_list = list(range(1,11))</span></span><br><span class=\"line\"><span class=\"comment\"># even_list = list(filter(lambda x:x%2==0, int_list))</span></span><br><span class=\"line\"><span class=\"comment\"># print(even_list)</span></span><br></pre></td></tr></table></figure>\n          </div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1번-6308번\"><a href=\"#1번-6308번\" class=\"headerlink\" title=\"1번 - 6308번\"></a>1번 - 6308번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>문제의 입출력에서 ‘올해’’를 기준으로 20살이 100가 되는게 2099년이기 때문에 ‘올해’=2018년 임을 알 수 있다.<br>지금 날짜를 적용시키고 싶다면 그냥 datetime.now()를 쓰면 된다.</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime, date</span><br><span class=\"line\"></span><br><span class=\"line\">name = input()</span><br><span class=\"line\">age = int(input())</span><br><span class=\"line\">now = date(<span class=\"number\">2018</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).year</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;&#125;(은)는 &#123;&#125;년에 100세가 될 것입니다.\"</span>.format(name, now-age+<span class=\"number\">101</span>))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"4번-6311번\"><a href=\"#4번-6311번\" class=\"headerlink\" title=\"4번 - 6311번\"></a>4번 - 6311번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>2,3번 문제는 없음<br>조금 더 간결하게 풀 수 있지 않을까? 아쉽다</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime, date</span><br><span class=\"line\"></span><br><span class=\"line\">name = input()</span><br><span class=\"line\">age = int(input())</span><br><span class=\"line\">now = date(<span class=\"number\">2018</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).year</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;&#125;(은)는 &#123;&#125;년에 100세가 될 것입니다.\"</span>.format(name, now-age+<span class=\"number\">101</span>))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"5번-6312번\"><a href=\"#5번-6312번\" class=\"headerlink\" title=\"5번 - 6312번\"></a>5번 - 6312번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>정확하게 무엇을 요구하는지 이해를 못하겠다…<br>SKIP</p>\n</blockquote>\n<hr>\n<h1 id=\"6번-6313번\"><a href=\"#6번-6313번\" class=\"headerlink\" title=\"6번 - 6313번\"></a>6번 - 6313번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">value = int(input())</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"ASCII &#123;&#125; =&gt; &#123;&#125;\"</span>.format(value, chr(value)))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"7번-6314번\"><a href=\"#7번-6314번\" class=\"headerlink\" title=\"7번 - 6314번\"></a>7번 - 6314번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>한줄이면 끝</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(list(filter(<span class=\"keyword\">lambda</span> x: x%<span class=\"number\">2</span>==<span class=\"number\">0</span>, list(range(<span class=\"number\">1</span>,<span class=\"number\">11</span>)))))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># int_list = list(range(1,11))</span></span><br><span class=\"line\"><span class=\"comment\"># even_list = list(filter(lambda x:x%2==0, int_list))</span></span><br><span class=\"line\"><span class=\"comment\"># print(even_list)</span></span><br></pre></td></tr></table></figure>\n          </div>\n"},{"title":"블로그 테마 변경","date":"2019-07-13T06:12:18.000Z","_content":"기존 테마가 별로 마음에 안 들어서 새로운 테마로 바꾸게 되었다.\n","source":"_posts/blog-migration.md","raw":"---\ntitle: 블로그 테마 변경\ndate: 2019-07-13 15:12:18\ntags:\n---\n기존 테마가 별로 마음에 안 들어서 새로운 테마로 바꾸게 되었다.\n","slug":"blog-migration","published":1,"updated":"2019-07-13T06:12:58.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt88g003t264671bfw297","content":"<p>기존 테마가 별로 마음에 안 들어서 새로운 테마로 바꾸게 되었다.</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<p>기존 테마가 별로 마음에 안 들어서 새로운 테마로 바꾸게 되었다.</p>\n"},{"title":"(SW Expert Academy) 함수의 기초 - 6325번 6326번 6327번 6328번 6329번","date":"2019-07-29T06:12:58.000Z","subtitle":"파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법","_content":"\n# 6번 - 6325번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> list를 입력받고 정렬하고... 이런 부분은 생략\n> 임의의 숫자도 입력받고 함수의 인자로 넘기는 부분도 생략\n\n{% note success %}\n{% code lang:python %}\nsorted_list = [2, 4, 6, 8, 10]\n\ndef find_value(value, list):\n    if value not in list:\n        print(\"{} => False\".format(value))\n    else:\n        print(\"{} => True\".format(value))\n\nprint(sorted_list)\nfind_value(5, sorted_list)\nfind_value(10, sorted_list)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 7번 - 6326번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 팩토리얼 : n! = n * n-1 * n-2 * ... * 2 * 1\n\n{% note success %}\n{% code lang:python %}\ndef factorial(n):\n    ans = 1\n    for i in range(1, n+1):\n        ans *= i\n    return ans\n\nnum = int(input())\nprint(factorial(num))\n{% endcode %}\n{% endnote %}\n**\n-----\n\n# 8번 - 6327번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 콤마 ','로 구분하고 int 형으로 입력받는 방법을 기억!\n\n{% note success %}\n{% code lang:python %}\ndef square_num(n):\n    return n**2\n\nnum1, num2 = map(int, input().split(','))\n\nprint(\"square({}) => {}\".format(num1, square_num(num1)))\nprint(\"square({}) => {}\".format(num2, square_num(num2)))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 9번 - 6328번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 길이가 같을 경우 그냥 둘 다 출력되게함\n\n{% note success %}\n{% code lang:python %}\ndef which_is_longer(str1, str2):\n    if (len(str1) == len(str2)):\n        print(str1, \", \", str2)\n    elif(len(str1)>len(str2)):\n        print(str1)\n    else:\n        print(str2)\n\nstr1, str2 = input().split(', ')\n\nwhich_is_longer(str1, str2)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 10번 - 6329번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n{% note success %}\n{% code lang:python %}\ndef countDown(n):\n    if(n==0):\n        print(\"카운트다운을 하려면 0보다 큰 입력이 필요합니다.\")\n\n    for i in range(n, 0, -1):\n        print(i)\n\ncountDown(0)\ncountDown(10)\n{% endcode %}\n{% endnote %}\n","source":"_posts/20190729-sw-6325.md","raw":"---\ntitle: (SW Expert Academy) 함수의 기초 - 6325번 6326번 6327번 6328번 6329번\ndate: 2019-07-29 15:12:58\ncategories: SW 아카데미\ntags: [삼성, 파이썬 ,SW Academy, python]\nsubtitle: 파이썬 프로그래밍 기초(1) 파이썬의 기본 구조와 기초 문법\n---\n\n# 6번 - 6325번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> list를 입력받고 정렬하고... 이런 부분은 생략\n> 임의의 숫자도 입력받고 함수의 인자로 넘기는 부분도 생략\n\n{% note success %}\n{% code lang:python %}\nsorted_list = [2, 4, 6, 8, 10]\n\ndef find_value(value, list):\n    if value not in list:\n        print(\"{} => False\".format(value))\n    else:\n        print(\"{} => True\".format(value))\n\nprint(sorted_list)\nfind_value(5, sorted_list)\nfind_value(10, sorted_list)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 7번 - 6326번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 팩토리얼 : n! = n * n-1 * n-2 * ... * 2 * 1\n\n{% note success %}\n{% code lang:python %}\ndef factorial(n):\n    ans = 1\n    for i in range(1, n+1):\n        ans *= i\n    return ans\n\nnum = int(input())\nprint(factorial(num))\n{% endcode %}\n{% endnote %}\n**\n-----\n\n# 8번 - 6327번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 콤마 ','로 구분하고 int 형으로 입력받는 방법을 기억!\n\n{% note success %}\n{% code lang:python %}\ndef square_num(n):\n    return n**2\n\nnum1, num2 = map(int, input().split(','))\n\nprint(\"square({}) => {}\".format(num1, square_num(num1)))\nprint(\"square({}) => {}\".format(num2, square_num(num2)))\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 9번 - 6328번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n> 길이가 같을 경우 그냥 둘 다 출력되게함\n\n{% note success %}\n{% code lang:python %}\ndef which_is_longer(str1, str2):\n    if (len(str1) == len(str2)):\n        print(str1, \", \", str2)\n    elif(len(str1)>len(str2)):\n        print(str1)\n    else:\n        print(str2)\n\nstr1, str2 = input().split(', ')\n\nwhich_is_longer(str1, str2)\n{% endcode %}\n{% endnote %}\n\n-----\n\n# 10번 - 6329번\n\n{% note %}\n- 시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초\n- 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내\n{% endnote %}\n\n{% note success %}\n{% code lang:python %}\ndef countDown(n):\n    if(n==0):\n        print(\"카운트다운을 하려면 0보다 큰 입력이 필요합니다.\")\n\n    for i in range(n, 0, -1):\n        print(i)\n\ncountDown(0)\ncountDown(10)\n{% endcode %}\n{% endnote %}\n","slug":"sw-6325","published":1,"updated":"2019-07-29T06:42:45.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyplt88j003x2646gq4tmkwi","content":"<h1 id=\"6번-6325번\"><a href=\"#6번-6325번\" class=\"headerlink\" title=\"6번 - 6325번\"></a>6번 - 6325번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>list를 입력받고 정렬하고… 이런 부분은 생략<br>임의의 숫자도 입력받고 함수의 인자로 넘기는 부분도 생략</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sorted_list = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_value</span><span class=\"params\">(value, list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> value <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125; =&gt; False\"</span>.format(value))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125; =&gt; True\"</span>.format(value))</span><br><span class=\"line\"></span><br><span class=\"line\">print(sorted_list)</span><br><span class=\"line\">find_value(<span class=\"number\">5</span>, sorted_list)</span><br><span class=\"line\">find_value(<span class=\"number\">10</span>, sorted_list)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"7번-6326번\"><a href=\"#7번-6326번\" class=\"headerlink\" title=\"7번 - 6326번\"></a>7번 - 6326번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>팩토리얼 : n! = n * n-1 * n-2 * … * 2 * 1</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">factorial</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    ans = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>):</span><br><span class=\"line\">        ans *= i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans</span><br><span class=\"line\"></span><br><span class=\"line\">num = int(input())</span><br><span class=\"line\">print(factorial(num))</span><br></pre></td></tr></table></figure>\n          </div>\n<h2 id><a href=\"#\" class=\"headerlink\" title=\"**\"></a>**</h2><h1 id=\"8번-6327번\"><a href=\"#8번-6327번\" class=\"headerlink\" title=\"8번 - 6327번\"></a>8번 - 6327번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>콤마 ‘,’로 구분하고 int 형으로 입력받는 방법을 기억!</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">square_num</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n**<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">num1, num2 = map(int, input().split(<span class=\"string\">','</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"square(&#123;&#125;) =&gt; &#123;&#125;\"</span>.format(num1, square_num(num1)))</span><br><span class=\"line\">print(<span class=\"string\">\"square(&#123;&#125;) =&gt; &#123;&#125;\"</span>.format(num2, square_num(num2)))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"9번-6328번\"><a href=\"#9번-6328번\" class=\"headerlink\" title=\"9번 - 6328번\"></a>9번 - 6328번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>길이가 같을 경우 그냥 둘 다 출력되게함</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">which_is_longer</span><span class=\"params\">(str1, str2)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len(str1) == len(str2)):</span><br><span class=\"line\">        print(str1, <span class=\"string\">\", \"</span>, str2)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span>(len(str1)&gt;len(str2)):</span><br><span class=\"line\">        print(str1)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(str2)</span><br><span class=\"line\"></span><br><span class=\"line\">str1, str2 = input().split(<span class=\"string\">', '</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">which_is_longer(str1, str2)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"10번-6329번\"><a href=\"#10번-6329번\" class=\"headerlink\" title=\"10번 - 6329번\"></a>10번 - 6329번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">countDown</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>):</span><br><span class=\"line\">        print(<span class=\"string\">\"카운트다운을 하려면 0보다 큰 입력이 필요합니다.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n, <span class=\"number\">0</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">countDown(<span class=\"number\">0</span>)</span><br><span class=\"line\">countDown(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n          </div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"6번-6325번\"><a href=\"#6번-6325번\" class=\"headerlink\" title=\"6번 - 6325번\"></a>6번 - 6325번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>list를 입력받고 정렬하고… 이런 부분은 생략<br>임의의 숫자도 입력받고 함수의 인자로 넘기는 부분도 생략</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sorted_list = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_value</span><span class=\"params\">(value, list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> value <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125; =&gt; False\"</span>.format(value))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;&#125; =&gt; True\"</span>.format(value))</span><br><span class=\"line\"></span><br><span class=\"line\">print(sorted_list)</span><br><span class=\"line\">find_value(<span class=\"number\">5</span>, sorted_list)</span><br><span class=\"line\">find_value(<span class=\"number\">10</span>, sorted_list)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"7번-6326번\"><a href=\"#7번-6326번\" class=\"headerlink\" title=\"7번 - 6326번\"></a>7번 - 6326번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>팩토리얼 : n! = n * n-1 * n-2 * … * 2 * 1</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">factorial</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    ans = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>):</span><br><span class=\"line\">        ans *= i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans</span><br><span class=\"line\"></span><br><span class=\"line\">num = int(input())</span><br><span class=\"line\">print(factorial(num))</span><br></pre></td></tr></table></figure>\n          </div>\n<h2 id><a href=\"#\" class=\"headerlink\" title=\"**\"></a>**</h2><h1 id=\"8번-6327번\"><a href=\"#8번-6327번\" class=\"headerlink\" title=\"8번 - 6327번\"></a>8번 - 6327번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>콤마 ‘,’로 구분하고 int 형으로 입력받는 방법을 기억!</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">square_num</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n**<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">num1, num2 = map(int, input().split(<span class=\"string\">','</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"square(&#123;&#125;) =&gt; &#123;&#125;\"</span>.format(num1, square_num(num1)))</span><br><span class=\"line\">print(<span class=\"string\">\"square(&#123;&#125;) =&gt; &#123;&#125;\"</span>.format(num2, square_num(num2)))</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"9번-6328번\"><a href=\"#9번-6328번\" class=\"headerlink\" title=\"9번 - 6328번\"></a>9번 - 6328번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<blockquote>\n<p>길이가 같을 경우 그냥 둘 다 출력되게함</p>\n</blockquote>\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">which_is_longer</span><span class=\"params\">(str1, str2)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len(str1) == len(str2)):</span><br><span class=\"line\">        print(str1, <span class=\"string\">\", \"</span>, str2)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span>(len(str1)&gt;len(str2)):</span><br><span class=\"line\">        print(str1)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(str2)</span><br><span class=\"line\"></span><br><span class=\"line\">str1, str2 = input().split(<span class=\"string\">', '</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">which_is_longer(str1, str2)</span><br></pre></td></tr></table></figure>\n          </div>\n\n<hr>\n<h1 id=\"10번-6329번\"><a href=\"#10번-6329번\" class=\"headerlink\" title=\"10번 - 6329번\"></a>10번 - 6329번</h1><div class=\"note \">\n            <ul><li>시간 : 1개 테스트케이스를 합쳐서 Python의 경우 1초</li><li>메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내</li></ul>\n          </div>\n\n<div class=\"note success\">\n            <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">countDown</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>):</span><br><span class=\"line\">        print(<span class=\"string\">\"카운트다운을 하려면 0보다 큰 입력이 필요합니다.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n, <span class=\"number\">0</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">countDown(<span class=\"number\">0</span>)</span><br><span class=\"line\">countDown(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n          </div>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjyplt7p800002646142myjsf","category_id":"cjyplt7po00022646r7g8mpcy","_id":"cjyplt7qg000j2646twluvtc2"},{"post_id":"cjyplt7p800002646142myjsf","category_id":"cjyplt7qc000f2646gma2ix6u","_id":"cjyplt7qh000m264629mvoo9c"},{"post_id":"cjyplt7pq00042646mr7326ps","category_id":"cjyplt7py00072646nz3p0rbh","_id":"cjyplt7qk000w2646njjhtvhx"},{"post_id":"cjyplt7pq00042646mr7326ps","category_id":"cjyplt7qh000n2646lndrsbby","_id":"cjyplt7qk000y264641n9rc8x"},{"post_id":"cjyplt7pt00052646px19ywpy","category_id":"cjyplt7py00072646nz3p0rbh","_id":"cjyplt7ql00132646e8m7jrko"},{"post_id":"cjyplt7pt00052646px19ywpy","category_id":"cjyplt7qj000v2646g2q4tdut","_id":"cjyplt7qs001626460jv1ge5m"},{"post_id":"cjyplt7pw00062646pbtce6gs","category_id":"cjyplt7qf000h2646zma91p04","_id":"cjyplt7qv00182646kxrq1i04"},{"post_id":"cjyplt7pw00062646pbtce6gs","category_id":"cjyplt7qk00102646vxn7p7s5","_id":"cjyplt7r1001c2646crwqna65"},{"post_id":"cjyplt7q100092646sxen49r5","category_id":"cjyplt7qg000k26469mwif74e","_id":"cjyplt7r2001d26469djci0hz"},{"post_id":"cjyplt7q100092646sxen49r5","category_id":"cjyplt7ql00142646merla4ey","_id":"cjyplt7r3001f2646xctuy3q6"},{"post_id":"cjyplt7q4000a26465at7smhu","category_id":"cjyplt7qg000k26469mwif74e","_id":"cjyplt7r5001h2646rn41q30z"},{"post_id":"cjyplt7q4000a26465at7smhu","category_id":"cjyplt7ql00142646merla4ey","_id":"cjyplt7r7001k26465mxqb2ys"},{"post_id":"cjyplt84d001n26462px9ybbz","category_id":"cjyplt7qf000h2646zma91p04","_id":"cjyplt84y001v2646kmxtxxhw"},{"post_id":"cjyplt84d001n26462px9ybbz","category_id":"cjyplt7qk00102646vxn7p7s5","_id":"cjyplt85m001y2646yxf6e6m8"},{"post_id":"cjyplt84h001p2646m2q1w6xu","category_id":"cjyplt7qf000h2646zma91p04","_id":"cjyplt86000212646qvd5wnrr"},{"post_id":"cjyplt84h001p2646m2q1w6xu","category_id":"cjyplt7qk00102646vxn7p7s5","_id":"cjyplt86500232646k7q9suki"},{"post_id":"cjyplt84o001s2646ib6nqpzz","category_id":"cjyplt7qf000h2646zma91p04","_id":"cjyplt86c00282646e2wdbnzy"},{"post_id":"cjyplt84o001s2646ib6nqpzz","category_id":"cjyplt7qk00102646vxn7p7s5","_id":"cjyplt86h002b2646devnqaad"},{"post_id":"cjyplt85a001w2646sgq7xau5","category_id":"cjyplt7qf000h2646zma91p04","_id":"cjyplt86q002f2646htdu2oz9"},{"post_id":"cjyplt85a001w2646sgq7xau5","category_id":"cjyplt7qk00102646vxn7p7s5","_id":"cjyplt86u002h26469h46r0fs"},{"post_id":"cjyplt84v001u2646l9wdbyzp","category_id":"cjyplt85n001z2646jtpyjxh6","_id":"cjyplt86x002l26467wmnckl3"},{"post_id":"cjyplt85r00202646ylyahvta","category_id":"cjyplt85n001z2646jtpyjxh6","_id":"cjyplt872002o2646dz3s54cs"},{"post_id":"cjyplt878002u2646nsyzr8eh","category_id":"cjyplt7py00072646nz3p0rbh","_id":"cjyplt87s003026469hupouex"},{"post_id":"cjyplt878002u2646nsyzr8eh","category_id":"cjyplt875002s26461uok18x2","_id":"cjyplt87x00352646g6fe2x9o"},{"post_id":"cjyplt86e002926469ekr5xy9","category_id":"cjyplt7py00072646nz3p0rbh","_id":"cjyplt88000382646q96k9qmm"},{"post_id":"cjyplt86e002926469ekr5xy9","category_id":"cjyplt875002s26461uok18x2","_id":"cjyplt884003c2646l58lemmi"},{"post_id":"cjyplt86r002g2646w0th1gxw","category_id":"cjyplt7py00072646nz3p0rbh","_id":"cjyplt886003e2646hsaaf6i0"},{"post_id":"cjyplt86r002g2646w0th1gxw","category_id":"cjyplt875002s26461uok18x2","_id":"cjyplt888003j2646uq6ja27m"},{"post_id":"cjyplt86100222646twvt85ru","category_id":"cjyplt86n002e26460n3ii7bv","_id":"cjyplt88b003n2646mfpp4kic"},{"post_id":"cjyplt86100222646twvt85ru","category_id":"cjyplt881003a2646aqvg3zey","_id":"cjyplt88e003q2646raym29wv"},{"post_id":"cjyplt86v002j2646qqrzxzo5","category_id":"cjyplt7py00072646nz3p0rbh","_id":"cjyplt88g003s2646zxaadeuo"},{"post_id":"cjyplt86v002j2646qqrzxzo5","category_id":"cjyplt875002s26461uok18x2","_id":"cjyplt88j003w2646sa9to45d"},{"post_id":"cjyplt88e003r2646eth3xy6u","category_id":"cjyplt88b003m2646d87dqus0","_id":"cjyplt88l003y2646uuxsbixn"},{"post_id":"cjyplt86z002n26463q5zkb2h","category_id":"cjyplt88b003m2646d87dqus0","_id":"cjyplt88m00412646ps10iruw"},{"post_id":"cjyplt88j003x2646gq4tmkwi","category_id":"cjyplt88b003m2646d87dqus0","_id":"cjyplt88m00422646mo0ii81h"},{"post_id":"cjyplt86700252646rou5f13c","category_id":"cjyplt86n002e26460n3ii7bv","_id":"cjyplt88n00452646i7ctd6ys"},{"post_id":"cjyplt86700252646rou5f13c","category_id":"cjyplt881003a2646aqvg3zey","_id":"cjyplt88o0046264690gotj8t"},{"post_id":"cjyplt873002r2646rmk5e7ql","category_id":"cjyplt86n002e26460n3ii7bv","_id":"cjyplt88o00492646w5qsep00"},{"post_id":"cjyplt873002r2646rmk5e7ql","category_id":"cjyplt881003a2646aqvg3zey","_id":"cjyplt88p004a2646l0knr4jl"},{"post_id":"cjyplt87d002v2646m7qq8nyl","category_id":"cjyplt88b003m2646d87dqus0","_id":"cjyplt88q004c2646o96peoup"},{"post_id":"cjyplt87k002y264601ot5ptt","category_id":"cjyplt86n002e26460n3ii7bv","_id":"cjyplt88r004f2646f1ofo8ne"},{"post_id":"cjyplt87k002y264601ot5ptt","category_id":"cjyplt881003a2646aqvg3zey","_id":"cjyplt88r004g26460fp5glu7"},{"post_id":"cjyplt86k002d2646yzsawt2j","category_id":"cjyplt86n002e26460n3ii7bv","_id":"cjyplt88s004j2646ze4d8r7a"},{"post_id":"cjyplt86k002d2646yzsawt2j","category_id":"cjyplt881003a2646aqvg3zey","_id":"cjyplt88t004k2646z4tjxsir"},{"post_id":"cjyplt87q002z26466gy3afa9","category_id":"cjyplt88b003m2646d87dqus0","_id":"cjyplt88v004n26461walq694"},{"post_id":"cjyplt87u00332646pgsn6531","category_id":"cjyplt86n002e26460n3ii7bv","_id":"cjyplt88x004s2646h1rga7ps"},{"post_id":"cjyplt87u00332646pgsn6531","category_id":"cjyplt881003a2646aqvg3zey","_id":"cjyplt88z004u2646ycnjjx74"},{"post_id":"cjyplt87y00362646x8z6ktl1","category_id":"cjyplt88b003m2646d87dqus0","_id":"cjyplt890004y2646w65wzf7y"},{"post_id":"cjyplt883003b2646t0myr7wf","category_id":"cjyplt88b003m2646d87dqus0","_id":"cjyplt89200532646r494l9ba"},{"post_id":"cjyplt885003d2646j3l90k0p","category_id":"cjyplt88b003m2646d87dqus0","_id":"cjyplt894005826466y7ncrr4"},{"post_id":"cjyplt887003h2646vjosgjmg","category_id":"cjyplt88b003m2646d87dqus0","_id":"cjyplt896005b2646zfpjxpr8"},{"post_id":"cjyplt889003k2646ta58ew2p","category_id":"cjyplt88b003m2646d87dqus0","_id":"cjyplt897005d2646g1xqs8yc"},{"post_id":"cjyplt88c003p2646nl0tatle","category_id":"cjyplt88b003m2646d87dqus0","_id":"cjyplt898005f2646wdnwn5zz"}],"PostTag":[{"post_id":"cjyplt7p800002646142myjsf","tag_id":"cjyplt7pq00032646660jhj7w","_id":"cjyplt7qa000d2646uukp6jcl"},{"post_id":"cjyplt7p800002646142myjsf","tag_id":"cjyplt7pz000826469q44ucea","_id":"cjyplt7qc000e2646b7tilmxl"},{"post_id":"cjyplt7pq00042646mr7326ps","tag_id":"cjyplt7q7000c2646altl2hse","_id":"cjyplt7qi000p2646bxsipqzk"},{"post_id":"cjyplt7pq00042646mr7326ps","tag_id":"cjyplt7qd000g2646xnnalifg","_id":"cjyplt7qi000q2646henwj1ie"},{"post_id":"cjyplt7pq00042646mr7326ps","tag_id":"cjyplt7qf000i2646wyv2u4lf","_id":"cjyplt7qj000t26463cor8c6c"},{"post_id":"cjyplt7pq00042646mr7326ps","tag_id":"cjyplt7qh000l26463xpl3ie3","_id":"cjyplt7qj000u26460qhezsw3"},{"post_id":"cjyplt7pt00052646px19ywpy","tag_id":"cjyplt7qi000o2646jxh4f8uj","_id":"cjyplt7qk000z2646juf4ftna"},{"post_id":"cjyplt7pt00052646px19ywpy","tag_id":"cjyplt7qj000s264645jdwetj","_id":"cjyplt7ql00112646xgad9f54"},{"post_id":"cjyplt7pw00062646pbtce6gs","tag_id":"cjyplt7qk000x264660jdfa3s","_id":"cjyplt7qu00172646kj7r98b2"},{"post_id":"cjyplt7pw00062646pbtce6gs","tag_id":"cjyplt7ql00122646vkdkxup1","_id":"cjyplt7qy001a2646c6mgyk6p"},{"post_id":"cjyplt7q100092646sxen49r5","tag_id":"cjyplt7qr00152646ecrpnqmc","_id":"cjyplt7r5001g264605tajv4p"},{"post_id":"cjyplt7q100092646sxen49r5","tag_id":"cjyplt7r0001b2646quju8jnc","_id":"cjyplt7r6001i2646e9ddsllb"},{"post_id":"cjyplt7q4000a26465at7smhu","tag_id":"cjyplt7r0001b2646quju8jnc","_id":"cjyplt7r8001l2646wzawhwdg"},{"post_id":"cjyplt7q4000a26465at7smhu","tag_id":"cjyplt7qr00152646ecrpnqmc","_id":"cjyplt7r9001m26463on172vd"},{"post_id":"cjyplt84d001n26462px9ybbz","tag_id":"cjyplt84n001r2646b0u9a79c","_id":"cjyplt86b00272646hf38xn3m"},{"post_id":"cjyplt84d001n26462px9ybbz","tag_id":"cjyplt85i001x26465su9dxqo","_id":"cjyplt86g002a2646sp62mw1q"},{"post_id":"cjyplt84h001p2646m2q1w6xu","tag_id":"cjyplt865002426462sdt3hee","_id":"cjyplt86y002m2646mo0u2sb6"},{"post_id":"cjyplt84h001p2646m2q1w6xu","tag_id":"cjyplt86h002c2646u95swxrg","_id":"cjyplt872002p26467vk6v1r4"},{"post_id":"cjyplt84o001s2646ib6nqpzz","tag_id":"cjyplt865002426462sdt3hee","_id":"cjyplt877002t2646ikngg9x6"},{"post_id":"cjyplt84v001u2646l9wdbyzp","tag_id":"cjyplt872002q2646r4an61he","_id":"cjyplt87x00342646tllpagle"},{"post_id":"cjyplt84v001u2646l9wdbyzp","tag_id":"cjyplt87g002w2646q4ko4iu3","_id":"cjyplt88000372646p148e1tk"},{"post_id":"cjyplt85r00202646ylyahvta","tag_id":"cjyplt87g002w2646q4ko4iu3","_id":"cjyplt888003i2646dihisv0h"},{"post_id":"cjyplt85r00202646ylyahvta","tag_id":"cjyplt88000392646gaagmtqd","_id":"cjyplt88b003l26466eq03mrt"},{"post_id":"cjyplt86100222646twvt85ru","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt88v004o2646zm1w666t"},{"post_id":"cjyplt86100222646twvt85ru","tag_id":"cjyplt88b003o2646rolitr97","_id":"cjyplt88w004p2646n0c3o5uj"},{"post_id":"cjyplt86100222646twvt85ru","tag_id":"cjyplt88i003v2646jq8jn1m6","_id":"cjyplt88y004t2646i2hqq6ls"},{"post_id":"cjyplt86100222646twvt85ru","tag_id":"cjyplt88m004026466veqt88j","_id":"cjyplt88z004v26467qdflq9c"},{"post_id":"cjyplt86100222646twvt85ru","tag_id":"cjyplt88n00442646o8djbdiy","_id":"cjyplt890004z2646prpkp29u"},{"post_id":"cjyplt86100222646twvt85ru","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt89100502646dw82fqcv"},{"post_id":"cjyplt86100222646twvt85ru","tag_id":"cjyplt88q004d26467h2gilja","_id":"cjyplt89300542646lryr9qde"},{"post_id":"cjyplt86100222646twvt85ru","tag_id":"cjyplt88s004h2646du8k0cv2","_id":"cjyplt89300552646oerrmss0"},{"post_id":"cjyplt86700252646rou5f13c","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt89a005i2646jm7und4k"},{"post_id":"cjyplt86700252646rou5f13c","tag_id":"cjyplt88b003o2646rolitr97","_id":"cjyplt89a005j26460j3mnp1e"},{"post_id":"cjyplt86700252646rou5f13c","tag_id":"cjyplt88i003v2646jq8jn1m6","_id":"cjyplt89b005l2646tevv6oxe"},{"post_id":"cjyplt86700252646rou5f13c","tag_id":"cjyplt88m004026466veqt88j","_id":"cjyplt89c005m2646j6ffep8a"},{"post_id":"cjyplt86700252646rou5f13c","tag_id":"cjyplt88n00442646o8djbdiy","_id":"cjyplt89c005o2646pf2518uu"},{"post_id":"cjyplt86700252646rou5f13c","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt89d005p26465q29t63v"},{"post_id":"cjyplt86700252646rou5f13c","tag_id":"cjyplt88q004d26467h2gilja","_id":"cjyplt89d005r2646wmlujqk9"},{"post_id":"cjyplt86700252646rou5f13c","tag_id":"cjyplt898005e2646hgxumf5t","_id":"cjyplt89d005s26469c0p6udk"},{"post_id":"cjyplt86700252646rou5f13c","tag_id":"cjyplt88s004h2646du8k0cv2","_id":"cjyplt89d005t2646lokbh1pq"},{"post_id":"cjyplt86e002926469ekr5xy9","tag_id":"cjyplt7qf000i2646wyv2u4lf","_id":"cjyplt89g005x2646amcxjs4d"},{"post_id":"cjyplt86e002926469ekr5xy9","tag_id":"cjyplt899005h264667qcq23f","_id":"cjyplt89g005y2646iba7l21i"},{"post_id":"cjyplt86e002926469ekr5xy9","tag_id":"cjyplt89b005k2646omco6jn2","_id":"cjyplt89h00602646bukyi614"},{"post_id":"cjyplt86e002926469ekr5xy9","tag_id":"cjyplt89c005n26465nkl9nxg","_id":"cjyplt89h00612646ade4e15n"},{"post_id":"cjyplt86e002926469ekr5xy9","tag_id":"cjyplt7q7000c2646altl2hse","_id":"cjyplt89i00632646uq8bcaob"},{"post_id":"cjyplt86e002926469ekr5xy9","tag_id":"cjyplt89d005q2646yeqalhri","_id":"cjyplt89i00642646mszkk419"},{"post_id":"cjyplt86e002926469ekr5xy9","tag_id":"cjyplt89d005u2646o2l2fzz9","_id":"cjyplt89j006626464t5q6gd6"},{"post_id":"cjyplt86e002926469ekr5xy9","tag_id":"cjyplt89e005v26460m2sphrd","_id":"cjyplt89j00672646zt4h5mzd"},{"post_id":"cjyplt86k002d2646yzsawt2j","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt89p006f2646qjvdv3bz"},{"post_id":"cjyplt86k002d2646yzsawt2j","tag_id":"cjyplt88b003o2646rolitr97","_id":"cjyplt89p006g26469pdh4r5d"},{"post_id":"cjyplt86k002d2646yzsawt2j","tag_id":"cjyplt88i003v2646jq8jn1m6","_id":"cjyplt89q006i2646p1wrs8xb"},{"post_id":"cjyplt86k002d2646yzsawt2j","tag_id":"cjyplt88m004026466veqt88j","_id":"cjyplt89q006j2646m0rumvar"},{"post_id":"cjyplt86k002d2646yzsawt2j","tag_id":"cjyplt88n00442646o8djbdiy","_id":"cjyplt89r006l2646oebk80i8"},{"post_id":"cjyplt86k002d2646yzsawt2j","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt89r006m26467wmkqgts"},{"post_id":"cjyplt86k002d2646yzsawt2j","tag_id":"cjyplt88q004d26467h2gilja","_id":"cjyplt89s006o2646vschyihv"},{"post_id":"cjyplt86k002d2646yzsawt2j","tag_id":"cjyplt89m006b2646y7jjm9zc","_id":"cjyplt89s006p26462c7983k4"},{"post_id":"cjyplt86k002d2646yzsawt2j","tag_id":"cjyplt89m006c26468gqgkk2s","_id":"cjyplt89t006r26467gv56ekl"},{"post_id":"cjyplt86k002d2646yzsawt2j","tag_id":"cjyplt88s004h2646du8k0cv2","_id":"cjyplt89t006s2646p12cr5vz"},{"post_id":"cjyplt86r002g2646w0th1gxw","tag_id":"cjyplt7qf000i2646wyv2u4lf","_id":"cjyplt89u006v2646nd91xv34"},{"post_id":"cjyplt86r002g2646w0th1gxw","tag_id":"cjyplt899005h264667qcq23f","_id":"cjyplt89v006w2646e9eqe7mc"},{"post_id":"cjyplt86r002g2646w0th1gxw","tag_id":"cjyplt89p006h2646iybwpgq1","_id":"cjyplt89v006y2646nubsbnx6"},{"post_id":"cjyplt86r002g2646w0th1gxw","tag_id":"cjyplt89b005k2646omco6jn2","_id":"cjyplt89v006z26463vhlogyv"},{"post_id":"cjyplt86r002g2646w0th1gxw","tag_id":"cjyplt7q7000c2646altl2hse","_id":"cjyplt89v00712646cge43irx"},{"post_id":"cjyplt86r002g2646w0th1gxw","tag_id":"cjyplt89d005q2646yeqalhri","_id":"cjyplt89v007226460bj0ckwh"},{"post_id":"cjyplt86r002g2646w0th1gxw","tag_id":"cjyplt89d005u2646o2l2fzz9","_id":"cjyplt89w00742646xyf0m520"},{"post_id":"cjyplt86r002g2646w0th1gxw","tag_id":"cjyplt89e005v26460m2sphrd","_id":"cjyplt89w00752646ah6missf"},{"post_id":"cjyplt86v002j2646qqrzxzo5","tag_id":"cjyplt7qf000i2646wyv2u4lf","_id":"cjyplt89y007b264624vvbqg7"},{"post_id":"cjyplt86v002j2646qqrzxzo5","tag_id":"cjyplt899005h264667qcq23f","_id":"cjyplt89y007c2646et1oia8h"},{"post_id":"cjyplt86v002j2646qqrzxzo5","tag_id":"cjyplt89b005k2646omco6jn2","_id":"cjyplt89z007e26468oc3211i"},{"post_id":"cjyplt86v002j2646qqrzxzo5","tag_id":"cjyplt89v00702646zhr2kbt4","_id":"cjyplt89z007f2646xabniu2l"},{"post_id":"cjyplt86v002j2646qqrzxzo5","tag_id":"cjyplt89w00732646cx76csu4","_id":"cjyplt89z007h2646w5obb5xm"},{"post_id":"cjyplt86v002j2646qqrzxzo5","tag_id":"cjyplt89w00762646zxmgk0qu","_id":"cjyplt89z007i2646q2ticadr"},{"post_id":"cjyplt86v002j2646qqrzxzo5","tag_id":"cjyplt7q7000c2646altl2hse","_id":"cjyplt89z007k2646yi3jvhn3"},{"post_id":"cjyplt86v002j2646qqrzxzo5","tag_id":"cjyplt89d005q2646yeqalhri","_id":"cjyplt8a0007l2646p4ywzbtb"},{"post_id":"cjyplt86v002j2646qqrzxzo5","tag_id":"cjyplt89d005u2646o2l2fzz9","_id":"cjyplt8a0007n2646pm2sxu3j"},{"post_id":"cjyplt86v002j2646qqrzxzo5","tag_id":"cjyplt89e005v26460m2sphrd","_id":"cjyplt8a0007o264686jyoof7"},{"post_id":"cjyplt86z002n26463q5zkb2h","tag_id":"cjyplt89x007a2646r7qod941","_id":"cjyplt8a1007q2646xo1zbnwa"},{"post_id":"cjyplt86z002n26463q5zkb2h","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8a1007r2646v94ax1i2"},{"post_id":"cjyplt86z002n26463q5zkb2h","tag_id":"cjyplt89z007g2646dpodt7go","_id":"cjyplt8a1007t2646oo1k8ymw"},{"post_id":"cjyplt86z002n26463q5zkb2h","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8a1007u2646lfcs1dth"},{"post_id":"cjyplt873002r2646rmk5e7ql","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8a500832646bvqmtuua"},{"post_id":"cjyplt873002r2646rmk5e7ql","tag_id":"cjyplt88b003o2646rolitr97","_id":"cjyplt8a500842646odqx5vgj"},{"post_id":"cjyplt873002r2646rmk5e7ql","tag_id":"cjyplt88i003v2646jq8jn1m6","_id":"cjyplt8a50086264611kfx32k"},{"post_id":"cjyplt873002r2646rmk5e7ql","tag_id":"cjyplt88m004026466veqt88j","_id":"cjyplt8a5008726466vlybun4"},{"post_id":"cjyplt873002r2646rmk5e7ql","tag_id":"cjyplt88n00442646o8djbdiy","_id":"cjyplt8a600892646bs9hu9r1"},{"post_id":"cjyplt873002r2646rmk5e7ql","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8a6008a26466q5v97lm"},{"post_id":"cjyplt873002r2646rmk5e7ql","tag_id":"cjyplt88q004d26467h2gilja","_id":"cjyplt8a6008c2646wzdz1f4i"},{"post_id":"cjyplt873002r2646rmk5e7ql","tag_id":"cjyplt8a3007z2646jj1gdp0n","_id":"cjyplt8a7008d2646u5i2twzx"},{"post_id":"cjyplt873002r2646rmk5e7ql","tag_id":"cjyplt8a300802646nq5bc61s","_id":"cjyplt8a7008f2646plysis73"},{"post_id":"cjyplt873002r2646rmk5e7ql","tag_id":"cjyplt88s004h2646du8k0cv2","_id":"cjyplt8a7008g2646p3xehjqg"},{"post_id":"cjyplt878002u2646nsyzr8eh","tag_id":"cjyplt7qf000i2646wyv2u4lf","_id":"cjyplt8a9008j2646ns2a00qn"},{"post_id":"cjyplt878002u2646nsyzr8eh","tag_id":"cjyplt899005h264667qcq23f","_id":"cjyplt8a9008k26469otkz58b"},{"post_id":"cjyplt878002u2646nsyzr8eh","tag_id":"cjyplt89b005k2646omco6jn2","_id":"cjyplt8a9008m2646zxl0fmjw"},{"post_id":"cjyplt878002u2646nsyzr8eh","tag_id":"cjyplt89c005n26465nkl9nxg","_id":"cjyplt8a9008n2646tw4lgtmp"},{"post_id":"cjyplt878002u2646nsyzr8eh","tag_id":"cjyplt7q7000c2646altl2hse","_id":"cjyplt8aa008p2646a1csklco"},{"post_id":"cjyplt878002u2646nsyzr8eh","tag_id":"cjyplt89d005q2646yeqalhri","_id":"cjyplt8aa008q2646qn99ofl3"},{"post_id":"cjyplt878002u2646nsyzr8eh","tag_id":"cjyplt89d005u2646o2l2fzz9","_id":"cjyplt8aa008s26467omspjbb"},{"post_id":"cjyplt878002u2646nsyzr8eh","tag_id":"cjyplt89e005v26460m2sphrd","_id":"cjyplt8aa008t2646jckx9p6k"},{"post_id":"cjyplt87d002v2646m7qq8nyl","tag_id":"cjyplt89x007a2646r7qod941","_id":"cjyplt8ab008v2646r4s2p277"},{"post_id":"cjyplt87d002v2646m7qq8nyl","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8ab008w2646ap4xchkf"},{"post_id":"cjyplt87d002v2646m7qq8nyl","tag_id":"cjyplt89z007g2646dpodt7go","_id":"cjyplt8ac008y26460t7wywyd"},{"post_id":"cjyplt87d002v2646m7qq8nyl","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8ac008z2646qr75yttt"},{"post_id":"cjyplt87k002y264601ot5ptt","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8ag00992646mxm4mwul"},{"post_id":"cjyplt87k002y264601ot5ptt","tag_id":"cjyplt88b003o2646rolitr97","_id":"cjyplt8ah009a264654t75cp3"},{"post_id":"cjyplt87k002y264601ot5ptt","tag_id":"cjyplt88i003v2646jq8jn1m6","_id":"cjyplt8ah009c2646gecju43a"},{"post_id":"cjyplt87k002y264601ot5ptt","tag_id":"cjyplt88m004026466veqt88j","_id":"cjyplt8ah009d2646jt9fnmd0"},{"post_id":"cjyplt87k002y264601ot5ptt","tag_id":"cjyplt88n00442646o8djbdiy","_id":"cjyplt8ai009f2646pi9riq70"},{"post_id":"cjyplt87k002y264601ot5ptt","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8ai009g2646fc7nrx8h"},{"post_id":"cjyplt87k002y264601ot5ptt","tag_id":"cjyplt88q004d26467h2gilja","_id":"cjyplt8ai009i26466wnq4e0b"},{"post_id":"cjyplt87k002y264601ot5ptt","tag_id":"cjyplt89m006b2646y7jjm9zc","_id":"cjyplt8ai009j2646gd002q3d"},{"post_id":"cjyplt87k002y264601ot5ptt","tag_id":"cjyplt89m006c26468gqgkk2s","_id":"cjyplt8aj009l26460fco88cp"},{"post_id":"cjyplt87k002y264601ot5ptt","tag_id":"cjyplt88s004h2646du8k0cv2","_id":"cjyplt8aj009m2646fzt9ppwe"},{"post_id":"cjyplt87q002z26466gy3afa9","tag_id":"cjyplt89x007a2646r7qod941","_id":"cjyplt8ak009o2646fprmsk3h"},{"post_id":"cjyplt87q002z26466gy3afa9","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8ak009p2646e0ca32or"},{"post_id":"cjyplt87q002z26466gy3afa9","tag_id":"cjyplt89z007g2646dpodt7go","_id":"cjyplt8ak009r2646f93pn4ig"},{"post_id":"cjyplt87q002z26466gy3afa9","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8ak009s26460asmgxj2"},{"post_id":"cjyplt87u00332646pgsn6531","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8aq00a12646uqasbg87"},{"post_id":"cjyplt87u00332646pgsn6531","tag_id":"cjyplt88b003o2646rolitr97","_id":"cjyplt8aq00a22646ygv1i7e5"},{"post_id":"cjyplt87u00332646pgsn6531","tag_id":"cjyplt88i003v2646jq8jn1m6","_id":"cjyplt8ar00a42646ne8lji94"},{"post_id":"cjyplt87u00332646pgsn6531","tag_id":"cjyplt88m004026466veqt88j","_id":"cjyplt8ar00a526462nfegvvo"},{"post_id":"cjyplt87u00332646pgsn6531","tag_id":"cjyplt88n00442646o8djbdiy","_id":"cjyplt8ar00a72646s99q8j6p"},{"post_id":"cjyplt87u00332646pgsn6531","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8ar00a82646ipdqq77e"},{"post_id":"cjyplt87u00332646pgsn6531","tag_id":"cjyplt88q004d26467h2gilja","_id":"cjyplt8as00aa2646cg4gn5g6"},{"post_id":"cjyplt87u00332646pgsn6531","tag_id":"cjyplt8am009x2646iycmxggm","_id":"cjyplt8as00ab264618l2z24r"},{"post_id":"cjyplt87u00332646pgsn6531","tag_id":"cjyplt8an009y2646258qqtev","_id":"cjyplt8at00ad2646ipfwp2d8"},{"post_id":"cjyplt87u00332646pgsn6531","tag_id":"cjyplt88s004h2646du8k0cv2","_id":"cjyplt8at00ae2646qq164nld"},{"post_id":"cjyplt87y00362646x8z6ktl1","tag_id":"cjyplt89x007a2646r7qod941","_id":"cjyplt8at00ag2646uiiu6xri"},{"post_id":"cjyplt87y00362646x8z6ktl1","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8at00ah2646yvgol6lr"},{"post_id":"cjyplt87y00362646x8z6ktl1","tag_id":"cjyplt89z007g2646dpodt7go","_id":"cjyplt8au00aj2646mccotynb"},{"post_id":"cjyplt87y00362646x8z6ktl1","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8au00ak2646484qhj5u"},{"post_id":"cjyplt883003b2646t0myr7wf","tag_id":"cjyplt89x007a2646r7qod941","_id":"cjyplt8aw00an2646uwpi8qgi"},{"post_id":"cjyplt883003b2646t0myr7wf","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8aw00ao2646maiow7dd"},{"post_id":"cjyplt883003b2646t0myr7wf","tag_id":"cjyplt89z007g2646dpodt7go","_id":"cjyplt8ax00aq2646foaqzihs"},{"post_id":"cjyplt883003b2646t0myr7wf","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8ax00ar2646mwatkkse"},{"post_id":"cjyplt885003d2646j3l90k0p","tag_id":"cjyplt89x007a2646r7qod941","_id":"cjyplt8az00av2646kneiu45s"},{"post_id":"cjyplt885003d2646j3l90k0p","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8az00aw26462z4xnfx1"},{"post_id":"cjyplt885003d2646j3l90k0p","tag_id":"cjyplt89z007g2646dpodt7go","_id":"cjyplt8az00ay2646tggp1dlt"},{"post_id":"cjyplt885003d2646j3l90k0p","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8az00az2646u4uqzltg"},{"post_id":"cjyplt887003h2646vjosgjmg","tag_id":"cjyplt89x007a2646r7qod941","_id":"cjyplt8b100b2264666yqz7lx"},{"post_id":"cjyplt887003h2646vjosgjmg","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8b100b32646e7p8ronm"},{"post_id":"cjyplt887003h2646vjosgjmg","tag_id":"cjyplt89z007g2646dpodt7go","_id":"cjyplt8b100b526469zbmc8lx"},{"post_id":"cjyplt887003h2646vjosgjmg","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8b100b62646cmge1ew4"},{"post_id":"cjyplt889003k2646ta58ew2p","tag_id":"cjyplt89x007a2646r7qod941","_id":"cjyplt8b300b92646j3k19x2r"},{"post_id":"cjyplt889003k2646ta58ew2p","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8b300ba2646jb3n74s9"},{"post_id":"cjyplt889003k2646ta58ew2p","tag_id":"cjyplt89z007g2646dpodt7go","_id":"cjyplt8b400bc2646o19zoekg"},{"post_id":"cjyplt889003k2646ta58ew2p","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8b400bd2646wt7itu3i"},{"post_id":"cjyplt88c003p2646nl0tatle","tag_id":"cjyplt89x007a2646r7qod941","_id":"cjyplt8b600bg2646irzu6gq8"},{"post_id":"cjyplt88c003p2646nl0tatle","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8b600bh2646vespqm6b"},{"post_id":"cjyplt88c003p2646nl0tatle","tag_id":"cjyplt89z007g2646dpodt7go","_id":"cjyplt8b700bj2646qrh5zwd5"},{"post_id":"cjyplt88c003p2646nl0tatle","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8b700bk2646rwoggj5i"},{"post_id":"cjyplt88e003r2646eth3xy6u","tag_id":"cjyplt89x007a2646r7qod941","_id":"cjyplt8b800bn2646tn1fzc37"},{"post_id":"cjyplt88e003r2646eth3xy6u","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8b900bo2646s98k3ar5"},{"post_id":"cjyplt88e003r2646eth3xy6u","tag_id":"cjyplt89z007g2646dpodt7go","_id":"cjyplt8b900bq26469njr4tth"},{"post_id":"cjyplt88e003r2646eth3xy6u","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8b900br26461d8wh95n"},{"post_id":"cjyplt88j003x2646gq4tmkwi","tag_id":"cjyplt89x007a2646r7qod941","_id":"cjyplt8ba00bt2646sfpw1751"},{"post_id":"cjyplt88j003x2646gq4tmkwi","tag_id":"cjyplt886003f2646muk4fz6f","_id":"cjyplt8ba00bu26461elq71xn"},{"post_id":"cjyplt88j003x2646gq4tmkwi","tag_id":"cjyplt89z007g2646dpodt7go","_id":"cjyplt8ba00bv2646zlke5gig"},{"post_id":"cjyplt88j003x2646gq4tmkwi","tag_id":"cjyplt88o00482646t9nks4bp","_id":"cjyplt8bb00bw2646lkvxqw4j"}],"Tag":[{"name":"networking","_id":"cjyplt7pq00032646660jhj7w"},{"name":"컴퓨터망","_id":"cjyplt7pz000826469q44ucea"},{"name":"hexo","_id":"cjyplt7q7000c2646altl2hse"},{"name":"plugins","_id":"cjyplt7qd000g2646xnnalifg"},{"name":"헥소","_id":"cjyplt7qf000i2646wyv2u4lf"},{"name":"플러그인","_id":"cjyplt7qh000l26463xpl3ie3"},{"name":"markup","_id":"cjyplt7qi000o2646jxh4f8uj"},{"name":"markdown","_id":"cjyplt7qj000s264645jdwetj"},{"name":"spring","_id":"cjyplt7qk000x264660jdfa3s"},{"name":"스프링","_id":"cjyplt7ql00122646vkdkxup1"},{"name":"HL7","_id":"cjyplt7qr00152646ecrpnqmc"},{"name":"CDA","_id":"cjyplt7r0001b2646quju8jnc"},{"name":"FRAMEWORK","_id":"cjyplt84n001r2646b0u9a79c"},{"name":"MODULES","_id":"cjyplt85i001x26465su9dxqo"},{"name":"SPRING","_id":"cjyplt865002426462sdt3hee"},{"name":"POJO","_id":"cjyplt86h002c2646u95swxrg"},{"name":"운영체제","_id":"cjyplt872002q2646r4an61he"},{"name":"OS","_id":"cjyplt87g002w2646q4ko4iu3"},{"name":"운영체","_id":"cjyplt88000392646gaagmtqd"},{"name":"파이썬","_id":"cjyplt886003f2646muk4fz6f"},{"name":"캐글","_id":"cjyplt88b003o2646rolitr97"},{"name":"튜토리얼","_id":"cjyplt88i003v2646jq8jn1m6"},{"name":"kaggle","_id":"cjyplt88m004026466veqt88j"},{"name":"programming language","_id":"cjyplt88n00442646o8djbdiy"},{"name":"python","_id":"cjyplt88o00482646t9nks4bp"},{"name":"language","_id":"cjyplt88q004d26467h2gilja"},{"name":"tutorial","_id":"cjyplt88s004h2646du8k0cv2"},{"name":"functions","_id":"cjyplt898005e2646hgxumf5t"},{"name":"블로그","_id":"cjyplt899005h264667qcq23f"},{"name":"테마","_id":"cjyplt89b005k2646omco6jn2"},{"name":"adsense","_id":"cjyplt89c005n26465nkl9nxg"},{"name":"blog","_id":"cjyplt89d005q2646yeqalhri"},{"name":"next-theme","_id":"cjyplt89d005u2646o2l2fzz9"},{"name":"github page","_id":"cjyplt89e005v26460m2sphrd"},{"name":"booleans","_id":"cjyplt89m006b2646y7jjm9zc"},{"name":"conditionals","_id":"cjyplt89m006c26468gqgkk2s"},{"name":"SEO","_id":"cjyplt89p006h2646iybwpgq1"},{"name":"live2D","_id":"cjyplt89v00702646zhr2kbt4"},{"name":"움직이는","_id":"cjyplt89w00732646cx76csu4"},{"name":"배경","_id":"cjyplt89w00762646zxmgk0qu"},{"name":"삼성","_id":"cjyplt89x007a2646r7qod941"},{"name":"SW Academy","_id":"cjyplt89z007g2646dpodt7go"},{"name":"loops","_id":"cjyplt8a3007z2646jj1gdp0n"},{"name":"list comprehensions","_id":"cjyplt8a300802646nq5bc61s"},{"name":"strings","_id":"cjyplt8am009x2646iycmxggm"},{"name":"dictionaries","_id":"cjyplt8an009y2646258qqtev"}]}}